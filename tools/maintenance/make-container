#!/usr/bin/python
import sys
import os
import os.path
import glob

def filter((function_name, type_name, class_name, variable_type, argument_type, return_type,
            storage_type,
            plural_variable_type, plural_argument_type, plural_storage_type,
            index_type, plural_index_type, pass_index_type),
           infile, file_name):
    header_guard_class_name=class_name.upper()
    helpername= class_name.lower()
    return infile\
        .replace("HEADERNAME", class_name.upper())\
        .replace("HELPERNAME", helpername)\
        .replace("CLASSFUNCTIONNAME", helpername)\
        .replace("FUNCTIONNAME", function_name)\
        .replace("TYPENAME", type_name)\
        .replace("LCCLASSNAME", class_name.lower())\
        .replace("CLASSNAME", class_name)\
        .replace("PLURALVARIABLETYPE", plural_variable_type)\
        .replace("PLURALARGUMENTTYPE", plural_argument_type)\
        .replace("PLURALINDEXTYPE", plural_index_type)\
        .replace("PASSINDEXTYPE", pass_index_type)\
        .replace("INDEXTYPE", index_type)\
        .replace("RETURNTYPE", return_type)\
        .replace("VARIABLETYPE", variable_type)\
        .replace("PLURALSTORAGETYPE", plural_storage_type)\
        .replace("ARGUMENTTYPE", argument_type)\
        .replace("STORAGETYPE", storage_type)\
        .replace("FILESOURCE", file_name)


def make_one(params, test=True):
    (function_name, type_name, class_name, variable_type, argument_type, return_type,
     storage_type,
     plural_variable_type, plural_argument_type, plural_storage_type,
      index_type, plural_index_type, pass_index_type)= params
    path= "tools/maintenance/container_templates/"
    multi= class_name
    plural_multi= multi+"s"
    cname=function_name

    print "Creating class "+cname + "Container"

    input_headers= \
        glob.glob(path+"*/*.hpp")+ glob.glob(path+"*/internal/*.hpp") +\
        glob.glob(path+"*/*.cc")+ glob.glob(path+"*/internal/*.cc")
    files=[]
    for ip in input_headers:
        p= ip[len(path):]
        module= os.path.split(p)[0]
        rest= os.path.split(p)[1]
        if module.find("internal") != -1:
            module=os.path.split(module)[0]
            rest=os.path.join("internal", rest)

        name=rest.replace("NAME", multi)
        name=name.replace("name", multi.lower())
        if p.endswith(".hpp"):
            subdir= "include"
            name=name.replace(".hpp", ".h")
        else:
            subdir= "src"
            name=name.replace(".cc", ".cpp")
        out_path= os.path.join("modules", module, subdir, name)
        files.append((out_path, ip))


    if test:
        files.append(("modules/container/test/test_"+cname + "_restraint.py",
                   path+"/test.py"))
        files.append(("modules/container/test/test_"+cname + "_state.py",
                      path+"/test_state.py"))
    for p in files:
        print p
        ofile= open(p[0], 'w')
        ifile= open(p[1], 'r')
        contents= ifile.read()
        print "writing " + p[0]
        ofile.write(filter(params,
                           contents, p[1]))

def main():
    #(function_name, class_name, variable_type, argument_type,
    # return_type, storage_type,
    #        plural_variable_type, plural_argument_type, plural_storage_type)
    make_one(("particle", "Particle", "Singleton", "Particle*", "Particle*",
              "Particle*", "Pointer<Particle>",
              "ParticlesTemp", "ParticlesTemp", "Particles",
              "ParticleIndex", "ParticleIndexes", "ParticleIndex"))
    make_one(("particle_pair", "ParticlePair", "Pair", "ParticlePair", "const ParticlePair&",
              "const ParticlePair", "ParticlePair",
              "ParticlePairsTemp", "ParticlePairsTemp", "ParticlePairs",
              "ParticleIndexPair", "ParticleIndexPairs", "const ParticleIndexPair&"))
    make_one(("particle_triplet", "ParticleTriplet", "Triplet", "ParticleTriplet", "const ParticleTriplet&",
              "const ParticleTriplet", "ParticleTriplet",
              "ParticleTripletsTemp", "ParticleTripletsTemp", "ParticleTriplets",
              "ParticleIndexTriplet", "ParticleIndexTriplets", "const ParticleIndexTriplet&"), test=False)
    make_one(("particle_quad", "ParticleQuad", "Quad", "ParticleQuad", "const ParticleQuad&",
              "const ParticleQuad", "ParticleQuad",
              "ParticleQuadsTemp", "ParticleQuadsTemp", "ParticleQuads",
              "ParticleIndexQuad", "ParticleIndexQuads", "const ParticleIndexQuad&"), test=False)
    #make_one("particle tuple", "ParticlesTemp", "const ParticlesTemp&", "Particles",
    #         "Tuple", "particle tuples", "ParticlesList", "Tuples", test=False)




if __name__ == '__main__':
    main()

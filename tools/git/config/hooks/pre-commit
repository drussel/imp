#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

branch=`git status -b| grep "# On branch"| cut -f4 -d\ `
if test "$branch" == "develop"
then
    echo "Committing directly to develop is not allowed while we still have an svn repo"
    exit 1
fi

if test "$branch" \!= "develop" -a "$branch" \!= "master" -a "$branch" \!= "svn"
then
   if test \! -e README.md
   then
       echo "ERROR: Branches that are not develop or master must have a README.md file describing them"
       echo "ERROR: current branch is" $branch
       exit 1
   fi
fi

untracked=`git status -u | grep '^# Untracked files:$'`
if test -n "$untracked"
then
  echo "ERROR: There are untracked files in your repository. If you want to keep them around you can add them to your .git/info/exclude file."
fi

# Redirect output to stderr.
exec 1>&2
files=`git diff-index --name-only $against`
if test -n "$files"
then
  exec python ./tools/check-standards.py `git diff-index --name-only $against`
fi

/**
 *  \file ListCLASSNAMEContainer.h    \brief Store a list of PLURALVARIABLETYPE
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_CORE_LIST_HEADERNAME_CONTAINER_H
#define IMPCORE_INTERNAL_CORE_LIST_HEADERNAME_CONTAINER_H

#include "../core_config.h"
#include <IMP/CLASSNAMEContainer.h>
#include <IMP/internal/container_helpers.h>
#include "HELPERNAME_helpers.h"
#include <IMP/ScoreState.h>
#include <IMP/scoped.h>
#include <IMP/generic.h>

IMPCORE_BEGIN_INTERNAL_NAMESPACE


class IMPCOREEXPORT CoreListCLASSNAMEContainer:
  public internal::ListLikeCLASSNAMEContainer
{
  IMP_ACTIVE_CONTAINER_DECL(CoreListCLASSNAMEContainer);
 public:
  CoreListCLASSNAMEContainer(Model *m, std::string name);
  CoreListCLASSNAMEContainer(Model *m, const char *name);
  void add_FUNCTIONNAME(ARGUMENTTYPE vt) {
    IMP_USAGE_CHECK(IMP::internal::is_valid(vt),
                    "Passed CLASSNAME cannot be nullptr (or None)");
    add_to_list(IMP::internal::get_index(vt));
  }
  void add_FUNCTIONNAMEs(const PLURALARGUMENTTYPE &c) {
    if (c.empty()) return;
    PLURALINDEXTYPE cp= IMP::internal::get_index(c);
    add_to_list(cp);
  }
  void remove_FUNCTIONNAMEs(const PLURALARGUMENTTYPE &c);
  void set_FUNCTIONNAMEs(PLURALARGUMENTTYPE c) {
    PLURALINDEXTYPE cp= IMP::internal::get_index(c);
    update_list(cp);
  }
  void set_FUNCTIONNAMEs(PLURALINDEXTYPE cp) {
    update_list(cp);
  }
  void clear_FUNCTIONNAMEs() {
    PLURALINDEXTYPE t;
    update_list(t);
  }
  bool get_is_up_to_date() const {
    return true;
  }
  IMP_LISTLIKE_HEADERNAME_CONTAINER(CoreListCLASSNAMEContainer);
};

IMP_OBJECTS(CoreListCLASSNAMEContainer, CoreListCLASSNAMEContainers);

IMPCORE_END_INTERNAL_NAMESPACE

#endif  /* IMPCORE_INTERNAL_CORE_LIST_HEADERNAME_CONTAINER_H */

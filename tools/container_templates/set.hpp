/**
 *  \file CLASSNAMEContainerSet.h
 *  \brief Store a set of CLASSNAMEContainers
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMPCONTAINER_HEADERNAME_CONTAINER_SET_H
#define IMPCONTAINER_HEADERNAME_CONTAINER_SET_H

#include "container_config.h"
#include <IMP/CLASSNAMEContainer.h>
#include <IMP/container_macros.h>
#include <IMP/internal/container_helpers.h>
#include <IMP/scoped.h>

IMPCONTAINER_BEGIN_NAMESPACE

//! Stores a set of CLASSNAMEContainers
/** The input sets must be disjoint. This can change if there is
    demand for it.

    \usesconstraint
*/
class IMPCONTAINEREXPORT CLASSNAMEContainerSet
  : public CLASSNAMEContainer
{
  IMP_CONTAINER_DEPENDENCIES(CLASSNAMEContainerSet,
                             {
                               ret.insert(ret.end(),
                                          back_->CLASSFUNCTIONNAME_containers_begin(),
                                          back_->CLASSFUNCTIONNAME_containers_end());
                             });
  static CLASSNAMEContainerSet* get_set(CLASSNAMEContainer* c) {
    return dynamic_cast<CLASSNAMEContainerSet*>(c);
  }
 public:
  //! Construct and empty set
  CLASSNAMEContainerSet(Model *m,
                        std::string name="CLASSNAMEContainerSet %1%");

  CLASSNAMEContainerSet(const CLASSNAMEContainersTemp &pc,
                        std::string name="CLASSNAMEContainerSet %1%");

  bool get_contains_FUNCTIONNAME(ARGUMENTTYPE) const;
  void apply(const CLASSNAMEModifier *sm);
  void apply(const CLASSNAMEDerivativeModifier *sm,
             DerivativeAccumulator &da);
  double evaluate(const CLASSNAMEScore *s,
                  DerivativeAccumulator *da) const;
  double evaluate_if_good(const CLASSNAMEScore *s,
                          DerivativeAccumulator *da,
                          double max) const;
 template <class SM>
  void template_apply(const SM *sm,
                      DerivativeAccumulator &da) {
   for (unsigned int i=0; i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
     get_CLASSFUNCTIONNAME_container(i)->apply(sm, da);
   }
 }
  template <class SM>
  void template_apply(const SM *sm) {
    for (unsigned int i=0; i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
      get_CLASSFUNCTIONNAME_container(i)->apply(sm);
    }
  }
  template <class SS>
  double template_evaluate(const SS *s,
                           DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
      ret+=get_CLASSFUNCTIONNAME_container(i)->evaluate(s, da);
    }
    return ret;
  }
  template <class SS>
    double template_evaluate_if_good(const SS *s,
                                 DerivativeAccumulator *da, double max) const {
    double ret=0;
    for (unsigned int i=0; i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
      double cur=get_CLASSFUNCTIONNAME_container(i)->evaluate_if_good(s, da, max);
      ret+=cur;
      max-=cur;
      if (max < 0) break;
    }
    return ret;
  }

  ParticlesTemp get_contained_particles() const;
  bool get_contents_changed() const {
    for (unsigned int i=0; i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
      if (get_CLASSFUNCTIONNAME_container(i)->get_contents_changed()) return true;
    }
    return false;
  }
  IMP_OBJECT(CLASSNAMEContainerSet);

  /** @name Methods to control the nested container

      This container merges a set of nested containers. To add
      or remove nested containers, use the methods below.
  */
  /**@{*/
  IMP_LIST_ACTION(public, CLASSNAMEContainer, CLASSNAMEContainers,
                  CLASSFUNCTIONNAME_container, CLASSFUNCTIONNAME_containers,
                  CLASSNAMEContainer*, CLASSNAMEContainers,
                  {
                    obj->set_was_used(true);
                  },{},
                  );
  /**@}*/

#ifndef IMP_DOXYGEN
  bool get_is_up_to_date() const {
    for (unsigned int i=0;
         i< get_number_of_CLASSFUNCTIONNAME_containers(); ++i) {
      if (!get_CLASSFUNCTIONNAME_container(i)->get_is_up_to_date()) return false;
    }
    return true;
  }
  PLURALINDEXTYPE get_indexes() const;
#endif
};


IMPCONTAINER_END_NAMESPACE

#endif  /* IMPCONTAINER_HEADERNAME_CONTAINER_SET_H */

/**
 *  \file GroupnameContainerSet.h
 *  \brief Store a set of GroupnameContainers
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2010 IMP Inventors. All rights reserved.
 */

#ifndef IMPCONTAINER_GROUPNAME_CONTAINER_SET_H
#define IMPCONTAINER_GROUPNAME_CONTAINER_SET_H

#include "container_config.h"
#include <IMP/GroupnameContainer.h>
#include <IMP/container_macros.h>
#include <IMP/internal/container_helpers.h>

IMPCONTAINER_BEGIN_NAMESPACE

//! Stores a set of GroupnameContainers
/** The input sets must be disjoint. This can change if there is
    demand for it.

    \usesconstraint
*/
class IMPCONTAINEREXPORT GroupnameContainerSet
  : public GroupnameContainer
{
  IMP_CONTAINER_DEPENDENCIES(GroupnameContainerSet,
                             {
                               ret.insert(ret.end(),
                                          back_->groupname_containers_begin(),
                                          back_->groupname_containers_end());
                             });
  // to not have added and removed
  GroupnameContainerSet();
  GroupnameContainerPair get_added_and_removed_containers() const {
    GroupnameContainerSet *added= create_untracked_container();
    GroupnameContainerSet *removed=create_untracked_container();
    for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
      added->add_groupname_container(get_groupname_container(i)
                                     ->get_added_container());
      removed->add_groupname_container(get_groupname_container(i)
                                       ->get_removed_container());
    }
    return GroupnameContainerPair(added, removed);
  }
 public:
  //! Construct and empty set
  GroupnameContainerSet(Model *m,
                        std::string name="GroupnameContainerSet %1%");

  GroupnameContainerSet(const GroupnameContainersTemp &pc,
                        std::string name="GroupnameContainerSet %1%");

  bool get_contains_classname(PassValue) const;
  unsigned int get_number_of_classnames() const;
  Value get_classname(unsigned int i) const;
  void apply(const GroupnameModifier *sm);
  void apply(const GroupnameModifier *sm,
             DerivativeAccumulator &da);
  double evaluate(const GroupnameScore *s,
                  DerivativeAccumulator *da) const;
  double evaluate_change(const GroupnameScore *s,
                         DerivativeAccumulator *da) const;
  double evaluate_prechange(const GroupnameScore *s,
                            DerivativeAccumulator *da) const;
 template <class SM>
  void template_apply(const SM *sm,
                      DerivativeAccumulator &da) {
   for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
     get_groupname_container(i)->apply(sm, da);
   }
 }
  template <class SM>
  void template_apply(const SM *sm) {
    for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
      get_groupname_container(i)->apply(sm);
    }
  }
  template <class SS>
  double template_evaluate(const SS *s,
                           DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
      ret+=get_groupname_container(i)->evaluate(s, da);
    }
    return ret;
  }
  template <class SS>
  double template_evaluate_change(const SS *s,
                                  DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
      ret+=get_groupname_container(i)->evaluate_change(s, da);
    }
    return ret;
 }
  template <class SS>
  double template_evaluate_prechange(const SS *s,
                                     DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< get_number_of_groupname_containers(); ++i) {
      ret+=get_groupname_container(i)->evaluate_prechange(s, da);
    }
    return ret;
  }

  ParticlesTemp get_contained_particles() const;
  bool get_contained_particles_changed() const;
  IMP_OBJECT(GroupnameContainerSet);

  /** @name Methods to control the nested container

      This container merges a set of nested containers. To add
      or remove nested containers, use the methods below.
  */
  /**@{*/
  IMP_LIST(public, GroupnameContainer, groupname_container,
           GroupnameContainer*, GroupnameContainers);
  /**@}*/

  static GroupnameContainerSet *create_untracked_container() {
    GroupnameContainerSet *lsc = new GroupnameContainerSet();
    return lsc;
  }
#ifndef IMP_DOXYGEN
  bool get_is_up_to_date() const {
    for (unsigned int i=0;
         i< get_number_of_groupname_containers(); ++i) {
      if (!get_groupname_container(i)->get_is_up_to_date()) return false;
    }
    return true;
  }
#endif
};


IMPCONTAINER_END_NAMESPACE

#endif  /* IMPCONTAINER_GROUPNAME_CONTAINER_SET_H */

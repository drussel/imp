/**
 *  \file CLASSNAMEModifier.h    \brief A Modifier on PLURALVARIABLETYPE
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMP_HEADERNAME_MODIFIER_H
#define IMP_HEADERNAME_MODIFIER_H

#include "kernel_config.h"
#include "DerivativeAccumulator.h"
#include "base_types.h"
#include "ParticleTuple.h"

IMP_BEGIN_NAMESPACE
// to keep swig happy
class Particle;

//! A base class for modifiers of PLURALVARIABLETYPE
/** The primary function of such a class is to change
    the passed particles.

    \see IMP::CLASSNAMEFunctor

    Implementors should see IMP_HEADERNAME_MODIFIER(). Also see
    CLASSNAMEDerivativeModifier.
 */
class IMPEXPORT CLASSNAMEModifier : public Object
{
public:
  typedef VARIABLETYPE Argument;
  CLASSNAMEModifier(std::string name="CLASSNAMEModifier %1%");

  /** Apply the function to a single value*/
  virtual void apply(ARGUMENTTYPE) const =0;

  /** Apply the function to a collection of PLURALVARIABLETYPE */
  virtual void apply(const PLURALVARIABLETYPE &o) const {
    for (unsigned int i=0; i < o.size(); ++i) {
      apply(o[i]);
    }
  }

 /** Apply the function to a single value*/
  virtual void apply(Model *m, PASSINDEXTYPE v) const {
    apply(get_particle(m, v));
  }

  /** Apply the function to a collection of PLURALVARIABLETYPE */
  virtual void apply(Model *m, const PLURALINDEXTYPE &o) const {
    for (unsigned int i=0; i < o.size(); ++i) {
      apply(m, o[i]);
    }
  }

  /** Get the set of particles read when applied to the arguments.*/
  virtual ParticlesTemp
    get_input_particles(Particle* p) const =0;
  /** Get the set of particles modifier when applied to the arguments.*/
  virtual ParticlesTemp
    get_output_particles(Particle *p) const =0;
  /** Get the set of input containers when this modifier is applied to
      the arguments. */
  virtual ContainersTemp
    get_input_containers(Particle *p) const =0;
  /** Get the set of output containers when this modifier is applied to
      the arguments. */
  virtual ContainersTemp
    get_output_containers(Particle *p) const =0;
};

IMP_OUTPUT_OPERATOR(CLASSNAMEModifier);


IMP_OBJECTS(CLASSNAMEModifier,CLASSNAMEModifiers);

//! Create a functor which can be used with build in C++ and python commands
/** For example, you can do
    \code
    std::for_each(particles.begin(), particles.end(),
                  IMP::SingletonFunctor(new IMP::core::Transform(tr)));
    IMP::for_each(particles,
                  IMP::SingletonFunctor(new IMP::core::Transform(tr)));
    \endcode
    in C++ (the second can be used with when \c particles is a temporary
    value) or
    \verbatim
    map(SingletonFunctor(Transform(tr)), particles)
    \endverbatim
    in python.

    \see IMP::CLASSNAMEModifier
 */
class CLASSNAMEFunctor {
  Pointer<const CLASSNAMEModifier> f_;
public:
  //! Store the CLASSNAMEModifier and the optional DerivativeAccumulator
  CLASSNAMEFunctor(const CLASSNAMEModifier *f): f_(f){}
  void operator()( VARIABLETYPE p) const {
    f_->apply(p);
  }
};



IMP_END_NAMESPACE

#endif  /* IMP_HEADERNAME_MODIFIER_H */

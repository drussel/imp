/**
 *  \file internal/FUNCTIONNAME_helpers.h
 *  \brief A container for CLASSNAMEs.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_HEADERNAME_HELPERS_H
#define IMPCORE_INTERNAL_HEADERNAME_HELPERS_H

#include "../core_config.h"
#include <IMP/CLASSNAMEContainer.h>
#include <IMP/CLASSNAMEModifier.h>
#include <IMP/CLASSNAMEScore.h>
#include <IMP/internal/container_helpers.h>
#include <IMP/compatibility/set.h>
#include <algorithm>

IMP_BEGIN_INTERNAL_NAMESPACE
template <class Score>
struct SimpleRestraintParentTraits<Score,
       typename boost::enable_if<
         boost::is_base_of<CLASSNAMEScore, Score> >::type> {
  typedef IMP::CLASSNAMEScoreRestraint SimpleRestraint;
  typedef IMP::CLASSNAMEsScoreRestraint SimplesRestraint;
};
IMP_END_INTERNAL_NAMESPACE

IMPCORE_BEGIN_INTERNAL_NAMESPACE

class IMPCOREEXPORT ListLikeCLASSNAMEContainer: public CLASSNAMEContainer {
private:
  PLURALINDEXTYPE data_;
protected:
  ListLikeCLASSNAMEContainer *get_added() const {
    if (get_has_added_and_removed_containers()) {
      return dynamic_cast<ListLikeCLASSNAMEContainer*>
        (get_added_container());
    } else {
      return NULL;
    }
  }
  ListLikeCLASSNAMEContainer *get_removed() const {
    return dynamic_cast<ListLikeCLASSNAMEContainer*>
      (get_removed_container());
  }
  ListLikeCLASSNAMEContainer(){}
  void update_list(PLURALINDEXTYPE &cur) {
    if (get_added()) {
      std::sort(cur.begin(), cur.end());
      //std::sort(data_.begin(), data_.end());
      PLURALINDEXTYPE added, removed;
      std::set_difference(cur.begin(), cur.end(),
                          data_.begin(), data_.end(),
                          std::back_inserter(added));
      std::set_difference(data_.begin(), data_.end(),
                          cur.begin(), cur.end(),
                          std::back_inserter(removed));
      get_added()->data_=added;
      get_removed()->data_=removed;
    }
    std::sort(cur.begin(), cur.end());
    swap(data_, cur);
  }
  void add_to_list(PLURALINDEXTYPE &cur) {
    std::sort(cur.begin(), cur.end());
    PLURALINDEXTYPE newlist;
    std::set_union(cur.begin(), cur.end(),
                        data_.begin(), data_.end(),
                        std::back_inserter(newlist));
    if (get_added()) {
      PLURALINDEXTYPE added;
      std::set_intersection(newlist.begin(), newlist.end(),
                            cur.begin(), cur.end(),
                            std::back_inserter(added));
      ListLikeCLASSNAMEContainer* ac=get_added();
      ac->data_.insert(ac->data_.end(), added.begin(), added.end());
    }
    swap(data_, newlist);
  }

  void remove_from_list(PLURALINDEXTYPE &cur) {
    std::sort(cur.begin(), cur.end());
    PLURALINDEXTYPE newlist;
    std::set_difference(data_.begin(), data_.end(),
                        cur.begin(), cur.end(),
                        std::back_inserter(newlist));
    swap(data_, newlist);
    if (get_has_added_and_removed_containers()) {
      ListLikeCLASSNAMEContainer* ac=get_removed();
      ac->data_.insert(ac->data_.end(), cur.begin(), cur.end());
    }
  }
  template <class F>
    struct AccIf {
    F f_;
    mutable PLURALINDEXTYPE rem_;
    AccIf(F f, PLURALINDEXTYPE &rem): f_(f), rem_(rem){}
    bool operator()(PASSINDEXTYPE cur) const {
      if (f_(cur)) {
        rem_.push_back(cur);
        return true;
      }
      return false;
    }
  };
  template <class F>
  void remove_from_list_if(F f) {
    if (get_has_added_and_removed_containers()) {
      PLURALINDEXTYPE removed;
      data_.erase(std::remove_if(data_.begin(),
                                data_.end(), AccIf<F>(f, removed)),
                 data_.end());
      ListLikeCLASSNAMEContainer* ac=get_removed();
      ac->data_.insert(ac->data_.end(), removed.begin(), removed.end());
    } else {
      data_.erase(std::remove_if(data_.begin(), data_.end(), f), data_.end());
    }
  }
  void add_to_list(PASSINDEXTYPE cur) {
    if (!std::binary_search(data_.begin(), data_.end(), cur)) {
      data_.insert(std::lower_bound(data_.begin(), data_.end(),
                                   cur), cur);
      if (get_added()) {
        ListLikeCLASSNAMEContainer* ac=get_added();
        ac->data_.push_back(cur);
      }
    }
  }
  ListLikeCLASSNAMEContainer(Model *m, std::string name):
    CLASSNAMEContainer(m,name){
  }
 public:
  template <class SM>
  void template_apply(const SM *sm,
                      DerivativeAccumulator &da) {
    sm->apply(get_model(), data_, da);
 }
  template <class SM>
  void template_apply(const SM *sm) {
    sm->apply(get_model(), data_);
  }
  template <class SS>
  double template_evaluate(const SS *s,
                           DerivativeAccumulator *da) const {
    return s->evaluate(get_model(), data_, da);
  }
  template <class SS>
  double template_evaluate_if_good(const SS *s,
                                   DerivativeAccumulator *da,
                                   double max) const {
    return s->evaluate_if_good(get_model(), data_, da, max);
  }
  void apply(const CLASSNAMEModifier *sm) {
    sm->apply(get_model(), data_);
  }
  void apply(const CLASSNAMEDerivativeModifier *sm,
             DerivativeAccumulator &da) {
    sm->apply(get_model(), data_, da);
  }
  double evaluate(const CLASSNAMEScore *s,
                  DerivativeAccumulator *da) const {
    return s->evaluate(get_model(), data_, da);
  }
  double evaluate_if_good(const CLASSNAMEScore *s,
                          DerivativeAccumulator *da,
                          double max) const {
    return s->evaluate_if_good(get_model(), data_, da, max);
  }
  ParticlesTemp get_contained_particles() const {
    return IMP::internal::flatten(IMP::internal::get_particle(get_model(),
                                                              data_));
  }
  CLASSNAMEContainerPair get_added_and_removed_containers() const;
  bool get_contains_FUNCTIONNAME(ARGUMENTTYPE p) const {
    INDEXTYPE it= IMP::internal::get_index(p);
    return std::binary_search(data_.begin(), data_.end(), it);
  }
  unsigned int get_number_of_FUNCTIONNAMEs() const {
    return data_.size();
  }
  VARIABLETYPE get_FUNCTIONNAME(unsigned int i) const {
    return IMP::internal::get_particle(get_model(), data_[i]);
  }
  IMP_OBJECT(ListLikeCLASSNAMEContainer);
  void do_after_evaluate() {
    if (get_added()) {
      get_added()->data_.clear();
      get_removed()->data_.clear();
    }
  }
  void do_before_evaluate() {
  }
  bool get_is_up_to_date() const {return true;}

  PLURALINDEXTYPE get_indexes() const {
    return data_;
  }
  bool get_provides_access() const {return true;}
  const PLURALINDEXTYPE& get_access() const {
    return data_;
  }
};


IMPCORE_END_INTERNAL_NAMESPACE

#define IMP_LISTLIKE_HEADERNAME_CONTAINER(Name)               \
  IMP_OBJECT(Name)


#endif  /* IMPCORE_INTERNAL_HEADERNAME_HELPERS_H */

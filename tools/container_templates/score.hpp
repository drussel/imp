/**
 *  \file CLASSNAMEScore.h    \brief Define CLASSNAMEScore.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2010 IMP Inventors. All rights reserved.
 */

#ifndef IMP_HEADERNAME_SCORE_H
#define IMP_HEADERNAME_SCORE_H

#include "kernel_config.h"
#include "base_types.h"
#include "ParticleTuple.h"
#include "DerivativeAccumulator.h"

IMP_BEGIN_NAMESPACE

//! Abstract score function
/** CLASSNAMEScores will evaluate the score and derivatives
    for the passed particles. Use in conjunction with various
    restraints such as IMP::core::CLASSNAMEsRestraint or
    IMP::core::CLASSNAMERestraint.

    Implementers should check out IMP_HEADERNAME_SCORE().
*/
class IMPEXPORT CLASSNAMEScore : public Object
{
 public:
  typedef VARIABLETYPE Argument;
  CLASSNAMEScore(std::string name="CLASSNAMEScore %1%");
  //! Compute the score and the derivative if needed.
  virtual double evaluate(ARGUMENTTYPE vt,
                          DerivativeAccumulator *da) const = 0;

  /** Implementations
      for these are provided by the IMP_HEADERNAME_SCORE()
      macro.
  */
  virtual double evaluate(const PLURALVARIABLETYPE &o,
                          DerivativeAccumulator *da) const = 0;

  /** \name Incremental evaluation
      Compute how much the score has changed since the last evaluate
      (and writing derivatives if they have changed). Implementations
      for these are provided by the IMP_HEADERNAME_SCORE() macro.
      @{
  */
  virtual double evaluate_change(ARGUMENTTYPE vt,
                                 DerivativeAccumulator *da) const = 0;

  virtual double evaluate_change(const PLURALVARIABLETYPE &o,
                                 DerivativeAccumulator *da) const = 0;
  virtual double evaluate_prechange(ARGUMENTTYPE vt,
                                    DerivativeAccumulator *da) const = 0;
  virtual double evaluate_prechange(const PLURALVARIABLETYPE &o,
                                    DerivativeAccumulator *da) const = 0;
  //! Return true if the score for vt might have changed.
  virtual bool get_is_changed(ARGUMENTTYPE vt) const =0;
  /** @} */

  /** Get the set of particles read when applied to the arguments. */
  virtual ParticlesTemp
    get_input_particles(Particle *p) const =0;

  /** Get the set of input containers when this modifier is applied to
      the arguments. */
  virtual ContainersTemp
    get_input_containers(Particle *p) const =0;

  IMP_REF_COUNTED_DESTRUCTOR(CLASSNAMEScore);
};

IMP_OBJECTS(CLASSNAMEScore,CLASSNAMEScores);

IMP_END_NAMESPACE

#endif  /* IMP_HEADERNAME_SCORE_H */

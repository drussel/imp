/**
 *  \file ListClassnameContainer.cpp   \brief A list of PLURALVARIABLETYPE.
 *
 *  This file is generated by a script (internal/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2013 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/kernel/internal/InternalListClassnameContainer.h"
#include "IMP/kernel/ClassnameModifier.h"
#include <IMP/base/check_macros.h>
#include <algorithm>


IMPKERNEL_BEGIN_INTERNAL_NAMESPACE

InternalListClassnameContainer
::InternalListClassnameContainer(Model *m, std::string name):
  P(m, name){
}


InternalListClassnameContainer
::InternalListClassnameContainer(Model *m, const char *name):
  P(m, name){
}
void InternalListClassnameContainer::add(PASSINDEXTYPE vt) {
  get_model()->clear_caches();
  PLURALINDEXTYPE cur;
  swap(cur);
  cur.push_back(vt);
  swap(cur);
}
void InternalListClassnameContainer
::add(const PLURALINDEXTYPE &c) {
  if (c.empty()) return;
  get_model()->clear_caches();
  PLURALINDEXTYPE cur;
  swap(cur);
  cur+=c;
  swap(cur);
}
void InternalListClassnameContainer::set(PLURALINDEXTYPE cp) {
  get_model()->clear_caches();
  swap(cp);
}
void InternalListClassnameContainer::clear() {
  get_model()->clear_caches();
  PLURALINDEXTYPE t;
  swap(t);
}
void InternalListClassnameContainer::remove(PASSINDEXTYPE vt) {
  get_model()->clear_caches();
  PLURALINDEXTYPE t;
  swap(t);
  t.erase(std::remove(t.begin(), t.end(), vt), t.end());
  swap(t);
}
void InternalListClassnameContainer::do_show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << get_access()
      << " Classnames." << std::endl;
}


ParticleIndexes
InternalListClassnameContainer::get_all_possible_indexes() const {
  return IMP::kernel::internal::flatten(get_indexes());
}

PLURALINDEXTYPE
InternalListClassnameContainer::get_range_indexes() const {
  return get_indexes();
}

void InternalListClassnameContainer::do_before_evaluate() {
}


ParticlesTemp
InternalListClassnameContainer::get_input_particles() const {
  return ParticlesTemp();
}

ContainersTemp
InternalListClassnameContainer::get_input_containers() const {
  return ContainersTemp();
}

IMPKERNEL_END_INTERNAL_NAMESPACE

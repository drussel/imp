# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED %(pkgname)s_LIBRARIES)
message(STATUS "Checking for %(pkgname)s")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(%(pkgname)s_PKGCONF %(pkgname)s)

# Include dir
find_path(%(pkgname)s_INCLUDE_DIR
  NAMES %(headers)s
  PATHS ${%(pkgname)s_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib %(libraries)s)
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${%(pkgname)s_PKGCONF_LIBRARY_DIRS}
)
set(%(pkgname)s_LIBRARY ${%(pkgname)s_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(%(pkgname)s_PROCESS_INCLUDES %(pkgname)s_INCLUDE_DIR)
set(%(pkgname)s_PROCESS_LIBS %(pkgname)s_LIBRARY)
libfind_process(%(pkgname)s)

if ("${%(pkgname)s_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${%(pkgname)s_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "%(pkgname)s not found")
  %(on_failure)s
else()
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_LIBRARIES "${%(pkgname)s_LIBRARY}")
  set(body "#include <%(headers)s>
int main(int,char*[]) {
  %(body)s
  return 0;
}")
  check_cxx_source_compiles("${body}"
 %(pkgname)s_COMPILES)
  if ("%(pkgname)s_COMPILES" MATCHES "1")
    message(STATUS "%(pkgname)s found " ${%(pkgname)s_INCLUDE_DIR} " " ${%(pkgname)s_LIBRARY})
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/%(pkgname)s" "ok=True")
    #set(%(PKGNAME)s_LINK_PATH ${%(pkgname)s_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
    set(%(PKGNAME)s_INCLUDE_PATH ${%(pkgname)s_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    set(%(PKGNAME)s_LIBRARIES ${%(pkgname)s_LIBRARY} CACHE INTERNAL "" FORCE)
  else()
    %(on_failure)s
  endif()
endif()

else()
message(STATUS "%(pkgname)s already setup")
%(on_setup)s
endif(NOT DEFINED %(pkgname)s_LIBRARIES)
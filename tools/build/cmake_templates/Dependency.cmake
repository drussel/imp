# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED %(pkgname)s_LIBRARIES)
message(STATUS "Checking for %(pkgname)s")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(%(pkgname)s_PKGCONF %(pkgname)s)

# Include dir
find_path(%(pkgname)s_INCLUDE_DIR
  NAMES %(headers)s
  PATHS ${%(pkgname)s_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
find_library(%(pkgname)s_LIBRARY
  NAMES %(libraries)s
  PATHS ${%(pkgname)s_PKGCONF_LIBRARY_DIRS}
)

# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(%(pkgname)s_PROCESS_INCLUDES %(pkgname)s_INCLUDE_DIR)
set(%(pkgname)s_PROCESS_LIBS %(pkgname)s_LIBRARY)
libfind_process(%(pkgname)s)

if (${%(pkgname)s_LIBRARY} MATCHES "%(pkgname)s_LIBRARY-NOTFOUND"
    OR ${%(pkgname)s_INCLUDE_DIR} MATCHES "%(pkgname)s_INCLUDE_DIR-NOTFOUND")
  message(STATUS "%(pkgname)s not found")
  %(on_failure)s
else()
  message(STATUS "%(pkgname)s found " ${%(pkgname)s_INCLUDE_DIR} " " ${%(pkgname)s_LIBRARY})
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/%(pkgname)s" "ok=True")
  #set(%(PKGNAME)s_LINK_PATH ${%(pkgname)s_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
  set(%(PKGNAME)s_INCLUDE_PATH ${%(pkgname)s_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
  set(%(PKGNAME)s_LIBRARIES ${%(pkgname)s_LIBRARY} CACHE INTERNAL "" FORCE)
endif()

else()
message(STATUS "%(pkgname)s already setup")
%(on_setup)s
endif(NOT DEFINED %(pkgname)s_LIBRARIES)
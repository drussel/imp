Import('env')
import scons_tools.examples

env= env.IMPSystem(version='nightly-1/2/2012',
                   authors=["Jeremy Phillips"],
                   brief="Compute a structure for the Nup84 complex.",
                   overview="""The nuclear pore complex (NPC) is a multiprotein assembly that serves as the sole mediator
of nucleocytoplasmic exchange in eukaryotic cells. Here, we use an integrative approach to determine
the structure of an essential component of the yeast NPC, the ~600 kDa heptameric Nup84 complex. The configuration of the subunit structures was determined by satisfaction of
spatial restraints derived from a diverse set of negative stain EM and protein domain mapping data.
Phenotypic data was mapped onto the complex, allowing us to find regions that stabilize the NPC's
interaction with the NE membrane and connect the complex to the rest of the NPC. We suggest a
scenario for the evolution of the Nup84 complex through a series of gene duplication and loss events.
This work demonstrates that integrative approaches based on low resolution data can generate
functionally informative structures at intermediate resolution.

\\section howtorun How to run

The commands given here are for running in the Nup84 directory of an \imp build (that is, \c imppy.sh is two levels up).

\\subsection input Input files
- \\c input_models.txt: a list of input models and their pdb
file names, plus a which subsequence of which protein each model
represents
- \\c input/structures: the 14 input model pdb files
- \\c nup84_class_average.jpg: contains a 2d class average of
particles from negative stain em located in input/em
- \\c coarse_restraints_set1,
\\c coarse_restraints_set2, \\c coarse_restraints_set3, \\c refined_restraints
located in \\c input/restraints are the restraint data input files.

\\subsection generating Generating models

The following steps generate one model. They should be repeated many times to
generate an ensemble of models. When %1% occurs in an argument, it should be
replaced by a number or something similar to differentiate the various runs.

First, generate a coarse structural solution
\\command{../../tools/imppy.sh python coarse_stage1.py input_models.txt input/restraints coarse_structures/%1%.pdb coarse_structures/%1%_info.txt}

Second, refine the model
\\command{../../tools/imppy.sh python refine_stage2.py input_models.txt
input/restraints coarse_structures/%1%.pdb coarse_structures/%1%_info.pdb refined_structures/%1%.pdb refined_structures/%1%_info.txt}

Once you have set of refined models, generate em2d scores for all of them
\\command{../../tools/imppy.sh python score_em2d.py nup84_class_average.jpg refined_structures refined_structures_em2d_scores.txt}

Next, filter out all except the top 10% of the structures based  on the em2d scores
\\command{../../tools/imppy.sh python filter_stage3.py refined_structures/ filtered_structures/  refined_structures_em2d_scores.txt  10}


Next, proceed with the final refinement of each of the filtered structures
\\command{../../tools/imppy.sh  python refine_stage4.py input_models.txt input/restraints nup84_class_average.jpg filtered_structures/%1%.pdb final_structures/%1%.pdb final_structures/%1%_info.txt}

\\subsection analys Analysis

Finally, generate 7 localization density maps from the final set of
structures (one per protein). Any of the \c info files from the last
step will do.
\\command{../../tools/imppy.sh python generate_dmap.py final_structures/ final_structures/%1%_info.txt localization_maps/}


""",
                   license=env.IMPStandardLicense(),

                   publications=[env.IMPPublication(authors=["J. Fernandez-Martinez", "J. Phillips",
                                                             "M. Sekedat", "R. Diaz-Avalos",
                                                             "J. Velazquez-Muriel", "J. Franke",
                                                             "R. Williams", "D. Stokes", "B. Chait",
                                                             "A. Sali", "M. Rout"],
                                                    title="Structure-function Map for a Heptameric Component of the Nuclear Pore Complex",
                                                    journal="submitted",
                                                    year=2011)],
                   required_modules=['core', 'atom', 'em2d', 'em'],
                   last_imp_version="""None""",
                   # this is true if the scripts can be run incompletely as test cases
                   # eg if it works to do "sample_0.py 1 1000" and then "analyze_0.py"
                   # without doing all of the sampling required. This can be implementedf
                   # either by providing intermediate data or by only analyzing the data
                   # that happens to be there
                   testable=False, parallelizable=True)

from modeller import *
from modeller.automodel import *
from modeller.scripts import complete_pdb
import IMP.em
import IMP.multifit

env = environ()
env.io.atom_files_directory = ['.', 'data/templates']
a = automodel(env, alnfile='groel-1iokA.ali',
                            knowns='1iok', sequence='P0A6F5',
                            assess_methods=(assess.DOPE))
a.starting_model = 1
a.ending_model = 10
a.make()

# Get a list of all successfully built models from a.outputs
ok_models = filter(lambda x: x['failure'] is None, a.outputs)

norm_dope_scores=[]
fitting_scores=[]

# score models by normalized dope
for ok_model in ok_models:
    print ok_model['name']
    # Read a model previously generated by Modeller's automodel class
    mdl = complete_pdb(env, ok_model['name'])
    norm_dope_scores.append(mdl.assess_normalized_dope())

# score models by em
dmap=IMP.em.read_map("groel_subunit_8.mrc",IMP.em.MRCReaderWriter())
dmap.get_header_writable().set_resolution(11.5)
imp_mdl=IMP.Model()
rb_refiner=IMP.core.LeavesRefiner(IMP.atom.Hierarchy.get_traits())
for ok_model in ok_models:
    print "====fitting model",ok_model['name']
    #load the template
    mh=IMP.atom.read_pdb(ok_model['name'],imp_mdl)
    IMP.atom.add_radii(mh)
    rb=IMP.atom.setup_as_rigid_body(mh)
    sols=IMP.multifit.pca_based_rigid_fitting(rb,rb_refiner,dmap,0.02)
    #refine the top fit
    IMP.core.transform(rb,sols.get_transformation(0))
    refined_sols = IMP.em.local_rigid_fitting(
        rb,rb_refiner,
        IMP.core.XYZR.get_default_radius_key(),
        IMP.atom.Mass.get_mass_key(),dmap,None,1,1)
    #write the fitted model
    IMP.core.transform(rb,refined_sols.get_transformation(0))
    IMP.atom.write_pdb(IMP.atom.Hierarchy(rb),ok_model['name']+".fitted.pdb")
    IMP.core.transform(rb,refined_sols.get_transformation(0).get_inverse())
    IMP.core.transform(rb,sols.get_transformation(0).get_inverse())
    fitting_scores.append(1.-refined_sols.get_score(0))

#print model names and their scores into a output file
output=open("model_building.scores.output","w")
output.write('{0:<20} {1:<20} {2:<}\n'.format('name','norm_dope','cc'))
for i, ok_model in enumerate(ok_models):
    output.write('{0:<20} {1:<20} {2:<}\n'.format(ok_model['name'],str(norm_dope_scores[i]),str(fitting_scores[i])))
output.close()

Import('env')
import scons_tools.examples

env= env.IMPSystem(version='nightly-24/3/2012',
                   authors=["Keren Lasker"],
                   brief="Compute a structure for the human RNAPII complex.",
                   overview="""
\\note Currently, generating the structure requires \\c IMP.multifit2. It can be obtained from the author (Keren). We are working on moving the needed functionallity into \imp propper. Your patience is appreciated.

\\section howtorun How to run

All command here are given as if run from the \c biological_systems/rnapii directory in the build directory

\\subsection input Input

 - \\c rnapii.subunit.list.txt: The subunits list. Each line describes a subunit and contains:
\\verbatim
name pdb_file [global/local]_fit
\\endverbatim

 - \\c data/emd_1283.mrc: a mrc file of the assembly

 - \\c data/*.pdb: pdb files of the subunits, derived from the yeast homologues.

 - \\c rnapii.subunit.list.txt: the list of subunits and corresponding pdb files

\\subsection params Generating the parameters file

\command{../../tools/imppy.sh python ../../modules/multifit2/bin/generate_assembly_input.py -i rnapii.asmb.input -- rnapii data/rnapii.subunit.list.txt 30 data/emd_1283.mrc 20 2.5 0.2 60 60 60}

This creates the file \c rnapii.asmb.input which can be used to run multifit.

\\subsection runmf Running multifit
First, create all the molecular surfaces to be used when computing excluded volumes.
\command{../../tools/imppy.sh python ../../modules/multifit2/bin/create_all_surfaces.py rnapii.asmb.input}

Creates \c X.ms for each input pdb.

Second, generate the assembly anchor graph:
\command{../../tools/imppy.sh python ../../modules/multifit2/bin/generate_fine_assembly_anchor_graph.py rnapii.asmb.input}

This creates:
- \\c rnapii.asmb.anchors.pdb  : The graph in pdb format
- \\c rnapii.asmb.anchors.txt  : The graph in txt format
- \\c rnapii.asmb.anchors.cmm  : The graph in cmm format

Then generate the fits
\\command{../../tools/imppy.sh python $IMP/modules/multifit2/bin/run_fitting_fft.py -p rnapii.multifit.param  rnapii.asmb.data -c 6 -z -n 10000}
The fits are put in files named \\c X_fitting.txt.

Then generate the indexes
\\command{../../tools/imppy.sh python $IMP/modules/multifit2/bin/generate_indexes_from_fitting_solutions.py rnapii rnapii.asmb.input 1000 -f data/subunit.indexes}
The indexes are put into files name \\c X.fit.indexes.txt.

Next we create the automated proteomics file
\\command{../../tools/imppy.sh python ../../modules/multifit2/bin/create_auto_proteomics_file.py rnapii.asmb.input rnapii_em_coarse_anchors_FINE.txt rnapii.ev_proteomics.input}

This produces the file \c rnapii.ev_proteomics.input for assembling the components using only excluded volume.

Finally we create the assembly fitting structures.
\\command{../../tools/imppy.sh python $IMP/modules/multifit2/bin/align_proteomics_em_atomic_plan.py -m 30 rnapii.asmb.input rnapii.ev_proteomics.input rnapii.indexes.mapping.input rnapii.alignment.param rnapii.docking.param rnapii.combinations.output rnapii.scores ignored}

If you want to use proteomics restraints taken from \external{http://thebiogrid.org, BioGrid}, you can modify the \c rnapii.ev_proteomics.input file, or use the provided \\c rnapii.biogrid_proteomics.input instead.

The output files
- \c rnapii.combinations.output gives the indexes into X_fitting.txt of each solution.
- \c rnapii.scores gives the fitting score of each solution.

\subsection results Analyzing and displaying the results

To convert the output files to pdbs do
\command{../../tools/imppy.sh python ../../modules/multifit2/bin/write_ensemble_models.py 1z5s.asmb.input combinations.output asmb.mdl}

And to print more detailed information about the various excluded volume,
docking and proteomics scores run:
\command{../../tools/imppy.sh ../../modules/multifit2/bin/score_ensemble_modles.py rnapii.asmb.input rnapii.proteomics.input rnapii.indexes.mapping.input rnapii.alignment.param rnapii.docking.param rnapii.combinations.output rnapii_detailed.scores}

                   """,
                   license=env.IMPStandardLicense(),
                   # jeremy, update the publication(s)
                   publications=[env.IMPPublication(authors=["Keren Lasker", "Daniel Russel", "Jeremy Phillips", "Haim Wolfson", "Andrej Sali"],
                                                    title="Determining architectures of macromolecular assemblies by aligning interaction networks to electon microscopy density maps",
                                                    journal="submitted",
                                                    year=2011)],
                   required_modules=['core', 'atom', 'rmf', 'multifit'],
                   last_imp_version="""None""",
                   testable=False, parallelizable=False)

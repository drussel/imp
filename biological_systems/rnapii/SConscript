Import('env')
import scons_tools.examples

env= env.IMPSystem(version="SVN",
                   authors=["Keren Lasker"],
                   brief="Compute a structure for the humap RNAPII complex.",
                   overview="""Let's find a paragraph.
                   """,
                   license=env.IMPStandardLicense(),
                   # jeremy, update the publication(s)
                   publications=[env.IMPPublication(authors=["Keren Lasker", "Daniel Russel", "Jeremy Phillips", "Haim Wolfson", "Andrej Sali"],
                                                    title="Determining architectures of macromolecular assemblies by aligning interaction networks to electon microscopy density maps",
                                                    journal="submitted",
                                                    year=2011)],
                   required_modules=['core', 'atom', 'rmf', 'multifit'],
                   last_imp_version="""None""",
                   # this is true if the scripts can be run incompletely as test cases
                   # eg if it works to do "sample_0.py 1 1000" and then "analyze_0.py"
                   # without doing all of the sampling required. This can be implementedf
                   # either by providing intermediate data or by only analyzing the data
                   # that happens to be there
                   testable=False, parallelizable=False)
#if env:
#    files= ["setup",
#            "sample_0",
#            "analyze_0"]
#    scons_tools.examples.add_python_example(env, "setup.py",
#                                            "General setup code common to sampling and analysis.")
#    scons_tools.examples.add_python_example(env, "sample_0.py",
#                                            "Sampling using MCCG and random starting points.")
#    scons_tools.examples.add_python_example(env, "analyze_0.py",
#                                            "Cluster into 10 solutions.")
#    scons_tools.examples.add_page(env, "Example system code",
#                                  [x+".py" for x in files])

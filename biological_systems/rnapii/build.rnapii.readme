==========================================
===       Build the RNAPII complex    ====
==========================================

=====0. user preparation
The user needs to prepare:
I. a file with the subunits list. Each line describes a subunit and contains:
name pdb_file [global/local]_fit
Make sure that the subunit names are unique.
II. a mrc file of the assembly

The input subunit list file used for this example is rnapii.subunit.list.txt
RPB1   data/1y1v_A.pdb  1
RPB2   data/1y1v_B.pdb  1
RPB3   data/1y1v_C.pdb  1
RPB4_7 data/1y1v_DG.pdb 1
RPB5   data/1y1v_E.pdb 1
RPB6   data/1y1v_F.pdb 1
RPB8   data/1y1v_H.pdb 1 
RPB9   data/1y1v_I.pdb 1 
RPB10  data/1y1v_J.pdb 1
RPB11_12 data/1y1v_KL.pdb 1

In this example all subunits are going to be sampled globally

=====1.generate the parameters file

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_assembly_input.py -i rnapii.asmb.input -- rnapii data/rnapii.subunit.list.txt 10 data/emd_1283.mrc 20 2.5 0.2 60 60 60 

=====2. Running MultiFit
The steps to execute:
==2.0. create all surfaces
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/create_all_surfaces.py rnapii.asmb.data

==2.1. generate the assembly anchor graph
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_assembly_anchor_graph.py rnapii.asmb.data rnapii.asmb.anchors

Files being generated:
rnapii.asmb.anchors.pdb  : The graph in pdb format
rnapii.asmb.anchors.txt  : The graph in txt format
rnapii.asmb.anchors.cmm  : The graph in cmm format

==2.2. generate the fits
To fit all subunits in parallel one can run (see $IMP/modules/multifit2/example for such examples).
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/run_fitting_fft.py -p rnapii.multifit.param  rnapii.asmb.data -c 6

FFT fitting for each of the proteins
the -c option means how many CPU will be used for the process

However, since the first two subunits are much larger than the rest, we first fit fit and assemble the first two subunits and then the rest:

We start by creating a parameter file just for the first two subunits
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_assembly_input.py -i RPB1.RPB2.asmb.input -- rnapii data/RPB1.RPB2.subunit.list.txt 10 data/emd_1283.mrc 20 2.5 0.2 60 60 60 

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/run_fitting_fft.py -p rnapii.multifit.param  RPB1.RPB2.asmb.data -c 2 -a 15

generate indexes
We now create fit indexes for the assembly
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_indexes_from_fitting_solutions.py RPB1_RPB2 RPB1_RPB2.asmb.input 10

Assemble only the first two subunits
==2.4 create a proteomics file
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/create_auto_proteomics_file.py 1z5s.asmb.input 1z5s.asmb.anchors.txt  1z5s.proteomics.input

[1z5s.asmb.anchors.txt was generated in step 2.2]

Files being generated:
1z5s.proteomics.input

==2.5. assemble fitting solutions

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/align_proteomics_em_atomic_plan.py -m 30 1z5s.asmb.input 1z5s.proteomics.input 1z5s.indexes.mapping.input 1z5s.alignment.param 1z5s.docking.param combinations.output scores.output

Now segment RPB1, RPB2 from the density and fit the rest of the subunits

Now assemble all of the subunits together


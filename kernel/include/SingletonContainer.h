/**
 *  \file SingletonContainer.h    \brief A container for particles.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_SINGLETON_CONTAINER_H
#define IMPCORE_SINGLETON_CONTAINER_H

#include "config.h"
#include "internal/IndexingIterator.h"
#include "internal/container_helpers.h"
#include "Particle.h"
#include "utility.h"
#include "VersionInfo.h"
#include "base_types.h"
#include "Pointer.h"
#include "VectorOfRefCounted.h"
#include "VersionInfo.h"
#include "SingletonModifier.h"
#include "SingletonScore.h"
#include "DerivativeAccumulator.h"

IMP_BEGIN_NAMESPACE

//! A shared container for particles
/** Stores a searchable shared collection of particles.
    \ingroup restraints

    Implementors should see IMP_SINGLETON_CONTAINER().
 */
class IMPEXPORT SingletonContainer : public Object
{
  struct Accessor: public NullDefault {
    typedef Accessor This;
    typedef Particle* result_type;
    typedef unsigned int argument_type;
    result_type operator()(argument_type i) const {
      return o_->get_particle(i);
    }
    Accessor(SingletonContainer *pc): o_(pc){}
    Accessor(): o_(NULL){}
    IMP_COMPARISONS_1(o_);
  private:
    // This should be ref counted, but swig memory management is broken
    SingletonContainer* o_;
  };

public:
  SingletonContainer(std::string name="SingletonContainer %1%");

  /** \note This function may be linear. Be aware of the complexity
      bounds of your particular container.
   */
  virtual bool get_contains_particle(Particle* p) const =0;
  //! return the number of particles in the container
  /** \note this isn't always constant time
   */
  virtual unsigned int get_number_of_particles() const =0;

  virtual Particle* get_particle(unsigned int i) const=0;

#ifdef IMP_DOXYGEN
  //! An iterator through the contents of the container
  class ParticleIterator;
#else
  typedef internal::IndexingIterator<Accessor> ParticleIterator;
#endif
  //! begin iterating through the particles
  ParticleIterator particles_begin() const {
    // Since I can't make the count mutable in Object
    return
      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
                        0);
  }
  //! iterate through the particles
  ParticleIterator particles_end() const {
    return
      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
                        get_number_of_particles());
    }

  //! Apply a SingletonModifier to the contents
  virtual void apply(const SingletonModifier *sm)=0;

  //! Apply a SingletonModifier to the contents
  virtual void apply(const SingletonModifier *sm, DerivativeAccumulator &da)=0;

  //! Avaluate a score on the contents
  virtual double evaluate(const SingletonScore *s,
                          DerivativeAccumulator *da) const=0;

  //! Get all the Particles from the container
  virtual ParticlesTemp get_particles() const=0;

  /** \brief The revision number of a container is incremented every time the
      contents change.

      Anything wishing to monitor a container can simply check if the revision
      number is different than the last one it saw.
  */
  virtual unsigned int get_revision() const =0;

  IMP_REF_COUNTED_DESTRUCTOR(SingletonContainer)
};

IMP_OUTPUT_OPERATOR(SingletonContainer);

//! A collection of containers
typedef VectorOfRefCounted<SingletonContainer*> SingletonContainers;

IMP_END_NAMESPACE

#endif  /* IMPCORE_SINGLETON_CONTAINER_H */

/*
 * \file config.h
 * \brief Provide macros to mark functions and classes as exported
 *        from a DLL/.so, and to set up namespaces
 *
 * When building the module, IMP_EXPORTS should be defined, and when
 * using the module externally, it should not be. Classes and functions
 * defined in the module's headers should then be marked with
 * IMPEXPORT if they are intended to be part of the API, or with
 * IMPLOCAL if they are not (the latter is the default).
 *
 * The Windows build environment requires applications to mark exports in
 * this way; we use the same markings to set the visibility of ELF symbols
 * if we have compiler support.
 *
 * All code in this module should live in the IMP namespace.
 * This is simply achieved by wrapping things with the
 * IMP_BEGIN_NAMESPACE and IMP_END_NAMESPACE macros.
 * There are similar macros for module code that is designed to be for
 * internal use only.
 *
 * This header is auto-generated by tools/imp-module.py; it should not be
 * edited manually.
 *
 * Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#ifndef IMP_CONFIG_H
#define IMP_CONFIG_H

#ifdef _MSC_VER
#ifdef IMP_EXPORTS
#define IMPEXPORT __declspec(dllexport)
#else
#define IMPEXPORT __declspec(dllimport)
#endif
#define IMPLOCAL
#else
#ifdef GCC_VISIBILITY
#define IMPEXPORT __attribute__ ((visibility("default")))
#define IMPLOCAL __attribute__ ((visibility("hidden")))
#else
#define IMPEXPORT
#define IMPLOCAL
#endif
#endif

#define IMP_BEGIN_NAMESPACE \
namespace IMP {\

#define IMP_END_NAMESPACE \
} /* namespace IMP */ \

#define IMP_BEGIN_INTERNAL_NAMESPACE \
IMP_BEGIN_NAMESPACE \
namespace internal {


#define IMP_END_INTERNAL_NAMESPACE \
} /* namespace internal */ \
IMP_END_NAMESPACE


#endif  /* IMP_CONFIG_H */

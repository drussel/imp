Import('env', 'get_sharedlib_environment')
import os.path

# Get an environment suitable for building a shared library:
env = get_sharedlib_environment(env, 'IMP_EXPORTS', cplusplus=True)
env.Prepend(CPPPATH=["#/build/include"])

# Auto-generated files:
def gen_file(target, source, env):
    infile = open(source[0].abspath, 'r')
    outfile = open(target[0].abspath, 'w')
    for line in infile:
        line = line.replace('@AUTOGEN@',
                            'Auto-generated from %s; do not edit.' \
                            % os.path.basename(source[0].path))
        line = line.replace('@IMP_DATA_DIRECTORY@', source[1].get_contents())
        outfile.write(line)
env.Append(BUILDERS={'GenFile': Builder(action=gen_file)})
directories = env.GenFile("directories.cpp",
                          ["directories.cpp.in",
                           env.Value('"%s/IMP"' % env.subst(env['datadir']))])

# Subdirectories:
internal_files = SConscript('internal/SConscript')

# Source files
files = ['base_types.cpp', 'Model.cpp', 'FailureHandler.cpp',
         'Particle.cpp', 'ScoreState.cpp', 'Object.cpp',
         'OptimizerState.cpp', 'log.cpp', 'Restraint.cpp', 'Optimizer.cpp',
         'random.cpp', 'Key.cpp', 'exception.cpp', 'Refiner.cpp',
         'UnaryFunction.cpp', 'PairScore.cpp',
         'SingletonScore.cpp', 'TripletScore.cpp',
         'SingletonModifier.cpp', 'PairModifier.cpp',
         'SingletonContainer.cpp', 'PairContainer.cpp', 'utility.cpp'
        ] + internal_files + [directories]

# Build the shared library:
lib = env.SharedLibrary('#/build/lib/imp', files)

# Make sure that any necessary data files are installed in the build
# directory prior to making the shared libraries available
env.Requires(lib, '#/build/data')

# Install the library:
libdir = env.GetInstallDirectory('libdir')
libinst = env.Install(libdir, lib)

if env['build']=='profile' and env['CC'] == 'gcc':
    staticlib = env.StaticLibrary('#/build/lib/imp', files)
    staticlibinst = env.Install(libdir, staticlib)
if env['PLATFORM'] == 'darwin':
    env.AddPostAction (lib, "install_name_tool -id %s %s" \
                           % (lib[0].abspath, lib[0].path))
    env.AddPostAction (libinst, "install_name_tool -id %s %s" \
                           % (libinst[0].abspath, libinst[0].path))
env.Alias('kernel-install', [libinst])
env.Alias('install', [libinst])
if env['build']=='profile' and env['CC'] == 'gcc':
    Return('lib', 'staticlib')
else:
    Return('lib')

Import('env', 'get_sharedlib_environment')

# Get an environment suitable for building a shared library:
env = get_sharedlib_environment(env, 'IMP_EXPORTS', cplusplus=True)
env.Prepend(CPPPATH=["#/build/include"])

# Subdirectories:
internal_files = SConscript('internal/SConscript')

# Source files
files = ['base_types.cpp', 'Model.cpp',
         'Particle.cpp', 'ScoreState.cpp', 'Object.cpp',
         'OptimizerState.cpp', 'Log.cpp', 'Restraint.cpp', 'Optimizer.cpp',
         'random.cpp', 'Key.cpp', 'exception.cpp', 'ParticleRefiner.cpp',
         'UnaryFunction.cpp', 'PairScore.cpp',
         'SingletonScore.cpp', 'TripletScore.cpp',
         'SingletonModifier.cpp', 'PairModifier.cpp',
         'SingletonContainer.cpp', 'PairContainer.cpp'
        ] + internal_files

# Build the shared library:
lib = env.SharedLibrary('#/build/lib/imp', files)

# Install the library:
libinst = env.Install(env['libdir'], lib)
if env['PLATFORM'] == 'darwin':
    env.AddPostAction (lib, "install_name_tool -id %s %s" \
                           % (lib[0].abspath, lib[0].path))
    env.AddPostAction (libinst, "install_name_tool -id %s %s" \
                           % (libinst[0].abspath, libinst[0].path))
env.Alias('kernel-install', [libinst])
env.Alias('install', [libinst])

Return('lib')

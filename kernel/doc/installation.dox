/**
\page installation Compilation from source code
\section prereq Prerequisites
In order to obtain and compile \imp, you will need:

 - SWIG (1.3.34 or later).
 - scons (0.98 or later).
 - Boost (1.33 or later). At the moment \imp only needs the Boost headers (not the libraries).
 - Python 2.3 or later.
 - A Subversion (svn) client to access the repository.

If you install headers, libraries or tools anywhere other than the standard locations (i.e. \c /usr/lib and friends) then you need to tell \c SCons to look in these directories by specifying the `includepath`, `libpath`, and `path` options when you build (paths are colon-separated). For example:

\command{scons includepath=/usr/local/include:/opt/local/include libpath=/usr/local/lib}

\subsection mac Mac
Mac users should use one of the available collections of Unix tools, either \external{www.macports.org/, MacPorts} or \external{www.finkproject.org/, Fink}. If you use MacPorts, you must add \c /opt/local/bin to your path (either by modifying your shell's config file or by making an \c environment.plist file-see the \salilab{imp/wiki/FAQ, FAQ}) and then do
\command{sudo port install boost subversion scons swig}
to install the needed libraries and tools. Alternatively, you can build the
packages yourself from source code.

Note that Mac OS X 10.5 includes a 'swig' binary, but it is too old to use with
IMP. If you install SWIG with MacPorts above, you will need to make sure SCons
picks up your SWIG rather than Apple's, with the `path=/opt/local/bin` command
line option.

\note Do not install any C++ headers in `/usr/include` on your Mac as the compiler assumes any such headers are C headers. Since both MacPorts and Fink install into non-standard locations, you will need to add these to your SCons search path.

\subsection windows Windows
The SCons build system should work on Windows with the command line Microsoft
Visual Studio compiler (`cl`) but it has not yet been tested; some of the
subsidiary scripts may assume a Unix environment. (In the Sali lab, you can
build a Windows version on `synth` by running `scons` in the usual way, giving
the `wine=true` command line option.)

\subsection optional Optional dependencies
The documentation will look prettier if you have \external{www.graphviz.org/,graphviz} installed. It is available as part of most unix tool sets (MacPorts, all linux distributions etc.).

If you want to use \imp with MODELLER, you should use version 9v5 or later and use the following argument to scons
\command{modeller=path/to/modeller}

Certain geometric computations will be faster, better or more reliable if \ref CGAL "CGAL" is installed.

\section userbuild Getting and building IMP: Users
If you are just going to be using \imp, you should use the stable version of \imp. This version is guaranteed to be working at all times

\command{svn co https://svn.salilab.org/imp/branches/stable imp}

You can then build and install \imp

\command{scons
 scons prefix=path/to/install install}

If there are build errors, read the scons help (scons -h) to figure out any more arguments you need to pass to scons in order to make sure it finds needed external libraries.

\section devbuild Getting and building IMP: Developers
If, instead, you will be developing code for \imp you should use the unstable version. This version is more up-to-date than the stable version, but occasionally does not work. To get this version do

\command{svn co https://svn.salilab.org/imp/trunk imp}

You can then build \imp by doing

\command{scons}

Since you will be recompiling \imp relatively frequently, you can use \imp without installing it by using the imppy.sh script. For example, to run Python such that it can use \imp do

\command{./bin/imppy.sh python}

Since you will likely be compiled \imp repeatedly, it may be useful to make a config file for the build. To do this, create a file called `config.py` and put the command like arguments you wish to use into the file, one per line. For example one of ours looks like
\command{
>>> cat config.py
import os

embed=os.environ['HOME']+"/fs/EMbed"
modeller=os.environ['MODINSTALLSVN']
prefix=os.environ['HOME']+"/fs"
path='/opt/local/bin'
includepath='/opt/local/include:'+os.environ['HOME']+"/fs/include"
libpath=os.environ['HOME']+"/fs/lib"
build='debug'
deprecated=False
}
\section other Some other useful commands
 * If you have checked out a copy of \imp, you can update it to the current code by typing
\command{svn update}

To add a module to \imp into which you can put your own code use the `make-module` script:
\command{./bin/make-module modulename}

This will create a new module called modulename and hook it into the build system. See \salilab{imp/doc/doxygen/scripts.html,Useful Scripts} for more information. You then can use \c bin/imppy.sh script to run \c python so that python can find the local \imp libraries.

*/

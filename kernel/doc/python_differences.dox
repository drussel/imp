/** \page differences Differences between C++ and Python

\imp can be used from both C++ and Python. While effort has been made to ensure that the interfaces are the same, a number of differences remain
due to differences in the languages and limitations of the program used to generate the connection between the two languages. Key differences are

- Python does not support templates and so template classes (eg IMP::algebra::BoundingBoxD, IMP::VectorOfRefCounted) cannot be directly exposed
  in python. Instead, specific versions of the classes are exported (IMP::algebra::BoundingBox3D and IMP::Particles, respectively). New versions
  can be easily added, so feel free to request them when desired.

- Iterators on C++ containers do not fit naturally into Python. For every iterator generating pair \c foos_begin(), \c foos_end(), we provide a method
  \c get_foos() which can be used with python \c foreach loops.

- Macros such as IMP_RESTRAINT, IMP_LOG, IMP_USAGE_CHECK are not available in Python. While we could, conceivably, provide python function equivalents, we do not.

- Oddly, the python side is much stricter about converting between different types. In C++ you can call a function that takes a \c Particle* with a \c Decorator and the decorator will automatically be converted. It will not on the python side. Similarly for converting between \c ParticlesTemp and \c Particles.

- All \imp exceptions are exposed as identical Python exception classes. The
class hierarchy is similar (e.g. all exceptions derive from IMP::Exception,
so "except IMP.Exception" will catch all IMP exceptions), except for
convenience some generic IMP exceptions also derive from their standard Python
equivalents (e.g. IMP.IndexException derives from the standard Python
IndexError as well as IMP::Exception). Thus, an IMP::IndexException could be
caught in Python most specifically with "except IMP.IndexException" but also
with "except IMP.Exception" or "except IndexError".
*/

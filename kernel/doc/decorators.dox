/** \page decorators Decorators


Decorators wrap particles in order to provide a nicer interface to
manipulate the attributes of the particle. For example, an
IMP::core::XYZ decorator can be used get and set the cartesian
coordinates of a particle in a single operation..

When talking about a decorator, for example, an IMP::core::XYZ, we say
- we setup a particle to be an XYZ particle when we call
  IMP::core::XYZ::setup_particle() to add the required attributes
- such a a particle is an XYZ particle
- we can decorate an XYZ  particle in an IMP::core::XYZ decorator

The general usage of the decorators is quite simple
- Setup a non-XYZ particle to be an XYZ particle:
\verbatim
d= IMP.core.XYZ.setup_particle(p, Vector3D(0,2,3))
\endverbatim
- Check whether a particle is an XYZ particle
\verbatim
if IMP.core.XYZ.particle_is_instance(p):
   blah
\endverbatim
- Decorate a particle which is known to be an XYZ particle
\verbatim
d= IMP.core.XYZ.decorate(p)
\endverbatim
- Access and manipulate the particle through an IMP::core::XYZ decorator
\verbatim
coords=d.get_coordinates()
d.set_coordinates(IMP.algebra.Vector3D(0,4,5))
\endverbatim
- When needed, access the keys used by the decorator through methods like
\verbatim
d.get_coordinate_keys()
\endverbatim

More abstractly, decorators can be used to
- maintain invariants: e.g. each of the XYZ particles have all of x,y,z coordinates
- add functionality: e.g. you can get the coordinates as an IMP::Vector3D
- provide uniform names for attributes: so you don't use "x" some places
and "X" other places
- cache keys since those can be expensive to create


To see a list of all available decorators and to see what functions all decorators
have, look at the IMP::Decorator page.

See the IMP::examples::ExampleDecorator example for how to implement a simple
decorator.
 */


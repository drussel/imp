/** \page decorators Decorators
Decorators wrap particles in order to provide a nicer interface to
manipulate the attributes of the particle. For example, a decorator
can be used to manipulate an appropriate particle as a sphere, allowing
the user to get the radius or compute the distance between two such
wrapped particles.

When talking about a decorator, for example, an XYZDecorator, we say
- a particle is an XYZ particle if it can be used with an XYZ decorator
- we create an XYZ particle when we have the decorator add the needed
  attributes (data) to the particle
- we can wrap a particle in an XYZDecorator if the particle is already
  an XYZ particle

The general usage of the decorators is quite simple
- Create an XYZ particle:
\verbatim
d= IMP.core.XYZDecorator.create(p, Vector3D(0,2,3))
\endverbatim
- Check whether a particle is an XYZ particle
\verbatim
d= IMP.core.XYZDecorator.is_instance_of(p)
\endverbatim
- Wrap a particle which is known to be an XYZ particle
\verbatim
d= IMP.core.XYZDecorator(p)
\endverbatim
- Access and manipulate the particle through an XYZDecorator
\verbatim
coords=d.get_coordinates()
d.set_coordinates(IMP.algebra.Vector3D(0,4,5))
\endverbatim
- When needed, access the keys used by the decorator through methods like
\verbatim
d.get_coordinate_keys()
\endverbatim

More abstractly, decorators can be used to
- maintain invariants: e.g. each of the XYZ particles have all of x,y,z coordinates
- add functionality: e.g. you can get the coordinates as an IMP::Vector3D
- provide uniform names for attributes: so you don't use "x" some places
and "X" other places
- cache keys since those can be expensive to create


To see a list of all available decorators and to see what functions all decorators
have, look at the IMP::Decorator page.

See the IMP::examples::Decorator example for how to implement a simple
decorator.
 */


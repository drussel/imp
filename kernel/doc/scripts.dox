/** \page scripts Useful Scripts

    \section make_scons Generate SConscripts
    The \c SConscripts in a number of the modules list all of the
    header and \c cpp files which are part of the module (those of other
    modules automatically build this list at compile time). These lists can
    be generated using the \c make-sconscripts script. To run it to rebuild
    the SConscripts for the module modulename do
    \command{./bin/make-sconscripts modulename}

    \section make_module Making a module

    This page describes how to create a new module in your local copy
    of \imp. Creating such a module is the easiest way to get started
    developing code for \imp.

    To get started, first pick the name of your module. Here we will 
    use \string{my_module}. The name should only contain letters, numbers and 
    underscores.

    Then do
    \command{bin/make-module my_module}
    to create the module. If you run \c scons with \c localmodules=True, then
    your locally created module will be included in the build.

    You can use your new module in a variety of ways:
    - add C++ code to your module by putting \string{.h} files
      in \string{modules/my_module/include} and \string{.cpp} files in
      \string{modules/my_module/src}. In order to use use your new functions and
      classes in python, you must add a line 
      \string{%include "IMP/my_module/myheader.h"} near the end of the file
      \string{modules/my_module/pyext/my_module.i}.
    - write C++ programs using \imp by creating \string{.cpp} files in
      \string{modules/my_module/bin}. Each \string{.cpp} file placed there
      is built into a separate executable.
    - add python code to your library by putting a \string{.py} file in
      \string{modules/my_module/pyext/my_module/}
    - add python code to your library by by adding
      \string{%pythoncode} blocks to \string{modules/my_module/pyext/my_module.i}.
    - add test code to your library by putting \string{.py} files in
      \string{modules/my_module/test} or a subdirectory.

    If you feel your module is of interest to other \imp users and 
    developers, post to the \impdev list to discuss adding
    it to the repository.

    If you document your code, running \command{scons doc} will build
    documentation of all of the modules including yours. To access the
    documentation, open \string{doc/html/index.html}.

    \section make_class Making a class
    The \c ./bin/make-class script aids adding a new class to an existing
    module. To use this script do
    \command{./bin/make-class modulename "Class Name With Spaces" "BaseClassName"}
    For example
    \command{./bin/make-class mymodule "My Restraint" Restraint}
    adds a new restraint to \c mymodule. The resulting files have a dummy
    class declaration and definition and appropriate comment fields and header
    guards. However, they do not necessarily declare all the needed methods
    for your type of class. You also need to make sure the class is properly
    exported to \c python and listed in \c SConscript files.
*/

Index: kernel/pyext/Vector3D.i
===================================================================
--- kernel/pyext/Vector3D.i	(revision 1031)
+++ kernel/pyext/Vector3D.i	(working copy)
@@ -4,6 +4,7 @@
 %ignore IMP::VectorD::operator+=;
 %ignore IMP::VectorD::operator*=;
 %ignore IMP::VectorD::operator/=;
+%ignore IMP::VectorD::operator-=;
 
 /* Make sure that we return the original Python object from C++ inplace
    operators (not a new Python proxy around the same C++ object) */
@@ -23,6 +24,11 @@
         $action(self, *args)
         return self
   %}
+  %feature("shadow") VectorD::__isub__(const VectorD &) %{
+    def __isub__(self, *args):
+        $action(self, *args)
+        return self
+  %}
 }
 
 %extend IMP::VectorD {
@@ -37,6 +43,7 @@
   void __iadd__(const VectorD &o) { self->operator+=(o); }
   void __imul__(Float f) { self->operator*=(f); }
   void __idiv__(Float f) { self->operator/=(f); }
+  void __isub__(const VectorD &o) { self->operator-=(o); }
 };
 
 %include "IMP/VectorD.h"
Index: kernel/include/VectorD.h
===================================================================
--- kernel/include/VectorD.h	(revision 1031)
+++ kernel/include/VectorD.h	(working copy)
@@ -17,6 +17,7 @@
 
 #include <boost/random/uniform_real.hpp>
 
+#include <limits>
 #include <cmath>
 
 IMP_BEGIN_NAMESPACE
@@ -70,10 +71,14 @@
   }
 
   //! Default constructor
-  VectorD() {}
+  VectorD() {
+#ifndef NDEBUG
+    for (unsigned int i=0; i< D; ++i) {
+      vec_[i]= std::numeric_limits<Float>::quiet_NaN();
+    }
+#endif
+  }
 
-  IMP_COMPARISONS;
-
   //! \return A single component of this vector (0-D).
   Float operator[](unsigned int i) const {
     IMP_assert(i < D, "Invalid component of vector requested");
@@ -179,6 +184,14 @@
     return *this;
   }
 
+  //! Subtract in place
+  VectorD& operator-=(const VectorD &o) {
+    for (unsigned int i=0; i< D; ++i) {
+      vec_[i] -= o[i];
+    }
+    return *this;
+  }
+
   //! Rescale the vector
   VectorD& operator/=(Float f) {
     for (unsigned int i=0; i< D; ++i) {
Index: kernel/test/misc/test_vector3d.py
===================================================================
--- kernel/test/misc/test_vector3d.py	(revision 1031)
+++ kernel/test/misc/test_vector3d.py	(working copy)
@@ -23,10 +23,12 @@
         """Check Vector3D scalar product"""
         v1 = IMP.Vector3D(1.0, 2.0, 3.0)
         v2 = IMP.Vector3D(10.0, 1.0, 2.0)
-        self.assertEqual(v1.scalar_product(v2), v2.scalar_product(v1))
-        self.assertEqual(v1.scalar_product(v2), v1 * v2)
-        self.assertEqual(v1.scalar_product(v2), v2 * v1)
-        self.assertEqual(v1.scalar_product(v2), 18.0)
+        self.assertInTolerance(v1.scalar_product(v2), v2.scalar_product(v1),
+                               .1)
+        self.assertInTolerance(v1.scalar_product(v2), v1 * v2, 
+                               .1)
+        self.assertInTolerance(v1.scalar_product(v2), v2 * v1, .1)
+        self.assertInTolerance(v1.scalar_product(v2), 18.0, .1)
 
     def test_vector_product(self):
         """Check Vector3D vector product"""
@@ -36,8 +38,8 @@
         v21 = v2.vector_product(v1)
         expected_v12 = (1.0, 28.0, -19.0)
         for i in range(3):
-            self.assertEqual(v12[i], -v21[i])
-            self.assertEqual(v12[i], expected_v12[i])
+            self.assertInTolerance(v12[i], -v21[i], .1)
+            self.assertInTolerance(v12[i], expected_v12[i],.1)
 
     def test_difference(self):
         """Check Vector3D difference"""
@@ -45,10 +47,11 @@
         v2 = IMP.Vector3D(10.0, 1.0, 2.0)
         diff = v1 - v2
         v1 -= v2
-        expected_diff = (-9.0, 1.0, 1.0)
-        for i in range(3):
-            self.assertEqual(diff[i], expected_diff[i])
-            self.assertEqual(v1[i], expected_diff[i])
+        expected_diff = IMP.Vector3D(-9.0, 1.0, 1.0)
+        self.assertInTolerance((diff-expected_diff).get_magnitude(),
+                               0, .1)
+        self.assertInTolerance((v1-expected_diff).get_magnitude(),
+                               0, .1)
 
     def test_addition(self):
         """Check Vector3D addition"""
@@ -62,10 +65,11 @@
         self.assertEqual(id(v1), idv1)
         # The underlying C++ object pointer should be unchanged too:
         self.assertEqual(str(v1.this), cppobj)
-        expected_sum = (11.0, 3.0, 5.0)
-        for i in range(3):
-            self.assertEqual(sum[i], expected_sum[i])
-            self.assertEqual(v1[i], expected_sum[i])
+        expected_sum = IMP.Vector3D(11.0, 3.0, 5.0)
+        self.assertInTolerance((sum-expected_sum).get_magnitude(),
+                               0, .1)
+        self.assertInTolerance((v1-expected_sum).get_magnitude(),
+                               0, .1)
 
     def test_scalar_multiplication(self):
         """Check Vector3D multiplication by a scalar"""
@@ -78,8 +82,10 @@
         self.assertEqual(id(v1), idv1)
         expected_prod = (3.0, 6.0, 9.0)
         for i in range(3):
-            self.assertEqual(prod[i], expected_prod[i])
-            self.assertEqual(v1[i], expected_prod[i])
+            self.assertInTolerance(prod[i], expected_prod[i],
+                                   .1)
+            self.assertInTolerance(v1[i], expected_prod[i],
+                                   .1)
 
     def test_scalar_division(self):
         """Check Vector3D division by a scalar"""

Index: kernel/include/Key.h
===================================================================
--- kernel/include/Key.h	(revision 1035)
+++ kernel/include/Key.h	(working copy)
@@ -139,6 +139,11 @@
     // cannot check here as we need a past end iterator
   }
 
+  //! Return true if there already is a key with that string
+  static bool get_key_exists(std::string sc) {
+    return get_map().find(sc) != get_map().end();
+  }
+
   //! Turn a key into a pretty string
   const std::string get_string() const {
     if (is_default()) return std::string("NULL");
@@ -152,6 +157,7 @@
     out << "\"" << get_string() << "\"";
   }
 
+  //! Get a unique (with that type of key) int for the key
   unsigned int get_index() const {
     IMP_assert(!is_default(),
                "Cannot get index on defaultly constructed Key");
Index: modules/core/test/run-all-tests.py
===================================================================
--- modules/core/test/run-all-tests.py	(revision 1035)
+++ modules/core/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/core/test/decorators/test_hierarchy.py
===================================================================
--- modules/core/test/decorators/test_hierarchy.py	(revision 1035)
+++ modules/core/test/decorators/test_hierarchy.py	(working copy)
@@ -23,6 +23,11 @@
         self.assertEqual(ppd.get_number_of_children(), 10,
                          "Number of children is not as expected")
         ppd.validate()
+    def test_types(self):
+        at= IMP.core.atom_type_from_pdb_string("CA")
+        self.assertRaises(ValueError, IMP.core.atom_type_from_pdb_string, "blah")
+        lt= IMP.core.residue_type_from_pdb_string("LYS")
+        self.assertRaises(ValueError, IMP.core.residue_type_from_pdb_string, "blah")
 
 
 if __name__ == '__main__':
Index: modules/core/include/AtomDecorator.h
===================================================================
--- modules/core/include/AtomDecorator.h	(revision 1035)
+++ modules/core/include/AtomDecorator.h	(working copy)
@@ -223,10 +223,12 @@
   static AtomType AT_H72;
   static AtomType AT_H73;
 
+  /** Get the atom type for this particle */
   AtomType get_type() const {
     return AtomType(get_particle()->get_value(type_key_));
   }
 
+  /** Set the atom type for this particle */
   void set_type(AtomType t);
 
   IMP_DECORATOR_GET_SET_OPT(charge, charge_key_,
@@ -236,11 +238,22 @@
 
   IMP_DECORATOR_GET_SET_OPT(mass, mass_key_,
                             Float, Float, 0);
+  
+  static void initialize_atom_types() {
+    decorator_initialize_static_data();
+  }
 
 };
 
 IMP_OUTPUT_OPERATOR(AtomDecorator);
 
+//! Return the AtomType from the four letter code in the PDB
+/** \throw ValueException if nm is invalid.
+    \relates AtomDecorator
+    \relates AtomType*/
+IMPCOREEXPORT AtomType atom_type_from_pdb_string(std::string nm);
+
+
 IMPCORE_END_NAMESPACE
 
 #endif  /* IMPCORE_ATOM_DECORATOR_H */
Index: modules/core/include/ResidueDecorator.h
===================================================================
--- modules/core/include/ResidueDecorator.h	(revision 1035)
+++ modules/core/include/ResidueDecorator.h	(working copy)
@@ -78,28 +78,42 @@
   static ResidueType GUA;
   static ResidueType THY;
 
+  /** Get the type of this residue */
   ResidueType get_type() const {
     return ResidueType(get_particle()->get_value(type_key_));
   }
 
+  /** Set the type of this residue */
   void set_type(ResidueType t) {
     return get_particle()->set_value(type_key_, t.get_index());
   }
 
+  /** Return true if it is an amino acid residue */
   bool get_is_amino_acid() const {
     return !get_is_nucleic_acid();
   }
 
+  /** Return true if it is a nucleic acid residue */
   bool get_is_nucleic_acid() const {
     return get_type().get_index() >= ADE.get_index();
   }
   //! The residues index in the chain
   IMP_DECORATOR_GET_SET(index, index_key_,
                         Int, unsigned int);
+  
+  static void initialize_residue_types() {
+    decorator_initialize_static_data();
+  }
 };
 
 IMP_OUTPUT_OPERATOR(ResidueDecorator);
 
+//! Return the residue type from the three letter code in the PDB
+/** \throw ValueException if nm is invalid.
+    \relates ResidueDecorator
+    \relates ResidueType */
+IMPCOREEXPORT ResidueType residue_type_from_pdb_string(std::string nm);
+
 IMPCORE_END_NAMESPACE
 
 #endif  /* IMPCORE_RESIDUE_DECORATOR_H */
Index: modules/core/src/AtomDecorator.cpp
===================================================================
--- modules/core/src/AtomDecorator.cpp	(revision 1035)
+++ modules/core/src/AtomDecorator.cpp	(working copy)
@@ -12,6 +12,7 @@
 #include <sstream>
 #include <vector>
 #include <limits>
+#include <sstream>
 
 IMPCORE_BEGIN_NAMESPACE
 
@@ -209,178 +210,191 @@
   get_particle()->set_value(type_key_, t.get_index());
 }
 
+
 IMP_DECORATOR_INITIALIZE(AtomDecorator, XYZDecorator,
                          {
-                           element_key_= IntKey("atom element");
-                           charge_key_= FloatKey("atom charge");
-                           mass_key_= FloatKey("atom mass");
-                           //vdw_radius_key_= FloatKey("atom vdw radius");
-                           type_key_ = IntKey("atom type");
-                           TYPE_INIT(N);
-                           TYPE_INIT(H);
-                           TYPE_INIT(1H);
-                           TYPE_INIT(H1);
-                           TYPE_INIT(2H);
-                           TYPE_INIT(H2);
-                           TYPE_INIT(3H);
-                           TYPE_INIT(H3);
-                           TYPE_INIT(C);
-                           TYPE_INIT(O);
-                           TYPE_INIT(OXT);
-                           TYPE_INIT(CH3);
+                         element_key_= IntKey("atom element");
+                         charge_key_= FloatKey("atom charge");
+                         mass_key_= FloatKey("atom mass");
+                         //vdw_radius_key_= FloatKey("atom vdw radius");
+                         type_key_ = IntKey("atom type");
+                         TYPE_INIT(N);
+                         TYPE_INIT(H);
+                         TYPE_INIT(1H);
+                         TYPE_INIT(H1);
+                         TYPE_INIT(2H);
+                         TYPE_INIT(H2);
+                         TYPE_INIT(3H);
+                         TYPE_INIT(H3);
+                         TYPE_INIT(C);
+                         TYPE_INIT(O);
+                         TYPE_INIT(OXT);
+                         TYPE_INIT(CH3);
+                         
+                         TYPE_INIT(CA);
+                         TYPE_INIT(HA);
+                         TYPE_INIT(1HA);
+                         TYPE_INIT(2HA);
+                         
+                         TYPE_INIT(CB);
+                         TYPE_INIT(HB);
+                         TYPE_INIT(1HB);
+                         TYPE_INIT(2HB);
+                         TYPE_INIT(3HB);
+                         
+                         TYPE_INIT(CG);
+                         TYPE_INIT(CG1);
+                         TYPE_INIT(CG2);
+                         TYPE_INIT(HG);
+                         TYPE_INIT(1HG);
+                         TYPE_INIT(2HG);
+                         //TYPE_INIT(HG1",AtomDecorator::AT_HG1},
+                         TYPE_INIT(1HG1);
+                         TYPE_INIT(2HG1);
+                         TYPE_INIT(3HG1);
+                         TYPE_INIT(1HG2);
+                         TYPE_INIT(2HG2);
+                         TYPE_INIT(3HG2);
+                         TYPE_INIT(OG);
+                         TYPE_INIT(OG1);
+                         TYPE_INIT(SG);
+                         
+                         TYPE_INIT(CD);
+                         TYPE_INIT(CD1);
+                         TYPE_INIT(CD2);
+                         //TYPE_INIT(HD1",AtomDecorator::AT_HD1},
+                         //TYPE_INIT(HD2",AtomDecorator::AT_HD2},
+                         TYPE_INIT(HD);
+                         TYPE_INIT(1HD);
+                         TYPE_INIT(2HD);
+                         TYPE_INIT(3HD);
+                         TYPE_INIT(1HD1);
+                         TYPE_INIT(2HD1);
+                         TYPE_INIT(3HD1);
+                         TYPE_INIT(1HD2);
+                         TYPE_INIT(2HD2);
+                         TYPE_INIT(3HD2);
+                         TYPE_INIT(SD);
+                         TYPE_INIT(OD1);
+                         TYPE_INIT(OD2);
+                         TYPE_INIT(ND1);
+                         TYPE_INIT(ND2);
+                         
+                         TYPE_INIT(CE);
+                         TYPE_INIT(CE1);
+                         TYPE_INIT(CE2);
+                         TYPE_INIT(CE3);
+                         TYPE_INIT(HE);
+                         TYPE_INIT(1HE);
+                         TYPE_INIT(2HE);
+                         TYPE_INIT(3HE);
+                         //TYPE_INIT(HE1",AtomDecorator::AT_HE1},
+                         //TYPE_INIT(HE2",AtomDecorator::AT_HE2},
+                         //TYPE_INIT(HE3",AtomDecorator::AT_HE3},
+                         TYPE_INIT(1HE2);
+                         TYPE_INIT(2HE2);
+                         TYPE_INIT(OE1);
+                         TYPE_INIT(OE2);
+                         TYPE_INIT(NE);
+                         TYPE_INIT(NE1);
+                         TYPE_INIT(NE2);
+                         
+                         TYPE_INIT(CZ);
+                         TYPE_INIT(CZ2);
+                         TYPE_INIT(CZ3);
+                         TYPE_INIT(NZ);
+                         TYPE_INIT(HZ);
+                         TYPE_INIT(1HZ);
+                         TYPE_INIT(2HZ);
+                         TYPE_INIT(3HZ);
+                         //TYPE_INIT(HZ1",AtomDecorator::AT_HZ2},
+                         //TYPE_INIT(HZ2",AtomDecorator::AT_HZ2},
+                         //TYPE_INIT(HZ3",AtomDecorator::AT_HZ3},
+                         
+                         TYPE_INIT(CH2);
+                         TYPE_INIT(NH1);
+                         TYPE_INIT(NH2);
+                         TYPE_INIT(OH);
+                         TYPE_INIT(HH);
+                         
+                         TYPE_INIT(1HH1);
+                         TYPE_INIT(2HH1);
+                         TYPE_INIT(HH2);
+                         TYPE_INIT(1HH2);
+                         TYPE_INIT(2HH2);
+                         TYPE_INIT(2HH3);
+                         TYPE_INIT(3HH3);
+                         TYPE_INIT(1HH3);
+                         
+                         //TYPE_INIT(HH31);
+                         //TYPE_INIT(HH32);
+                         //TYPE_INIT(HH33);
+                         
+                         TYPE_INIT(P);
+                         TYPE_INIT(OP1);
+                         TYPE_INIT(OP2);
+                         TYPE_INIT2(O5p, O5*);
+                         TYPE_INIT2(C5p,C5*);
+                         TYPE_INIT2(H5pp, H5**);
+                         TYPE_INIT2(C4p, C4*);
+                         TYPE_INIT2(H4p, H4*);
+                         TYPE_INIT2(H5p, H5*);
+                         TYPE_INIT2(O4p, O4*);
+                         TYPE_INIT2(C1p, C1*);
+                         TYPE_INIT2(H1p, H1*);
+                         TYPE_INIT2(C3p, C3*);
+                         TYPE_INIT2(H3p, H3*);
+                         TYPE_INIT2(O3p, O3*);
+                         TYPE_INIT2(C2p, C2*);
+                         TYPE_INIT2(H2p, H2*);
+                         TYPE_INIT2(H2pp, H2**);
+                         TYPE_INIT2(O2p, O2*);
+                         TYPE_INIT2(HO2p, HO2*);
+                         TYPE_INIT(N9);
+                         TYPE_INIT(C8);
+                         TYPE_INIT(H8);
+                         TYPE_INIT(N7);
+                         TYPE_INIT(C5);
+                         TYPE_INIT(C4);
+                         TYPE_INIT(N3);
+                         TYPE_INIT(C2);
+                         TYPE_INIT(N1);
+                         TYPE_INIT(C6);
+                         TYPE_INIT(N6);
+                         TYPE_INIT(H61);
+                         TYPE_INIT(H62);
+                         TYPE_INIT(O6);
+                         
+                         TYPE_INIT(N2);
+                         TYPE_INIT(H21);
+                         TYPE_INIT(H22);
+                         
+                         TYPE_INIT(H6);
+                         TYPE_INIT(H5);
+                         TYPE_INIT(O2);
+                         TYPE_INIT(N4);
+                         TYPE_INIT(H41);
+                         TYPE_INIT(H42);
+                         
+                         TYPE_INIT(O4);
+                         TYPE_INIT(C7);
+                         TYPE_INIT(H71);
+                         TYPE_INIT(H72);
+                         TYPE_INIT(H73);
+                         
+                         TYPE_INIT(UNKNOWN);
+                         })
 
-                           TYPE_INIT(CA);
-                           TYPE_INIT(HA);
-                           TYPE_INIT(1HA);
-                           TYPE_INIT(2HA);
+AtomType atom_type_from_pdb_string(std::string nm) {
+  // make sure types are initialized
+  AtomDecorator::initialize_atom_types();
+  if (!AtomType::get_key_exists(nm)) {
+    std::ostringstream oss;
+    oss<< "AtomType " << nm << " does not exist.";
+    throw ValueException(oss.str().c_str());
+  }
+  return AtomType(nm.c_str());
+}
 
-                           TYPE_INIT(CB);
-                           TYPE_INIT(HB);
-                           TYPE_INIT(1HB);
-                           TYPE_INIT(2HB);
-                           TYPE_INIT(3HB);
 
-                           TYPE_INIT(CG);
-                           TYPE_INIT(CG1);
-                           TYPE_INIT(CG2);
-                           TYPE_INIT(HG);
-                           TYPE_INIT(1HG);
-                           TYPE_INIT(2HG);
-                           //TYPE_INIT(HG1",AtomDecorator::AT_HG1},
-                           TYPE_INIT(1HG1);
-                           TYPE_INIT(2HG1);
-                           TYPE_INIT(3HG1);
-                           TYPE_INIT(1HG2);
-                           TYPE_INIT(2HG2);
-                           TYPE_INIT(3HG2);
-                           TYPE_INIT(OG);
-                           TYPE_INIT(OG1);
-                           TYPE_INIT(SG);
-
-                           TYPE_INIT(CD);
-                           TYPE_INIT(CD1);
-                           TYPE_INIT(CD2);
-                           //TYPE_INIT(HD1",AtomDecorator::AT_HD1},
-                           //TYPE_INIT(HD2",AtomDecorator::AT_HD2},
-                           TYPE_INIT(HD);
-                           TYPE_INIT(1HD);
-                           TYPE_INIT(2HD);
-                           TYPE_INIT(3HD);
-                           TYPE_INIT(1HD1);
-                           TYPE_INIT(2HD1);
-                           TYPE_INIT(3HD1);
-                           TYPE_INIT(1HD2);
-                           TYPE_INIT(2HD2);
-                           TYPE_INIT(3HD2);
-                           TYPE_INIT(SD);
-                           TYPE_INIT(OD1);
-                           TYPE_INIT(OD2);
-                           TYPE_INIT(ND1);
-                           TYPE_INIT(ND2);
-
-                           TYPE_INIT(CE);
-                           TYPE_INIT(CE1);
-                           TYPE_INIT(CE2);
-                           TYPE_INIT(CE3);
-                           TYPE_INIT(HE);
-                           TYPE_INIT(1HE);
-                           TYPE_INIT(2HE);
-                           TYPE_INIT(3HE);
-                           //TYPE_INIT(HE1",AtomDecorator::AT_HE1},
-                           //TYPE_INIT(HE2",AtomDecorator::AT_HE2},
-                           //TYPE_INIT(HE3",AtomDecorator::AT_HE3},
-                           TYPE_INIT(1HE2);
-                           TYPE_INIT(2HE2);
-                           TYPE_INIT(OE1);
-                           TYPE_INIT(OE2);
-                           TYPE_INIT(NE);
-                           TYPE_INIT(NE1);
-                           TYPE_INIT(NE2);
-
-                           TYPE_INIT(CZ);
-                           TYPE_INIT(CZ2);
-                           TYPE_INIT(CZ3);
-                           TYPE_INIT(NZ);
-                           TYPE_INIT(HZ);
-                           TYPE_INIT(1HZ);
-                           TYPE_INIT(2HZ);
-                           TYPE_INIT(3HZ);
-                           //TYPE_INIT(HZ1",AtomDecorator::AT_HZ2},
-                           //TYPE_INIT(HZ2",AtomDecorator::AT_HZ2},
-                           //TYPE_INIT(HZ3",AtomDecorator::AT_HZ3},
-
-                           TYPE_INIT(CH2);
-                           TYPE_INIT(NH1);
-                           TYPE_INIT(NH2);
-                           TYPE_INIT(OH);
-                           TYPE_INIT(HH);
-
-                           TYPE_INIT(1HH1);
-                           TYPE_INIT(2HH1);
-                           TYPE_INIT(HH2);
-                           TYPE_INIT(1HH2);
-                           TYPE_INIT(2HH2);
-                           TYPE_INIT(2HH3);
-                           TYPE_INIT(3HH3);
-                           TYPE_INIT(1HH3);
-
-                           //TYPE_INIT(HH31);
-                           //TYPE_INIT(HH32);
-                           //TYPE_INIT(HH33);
-
-                           TYPE_INIT(P);
-                           TYPE_INIT(OP1);
-                           TYPE_INIT(OP2);
-                           TYPE_INIT2(O5p, O5*);
-                           TYPE_INIT2(C5p,C5*);
-                           TYPE_INIT2(H5pp, H5**);
-                           TYPE_INIT2(C4p, C4*);
-                           TYPE_INIT2(H4p, H4*);
-                           TYPE_INIT2(H5p, H5*);
-                           TYPE_INIT2(O4p, O4*);
-                           TYPE_INIT2(C1p, C1*);
-                           TYPE_INIT2(H1p, H1*);
-                           TYPE_INIT2(C3p, C3*);
-                           TYPE_INIT2(H3p, H3*);
-                           TYPE_INIT2(O3p, O3*);
-                           TYPE_INIT2(C2p, C2*);
-                           TYPE_INIT2(H2p, H2*);
-                           TYPE_INIT2(H2pp, H2**);
-                           TYPE_INIT2(O2p, O2*);
-                           TYPE_INIT2(HO2p, HO2*);
-                           TYPE_INIT(N9);
-                           TYPE_INIT(C8);
-                           TYPE_INIT(H8);
-                           TYPE_INIT(N7);
-                           TYPE_INIT(C5);
-                           TYPE_INIT(C4);
-                           TYPE_INIT(N3);
-                           TYPE_INIT(C2);
-                           TYPE_INIT(N1);
-                           TYPE_INIT(C6);
-                           TYPE_INIT(N6);
-                           TYPE_INIT(H61);
-                           TYPE_INIT(H62);
-                           TYPE_INIT(O6);
-
-                           TYPE_INIT(N2);
-                           TYPE_INIT(H21);
-                           TYPE_INIT(H22);
-
-                           TYPE_INIT(H6);
-                           TYPE_INIT(H5);
-                           TYPE_INIT(O2);
-                           TYPE_INIT(N4);
-                           TYPE_INIT(H41);
-                           TYPE_INIT(H42);
-
-                           TYPE_INIT(O4);
-                           TYPE_INIT(C7);
-                           TYPE_INIT(H71);
-                           TYPE_INIT(H72);
-                           TYPE_INIT(H73);
-
-                           TYPE_INIT(UNKNOWN);
-                         })
-
 IMPCORE_END_NAMESPACE
Index: modules/core/src/ResidueDecorator.cpp
===================================================================
--- modules/core/src/ResidueDecorator.cpp	(revision 1035)
+++ modules/core/src/ResidueDecorator.cpp	(working copy)
@@ -57,7 +57,6 @@
 }
 
 
-
 IMP_DECORATOR_INITIALIZE(ResidueDecorator, DecoratorBase,
                          { type_key_= IntKey("residue type");
                            index_key_= IntKey("residue index");
@@ -91,4 +90,16 @@
                            TYPE_INIT(THY);
                          })
 
+ResidueType residue_type_from_pdb_string(std::string nm) {
+  // make sure types are initialized
+  ResidueDecorator::initialize_residue_types();
+  if (!ResidueType::get_key_exists(nm)) {
+    std::ostringstream oss;
+    oss<< "ResidueType " << nm << " does not exist.";
+    throw ValueException(oss.str().c_str());
+  }
+  return ResidueType(nm.c_str());
+}
+
+
 IMPCORE_END_NAMESPACE

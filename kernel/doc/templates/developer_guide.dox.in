/* WARNING: EDIT THE VERSION OF THIS PAGE IN kernel/doc/template, NOT THE
   .dox PAGE IN kernel/doc.
*/
/**\page devguide Guide for Developers

Developers should familiarize themselves which the guidelines presented in this page.

\section policies Policies

Code in the IMP or IMP::core modules must compile and all IMP::core and IMP tests must pass. Code checked into other modules should compile or be excluded from the build system and all enabled test should pass.

All code must follow the \ref coding_conventions "IMP coding conventions".

The following sorts of changes must be announced on the <imp-dev@salilab.org> mailing list before being made
 * changes to existing kernel or core APIs
 * removal of test cases
 * creation of a new module
 * significant additions to kernel or core

It is strongly suggested that the following sorts of changes be posted to the list
 * additions of new functionality to any part of IMP

Such discussion is important so that
 * you do not duplicate work
 * others can ensure that the new interfaces are consistent with other IMP code
 * others can make suggestions or point out problems
 * others are made aware of your contribution.


It is strongly recommended that all methods or classes be tested in unit tests. These unit tests consist of python code in the modulename/test directory. Test cases also help to document the intent of code changes, as well as making sure that the new additions are not accidentally broken in future.

\section modules Choosing a module for your code

IMP is divided into models which group related functionality. Generally useful functionality should be added to the core or misc model, but large blocks of well defined functionality should probably go in their own model. Examples of appropriate units for a module include code for building restraints from a particular type of experimental data such as IMP::saxs or a large piece of functionality such as IMP::domino. Please post to the <imp-dev@salilab.org> mailing list to discuss the placement of new code.

Each module has a responsible owner or owners, and it is up to them whether they want to allow others commit to change code in their module. Email the <imp-dev@salilab.org> mailing list to discuss such policies.


\section submission Submission of changes to IMP kernel or IMP.core

In order to submit changes to the kernel or IMP.core, you should prepare a patch against the current svn version of IMP. To do that, make your changes to an up to date copy of IMP and then do
\command{svn di > mypatch}
to generate a description of the patch in the file "mypatch". You should then email this patch to the <imp-dev@salilab.org> mailing list along with a description of the changes..

Patches should contain a related set of changes. For example, a patch which adds a new method foo, a new testcase for foo, and some documentation for the SpecialVector class, should be split into two patches: one for the foo method and test, and the other for the SpecialVector documentation.
It is much easier for others to understand your patch's changes if it is small and contains only relevant changes. 

Patches to modules can be submitted directly by doing:
\command{svn commit -m "message describing the patch" files or directories to submit}
*/
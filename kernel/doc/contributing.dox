/** \page contributing Contributing code to IMP

In order to be shared with others as part of the \imp distribution,
code needs to be of higher quality and more thoroughly vetted than
typical research code. As a result, it may make sense to keep the
code as part of a private module until you better understand what
capabilities can be cleanly offered to others.

The first set of questions to answer are

- What exactly is the functionality I would like to contribute? Is
  it a single function, a single Restraint, a set of related classes
  and functions?

- Is there similar functionality already in \imp? If so, it might make
  more sense to modify the existing code in cooperation with its
  author. At the very least, the new code needs to respect the
  conventions established by the prior code in order to maintain
  consistency.

- Where should the new functionality go? It can either be added to an
  existing module or as part of a new module. If adding to an existing
  module, you must communicate with the authors of that module to get
  permission and coordinate changes.

- Should the functionality be written in C++ or Python? In general, we
  suggest C++ if you are comfortable programming in that language as
  that makes the functionality available to more people. See \ref
  differences "Python/C++ differences" for more considerations.

You are encouraged to post to the
\impdev to find help
answering these questions as it can be hard to grasp all the various
pieces of functionality already in the repository.

All code contributed to \imp
- must follow the  \ref codingconventions "IMP coding conventions"
- should follow general good \ref cpp "C++ programming practices"
- must have unit tests
- must pass all unit tests
- must have documentation
- must build on all supported compilers (roughly, recent versions of gcc and Visual C++) without warnings
- should have examples
- must not have warnings when doxygen is run (\c scons \c doc)

The next suggestions provide more details about the above choices and how to implement them.

\section submitting Submitting to a module

Small pieces of functionality or extensions to existing functionality
probably should be submitted to an existing module. Please contact the
authors of the appropriate module and discuss the submission and how
the code will be maintained.

A list of all current modules in SVN can be found in
<a href="namespaces.html">the modules list</a> or from the modules tab
above.

As always, if in doubt, post to \impdev.


\subsection kernelcore Submission of changes to IMP kernel or IMP.core

In order to submit changes to the kernel or IMP.core, you should
prepare a patch against the current SVN version of IMP. To do that,
make your changes to an up to date copy of the svn version of IMP and
then do \command{svn diff paths/to/changed/files >
patches/mypatch.patch} to generate a description of the patch in the
file "mypatch.patch". You should then create a description of the
patch in patches/mypatch.readme and commit the two files into the
repository by doing \command{svn add patches/mypatch*} \command{svn
commit patches/mypatch* -m "very brief description"} If the patch
introduces API changes, please discuss them (preferably before writing
the actual code) on the \impdev mailing list.

Patches should contain a related set of changes. For example, a patch which adds a new method foo, a new testcase for foo, and some documentation for the SpecialVector class, should be split into two patches: one for the foo method and test, and the other for the SpecialVector documentation.
It is much easier for others to understand your patch's changes if it is small and contains only relevant changes. 

Patches to modules for which you have write access can be submitted
directly by doing: \command{svn commit -m "message describing the
patch" files or directories to submit}




\section submitting Submitting a module

If you have a large group of related functionality to submit, it may make sense to create a new module in svn. Please post to \impdev to discuss your plans.


\section submitted Once you have submitted code

Once you have submitted code, you should monitor the
\salilab{internal/imp/tests.html,Daily build status} to make sure that
your code builds on all platforms and passes the unit tests. Please
fix all build problems as fast as possible.

The following sorts of changes must be announced on the \impdev
mailing list before being made
 - changes to existing kernel or core APIs
 - significant additions to kernel or core

We recommend that changes be posted to the list a day or two before
they are made so as to give everyone adequate time to comment.

In addition to monitoring the \impdev list, developers who have a module or
are committing patches to svn may want to subscribe to the \impcommits email
list which receives notices of all changes made to the \imp SVN repository.

*/
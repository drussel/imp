#!/usr/bin/python

"""Generate documentation from the examples.
"""

import os
import sys
import getopt
import shutil
import re

def nice_name(string):
    return string.title().replace("_", " ").replace("Cxx", "C++")

def find_examples(dir, lpath=""):
    files = os.listdir(dir)
    subdirs = [x for x in files if os.path.isdir(os.path.join(dir, x)) \
                   and x[0] != '.']
    subdirs.sort()
    examples = [x for x in files if (x.endswith('py') or x.endswith('cpp')) and x[0] != '.']
    examples.sort()
    
    sublist = []
    dirfile = file(dir+"/README", 'r')
    dirdescr= dirfile.read()
    elist=[]
    for f in examples:
        rnm= os.path.splitext(f)[0]+".readme"
        edf = file(dir+"/"+rnm, 'r')
        edesc= edf.read()
        elist.append((os.path.join(lpath,f), edesc))
    sublist.append((lpath, dirdescr, elist))
    for x in subdirs:
        l=find_examples(dir+"/"+x, x)
        for p in l:
            sublist.append(p)
    return sublist

def find_examples_cxx(dir, lpath=""):
    files = os.listdir(dir)
    subdirs = [x for x in files if os.path.isdir(os.path.join(dir, x)) \
                   and x[0] != '.']
    subdirs.sort()
    examples = [x for x in files if x.endswith('cpp') and x[0] != '.']
    examples.sort()
    
    sublist = []
    dirfile = file(dir+"/README", 'r')
    dirdescr= dirfile.read()
    elist=[]
    for f in examples:
        rnm= os.path.splitext(f)[0]+".readme"
        edf = file(dir+"/"+rnm, 'r')
        edesc= edf.read()
        elist.append((os.path.join(lpath,f), edesc))
    sublist.append((lpath, dirdescr, elist))
    for x in subdirs:
        l=find_examples(dir+"/"+x, x)
        for p in l:
            sublist.append(p)
    return sublist
  
def write_doxygen(tree, outputname, htmldest):
   for d in tree:
       path= d[0]
       name= os.path.split(path)[1]
       outfile= file(outputname+"_"+name+".dox", 'w')
       outfile.write("/**")
       
       descr= d[1]
       if name == "": wname="Examples"
       else: wname=name
       outfile.write("\page "+wname+ " " + nice_name(wname) +"\n\n")
       outfile.write(descr+"\n\n")
       # find subpages
       for dp in tree:
           parent= os.path.split(os.path.split(dp[0])[0])[1]
           if parent is name and dp[0] is not name:
               outfile.write("\subpage "+os.path.split(dp[0])[1]+"\n\n")

       #print d
       for e in d[2]:
            nm= os.path.splitext(os.path.split(e[0])[1])[0]
            path=os.path.splitext(e[0])[0]
            outfile.write("\section " +nm + " " + nice_name(nm)+"\n\n")
            outfile.write(e[1]+"\n\n")
            if e[0].endswith('py'):
                outfile.write("\htmlonly\n")
                hfile=file(htmldest+"/"+nm+".html", 'r')
                html= hfile.read()
                outfile.write(html)
                outfile.write("\endhtmlonly\n\n")
            else:
                outfile.write("\include "+nm+".cpp\n\n")
       outfile.write("*/")


def convert_to_html(tree, root, dest):
    print "converting to html"
    for t in tree:
        #print t
        for e in t[2]:
            fn= root+"/"+e[0]
            outfn= dest+"/"+os.path.splitext(os.path.split(e[0])[1])[0]+".html"
            os.system("kernel/doc/bin/colorize_python.py " + fn + " " + outfn)


def process_dox(inpath, htmlpath, outpath):
    print "writing dox"
    files = os.listdir(inpath)
    #print files
    inputs = [x for x in files if os.path.splitext(x)[1] == '.in']
    #print os.path.splitext(files[0])
    htmlfiles = os.listdir(htmlpath)
    #print htmlfiles
    html = [x for x in htmlfiles if os.path.splitext(x)[1] == '.html']
    
    hfs={}
    for h in html:
        f=file(os.path.join(htmlpath, h), 'r')
        cont= f.read()
        hfs[os.path.splitext(h)[0]]=cont    
    for i in inputs:
        #print i
        f=file(os.path.join(inpath, i), 'r')
        cont= f.read()
        for k in hfs.keys():
            cont= cont.replace("IMP_PYTHON("+k+")", hfs[k])
        of= file(os.path.join(outpath, os.path.splitext(os.path.split(i)[1])[0]), 'w')
        of.write(cont)


def main():
    # return a list of tuples (path, description, ( (file, description),... ))
    tree=find_examples('doc/examples')
    #print cxxtree
    # write doxygen file
    # process the files to html
    convert_to_html(tree, 'doc/examples', 'kernel/doc/examples_html')
    write_doxygen(tree, 'kernel/doc/examples', 'kernel/doc/examples_html')
    process_dox('kernel/doc/templates', 'kernel/doc/examples_html', 'kernel/doc')

if __name__ == '__main__':
    main()

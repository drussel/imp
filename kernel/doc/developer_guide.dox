/**\page devguide  Developer Guide

This page presents instructions on how to develop code using
\imp. Developers who wish to contribute code back to \imp or
distribute their code should also read the \ref contributing
"Contributing code to IMP" page.

\section building Building IMP

Developers should first read \ref installation "the installation guide".

We recommend doing an out of source build so you can easily build
multiple build types (\c build='fast', \c build='debug', or \c
build='release') from the same set of sources. To do this:

- make a second directory (say \c debug) outside of the \imp source
  directory. Let the path from the build directory, \c debug, to the
  source directory, \c source, be \c ../source.

- make sure that the \imp source directory is clean. If you just checked
  out from \c svn, then it is. Otherwise, do \command{scons -c all} in
  the source directory.

- In the build directory link to \c SConstruct and \c scons_tools in
  \c source. eg \command{ln -s ../source/SConstruct; ln -s
  ../source/scons_tools}

- Put \c repository="../source" in your \c config.py in the \c debug
  directory. Also put \c build='debug' to tell \c scons to do a debug
  build

- Run \c scons to build things. All the build files will be put in
  subdirectories of \c debug (mostly in \c debug/build).

- You can then create a second build directory, say called \c fast, to
  hold on optimized build. Put \c build='fast' in the \c config.py for
  that build directory.

\section usage Writing new functions and classes

The easiest way to start writing new functions and classes is to
create a new module using the \ref make_module "make-module script".
This creates a new module in the \c modules directory, complete with
example code.

We highly recommend using a revision control system such as
\external{subversion.tigris.org/, SVN} or \external{git-scm.com/,
GIT}.

If, instead, you choose to add code to an existing module you need to
consult with the person who people who control that module.

\section inplace Using IMP in place

When developing new \imp code, it is useful to be able to run and test
it without installing \imp every time. To do so, use the
\c tools/imppy.sh script. For example, to execute the \c chain.py
example do \command{./tools/imppy.sh python kernel/examples/chain.py}
or to run the xyz access benchmark do
\command{./tools/imppy.sh modules/benchmark/bin/benchmark_xyz_access}

The \c imppy.sh script is needed to make sure that
all the \imp libraries can be found when needed.



\section testing Debugging and testing your code

Ensuring that your code is correct can be very difficult, so \imp provides a number of tools to help you out.

The first set are assert-style macros:

- IMP_USAGE_CHECK() which should be used to check that arguments to functions and methods satisfy the preconditions.

- IMP_INTERNAL_CHECK() which should be used to verify internal state and return values to make sure they satisfy pre and post-conditions.

See \ref assert "Error reporting/checking" page for more details. As a general guideline,  any improper usage to produce at least a warning all return values should be checked by such code.

The second is logging macros such as:

- IMP_LOG() which allows controlled display of messages about what the code is doing. See \ref logging "IMP logging" for more information.

Finally, each module has a set of unit tests. These are python scripts
which test the behavior of a particular piece of the modules API. The
scripts are located in the \c modules/modulename/test directory.
These tests should try, as much as possible to provide independent
verification of the correctness of the C++ code. The command
\command{scons test} or \command{scons modulename-test} run all modules unit
tests or only those for the module \c modulename, respectively. Any
file in that directory or a subdirectory whose name matches \c
test_*.py is considered a test. The python files are scanned for
classes which inherit from \c IMP.test.TestCase. For each such class
found, any method whose name starts with \c test_ is run.

Some tests will require input files or temporary files. Input files
should be placed in a directory called \c input in the \c test
directory. The test script should then call
\command{self.get_input_file_name(file_name)} to get the true path to
the file. Likewise, appropriate names for temporary files should be
found by calling
\command{self.get_tmp_file_name(file_name)}. Temporary files will be
located in \c build/tmp. The test should remove temporary files after
using them.


\section fixbug Finding and fixing bugs in IMP

If you find a bug in \imp, please report it on the
\salilab{imp/bugs/,IMP bug tracker}. This will ensure it does not get
lost.  The best way to report a bug is to provide a short script file
that demonstrates the problem.

If you create a patch which fixes a bug, please cite the bug ID in the
commit log for that patch. The patch should also include a testcase
which triggers the bug, so that we can ensure your fix for the bug
does not break in future. In many cases, the demonstration script in
the bug report can be trivially adapted into a test case.

*/

/**\page devguide Guide for Developers

Developers should familiarize themselves with the guidelines presented in this page.

\section policies Policies

Code in the IMP or IMP::core modules must compile and all IMP::core and IMP tests must pass. Code checked into other modules should compile or be excluded from the build system and all enabled tests should pass.

All code must follow the \ref coding_conventions "IMP coding conventions".

The following sorts of changes must be announced on the <imp-dev@salilab.org> mailing list before being made
 - changes to existing kernel or core APIs
 - removal of test cases
 - creation of a new module
 - significant additions to kernel or core

It is strongly suggested that the following sorts of changes be posted to the list
 - additions of new functionality to any part of IMP

Such discussion is important so that
 - you do not duplicate work
 - others can ensure that the new interfaces are consistent with other IMP code
 - others can make suggestions or point out problems
 - others are made aware of your contribution.


It is strongly recommended that all methods or classes be tested in unit tests. These unit tests consist of Python code in the modulename/test directory. Test cases also help to document the intent of code changes, as well as making sure that the new additions are not accidentally broken in future.

\section testing Testing

Each class and method should have one or more associated tests in the
\c test directory of its module. These tests should try, as much as
possible to provide independent verification of the correctness of the
C++ code. In addition, classes and methods should use the IMP_check and
IMP_assert macros to check the correctness of arguments and invariants
internally and report errors when problems are detected.


\section modules Choosing a module for your code

IMP is divided into modules which group related functionality, so
by far the easiest way to contribute to IMP is to create a module for your
specific problem domain. For example, restraints and optimizers specific to
ligands could go in a 'ligand' module. Examples of appropriate units for a
module include code for building restraints from a particular type of
experimental data such as IMP::saxs or a large piece of functionality such as
IMP::domino. Please post to the <imp-dev@salilab.org> mailing list to discuss
the placement of new code, before you actually write it.

For small pieces of functionality which perhaps don't warrant their own module,
you have two other options. If the code is of very general utility, it may make
sense to place it in the IMP::core module. (However, it is preferred to use
more specific modules where possible, since core is already rather large.)
If the code is really only useful for you, and others are not expected to use
it, there is an IMP::misc module for such 'testing' or 'experimental' code.
Again, please dicusss the placement of your code on the mailing list.

Code should generally not be moved from one module to another, unless there is
an exceptionally good reason to do so. If for some reason you do want to move
things between modules, ask Ben to do it.

Each module has a responsible owner or owners, and it is up to them whether
they want to allow others commit to change code in their module. Email them
and ask for commit rights (a sysadmin can add these), or send them your patch
for integration. If in doubt, post it on the <imp-dev@salilab.org> mailing list.

If you do not want to put your code into the IMP repository, you can just add a local module to IMP using the make-module script. This script creates a module and hooks it into the build system. You can then immediately add header, source and test files and have everything work. To use the script run
\command{./kernel/doc/bin/make-module mymodulename}
This will create a new module called "mymodulename".


\section submission Submission of changes to IMP kernel or IMP.core

In order to submit changes to the kernel or IMP.core, you should prepare a patch against the current SVN version of IMP. To do that, make your changes to an up to date copy of IMP and then do
\command{svn diff paths/to/changed/files > patches/mypatch.patch}
to generate a description of the patch in the file "mypatch.patch". You should then create a description of the patch in patches/mypatch.readme and commit the two files into the repository by doing
\command{svn add patches/mypatch*}
\command{svn commit patches/mypatch* -m "very brief description"}
If the patch introduces API changes, please discuss them (preferably before
writing the actual code) on the <imp-dev@salilab.org> mailing list.

Patches should contain a related set of changes. For example, a patch which adds a new method foo, a new testcase for foo, and some documentation for the SpecialVector class, should be split into two patches: one for the foo method and test, and the other for the SpecialVector documentation.
It is much easier for others to understand your patch's changes if it is small and contains only relevant changes. 

Patches to modules for which you have write access can be submitted directly
by doing:
\command{svn commit -m "message describing the patch" files or directories to submit}

\section maturity Code maturity

\imp is a work shared by many developers, and they would prefer not to have
spend time working around problems introduced by others elsewhere in the code.
Therefore, it is expected that any code committed to \imp should at least
compile. Any test cases you write for your code should also be expected to
pass, or at least if they do not, you should quickly fix things so that
they do. (As a rule of thumb, your changes should not break the nightly
builds for more than 3 consecutive days; if they do, your changes risk
being reverted.)

It is fine to add code to \imp that is not yet fully complete or ready for
others to use (provided that it compiles and tests, as above). However,
any such classes or methods should be marked in their Doxygen comments
as immature.

\section fixbug Finding and fixing bugs in IMP

If you find a bug in \imp, please report it on the
\salilab{imp/bugs/,IMP bug tracker}. This will ensure it does not get lost.
The best way to report a bug is to provide a short script file that
demonstrates the problem.

If you create a patch which fixes a bug, please cite the bug ID in the
commit log for that patch. The patch should also include a testcase which
triggers the bug, so that we can ensure your fix for the bug does not
break in future. In many cases, the demonstration script in the bug report
can be trivially adapted into a test case. 
*/

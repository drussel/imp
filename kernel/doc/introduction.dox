/**
\page introduction An Introduction to IMP


\section i0 Architecture
 
 There are several key concepts in \imp:
  - Representation: all data is stored as attributes of an IMP::Particle
    - \ref decorators "Decorators" ease use of the particles and help
    maintain invariants
  - Scoring:
    - a IMP::Restraint is used to compute the score of some subset of the particles
    - IMP::ScoreState objects compute maintain high level information about the particles (such as which particles are close to one another)
  - an IMP::Optimizer optimizes the Particles with respect to the Restraints


  - The IMP::Model holds the particles, restraints, and score states.


\section i05 Restraints

 The scoring function for the particles is created by combining various components.
 For example:

  - IMP::core::PairsRestraint applies an arbitrary IMP::PairScore to
    all the pairs of particles in a list of particles

  - this list of particles could be generated from an
    IMP::core::ClosePairsScoreState so that it always contains a list
    of which particles are close to one another

  - the IMP::PairScore could be an IMP::core::SphereDistancePairScore,
    which scores the pair of particles on the distance between the two
    spheres defined by the particles center and radius.

  - the way the IMP::core::SphereDistancePairScore computes a score
    from the distance could be using an IMP::core::HarmonicLowerBound
    so that the particles are repelled.


\section i5 Other important bits
There is good \ref log "logging support":
\code
IMP::set_log_level(IMP.VERBOSE);
IMP_LOG(TERSE, "Something interesting has occurred with variable " 
                 << var << std::endl);
\endcode

\ref assert "Error reporting/checking" which can be controlled at runtime
\code
IMP::set_check_level(IMP.EXPENSIVE);
IMP_check(boolean_condition, "An error has occurred with value "
                             << some_value,
                             ExceptionType);
\endcode

The control functions are accessible from Python, but the check and log macros are not.

Saving state
\htmlonly
<pre><font face="Lucida,Courier New"><font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">write</font><font color="#0000C0">(</font><font color="#000000">my_imp_model</font><font color="#0000C0">,</font> <font color="#004080">"somefile"</font><font color="#0000C0">)</font>
<font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">read</font><font color="#0000C0">(</font><font color="#004080">"somefile"</font><font color="#0000C0">,</font> <font color="#000000">my_imp_model</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly

\verbatim
IMP::core::write(my_imp_model, "somefile");
IMP::core::read("somefile", my_imp_model);
\endverbatim



\section i6 Examples
The following examples all are in python and C++ The following code is ommitted from the examples:
\htmlonly
<pre><font face="Lucida,Courier New"><font color="#C00000">import</font> <font color="#000000">IMP</font>
<font color="#C00000">import</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font>
<font color="#000000">m</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">Model</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
<font color="#000000">ps</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">SingletonContainer</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
<font color="#C00000">for</font> <font color="#000000">i</font> <font color="#C00000">in</font> <font color="#000000">range</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">,</font><font color="#0080C0">100</font><font color="#0000C0">)</font>
    <font color="#000000">p</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">Particle</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
    <font color="#000000">m</font><font color="#0000C0">.</font><font color="#000000">add_particle</font><font color="#0000C0">(</font><font color="#000000">p</font><font color="#0000C0">)</font>
    <font color="#000000">d</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">XYZDecorator</font><font color="#0000C0">.</font><font color="#000000">create</font><font color="#0000C0">(</font><font color="#000000">p</font><font color="#0000C0">)</font>
    <font color="#000000">d</font><font color="#0000C0">.</font><font color="#000000">set_coordinates_are_optimized</font><font color="#0000C0">(</font><font color="#000000">True</font><font color="#0000C0">)</font>
    <font color="#000000">d</font><font color="#0000C0">.</font><font color="#000000">set_coordinates</font><font color="#0000C0">(</font><font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">random_vector_in_box</font><font color="#0000C0">(</font><font color="#0000C0">)</font><font color="#0000C0">)</font>
    <font color="#000000">d</font><font color="#0000C0">.</font><font color="#000000">set_radius</font><font color="#0000C0">(</font><font color="#0080C0">1.0</font><font color="#0000C0">)</font>
    <font color="#000000">ps</font><font color="#0000C0">.</font><font color="#000000">add_particle</font><font color="#0000C0">(</font><font color="#000000">p</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly

\code
#include <IMP.h>
#include <IMP/core.h>

IMP::Pointer<IMP::Model> m= new IMP::Model();
IMP::core::SingletonContainer ps;
for (int i=0; i< 100; ++i) {
    IMP::Particle* p=new IMP::Particle();
    ps->add_particle(p);
    m->add_particles(p);
    IMP::core::XYZRDecorator d= IMP::core::XYZRDecorator::create(p);
    d.set_coordinates_are_optimized(true);
    d.set_coordinates(IMP::random_vector_in_box());
    d.set_radius(1.0);
}

\endcode





\section i7 Restraint some distances

Restrain the distance between the first two particles.

\htmlonly
<pre><font face="Lucida,Courier New"><font color="#000000">uf</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">Harmonic</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">,</font><font color="#0080C0">1</font><font color="#0000C0">)</font>
<font color="#000000">df</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">SphereDistancePairScore</font><font color="#0000C0">(</font><font color="#000000">uf</font><font color="#0000C0">)</font>
<font color="#000000">r</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">PairRestraint</font><font color="#0000C0">(</font><font color="#000000">df</font><font color="#0000C0">,</font> <font color="#000000">ps</font><font color="#0000C0">.</font><font color="#000000">get_particle</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">)</font><font color="#0000C0">,</font> <font color="#000000">ps</font><font color="#0000C0">.</font><font color="#000000">get_particle</font><font color="#0000C0">(</font><font color="#0080C0">1</font><font color="#0000C0">)</font><font color="#0000C0">)</font>
<font color="#000000">m</font><font color="#0000C0">.</font><font color="#000000">add_restraint</font><font color="#0000C0">(</font><font color="#000000">r</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly


\code
IMP::core::Harmonic *uf= new IMP::core::Harmonic(0,1);
IMP::core::SphereDistancePairScore *df= new IMP::core::SphereDistancePairScore(uf);
IMP::core::PairRestraint* r= new IMP::core::PairRestraint(df, ps->get_particle(0), ps->get_particle(1));
m->add_restraint(r);
\endcode



\section i8 Preventing collisions
The ClosePairsScoreState maintains a list of all pairs of particles which contains all pairs closer than min distance (between the spheres). The HarmonicLowerBound forces the spheres apart.
\htmlonly
<pre><font face="Lucida,Courier New"><font color="#000000">nbl</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">ClosePairsScoreState</font><font color="#0000C0">(</font><font color="#000000">ps</font><font color="#0000C0">)</font>
<font color="#000000">nbl</font><font color="#0000C0">.</font><font color="#000000">set_distance</font><font color="#0000C0">(</font><font color="#000000">min_distance</font><font color="#0000C0">)</font>
<font color="#000000">m</font><font color="#0000C0">.</font><font color="#000000">add_score_state</font><font color="#0000C0">(</font><font color="#000000">nbl</font><font color="#0000C0">)</font>
<font color="#000000">h</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">HarmonicLowerBound</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">,</font><font color="#000000">min_distance</font><font color="#0000C0">)</font>
<font color="#000000">sd</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">SphereDistancePairScore</font><font color="#0000C0">(</font><font color="#000000">h</font><font color="#0000C0">)</font>
<font color="#000000">nbr</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">PairsRestraint</font><font color="#0000C0">(</font><font color="#000000">sd</font><font color="#0000C0">,</font> <font color="#000000">nbl</font><font color="#0000C0">.</font><font color="#000000">get_close_pairs_container</font><font color="#0000C0">(</font><font color="#0000C0">)</font><font color="#0000C0">)</font>
<font color="#000000">m</font><font color="#0000C0">.</font><font color="#000000">add_restraint</font><font color="#0000C0">(</font><font color="#000000">nbr</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly

\code
IMP::core::ClosePairsScoreState *nbl= new IMP::core::ClosePairsScoreState(ps);
nbl->set_distance(min_distance)
m->add_score_state(nbl);
IMP::core::HarmonicLowerBound* h= new IMP::core::HarmonicLowerBound(0,1);
IMP::core::SphereDistancePairScore *sd= new IMP::core::SphereDistancePairScore(h);
IMP::core::SingletonsRestraint* nbr= new IMP::core::SingletonsRestraint(sd, nbl->get_close_pairs_container());
m->add_restraint(nbr);
\endcode







\section i9 Restraining bonds

Load a protein and restrain all the bonds to have the correct length. Bond angles is a bit trickier at the moment.

\htmlonly
<pre><font face="Lucida,Courier New"><font color="#000000">prot</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">modeller</font><font color="#0000C0">.</font><font color="#000000">read_pdb</font><font color="#0000C0">(</font><font color="#004080">"some.pdb"</font><font color="#0000C0">)</font>
<font color="#000000">bds</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">get_internal_bonds</font><font color="#0000C0">(</font><font color="#000000">prot</font><font color="#0000C0">)</font>
<font color="#000000">ps</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">Particles</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
<font color="#C00000">for</font> <font color="#000000">b</font> <font color="#C00000">in</font> <font color="#000000">bds</font><font color="#0000C0">:</font>
    <font color="#000000">ps</font><font color="#0000C0">.</font><font color="#000000">append</font><font color="#0000C0">(</font><font color="#000000">b</font><font color="#0000C0">.</font><font color="#000000">get_particle</font><font color="#0000C0">(</font><font color="#0000C0">)</font><font color="#0000C0">)</font>
<font color="#000000">bl</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">ListSingletonContainer</font><font color="#0000C0">(</font><font color="#000000">ps</font><font color="#0000C0">)</font>
<font color="#000000">h</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">Harmonic</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">,</font><font color="#0080C0">1</font><font color="#0000C0">)</font>
<font color="#000000">bs</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">BondDecoratorSingletonScore</font><font color="#0000C0">(</font><font color="#000000">h</font><font color="#0000C0">)</font>
<font color="#000000">br</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">core</font><font color="#0000C0">.</font><font color="#000000">SingletonsRestraint</font><font color="#0000C0">(</font><font color="#000000">bs</font><font color="#0000C0">,</font> <font color="#000000">bl</font><font color="#0000C0">)</font>
<font color="#000000">m</font><font color="#0000C0">.</font><font color="#000000">add_restraint</font><font color="#0000C0">(</font><font color="#000000">br</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly

\code
// Currently you can't read a pdb from C++
IMP::core::MolecularHierarchyDecorator prot=???;
IMP::core::BondDecorators bds= IMP::core::get_internal_bonds(prot);
IMP::Particles ps(bds.size());
for (unsigned int i=0; i< bds.size(); ++i) ps[i]= bds[i].get_particle();
IMP::core::ListSingletonContainer *bl= new IMP::core::ListSingletonContainer(ps);
IMP::core::Harmonic *h= new IMP::core::Harmonic(0,1);
IMP::core::BondDecoratorSingletonScore* bs= new IMP::core::BondDecoratorSingletonScore(h);
IMP::core::SingletonsRestraint *br= new IMP::core::SingletonsRestraint(bs, bl);
m->add_restraint(br);
\endcode







\section i10 Simple optimization setup
A basic setup for optimizing a model.
\htmlonly
<pre><font face="Lucida,Courier New"><font color="#000000">m</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">:</font><font color="#0000C0">:</font><font color="#000000">Model</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
<font color="#000000">particles</font> <font color="#0000C0">=</font> <font color="#000000">setup_model</font><font color="#0000C0">(</font><font color="#000000">m</font><font color="#0000C0">)</font>
<font color="#000000">fname</font><font color="#0000C0">=</font> <font color="#004080">"/tmp/best_scoring_config.yaml"</font>
<font color="#000000">best_score</font><font color="#0000C0">=</font><font color="#0080C0">1000000</font>
<font color="#000000">o</font><font color="#0000C0">=</font> <font color="#000000">IMP</font><font color="#0000C0">.</font><font color="#000000">ConjugateGradients</font><font color="#0000C0">(</font><font color="#0000C0">)</font>
<font color="#000000">o</font><font color="#0000C0">.</font><font color="#000000">set_model</font><font color="#0000C0">(</font><font color="#000000">m</font><font color="#0000C0">)</font>
<font color="#C00000">for</font> <font color="#000000">i</font> <font color="#C00000">in</font> <font color="#000000">range</font><font color="#0000C0">(</font><font color="#0080C0">0</font><font color="#0000C0">,</font><font color="#0080C0">1000</font><font color="#0000C0">)</font><font color="#0000C0">:</font>
    <font color="#000000">randomize</font><font color="#0000C0">(</font><font color="#000000">particles</font><font color="#0000C0">)</font>
    <font color="#000000">score</font><font color="#0000C0">=</font><font color="#000000">o</font><font color="#0000C0">.</font><font color="#000000">optimize</font><font color="#0000C0">(</font><font color="#0080C0">1000</font><font color="#0000C0">)</font>
    <font color="#C00000">if</font> <font color="#000000">score</font> <font color="#0000C0">&lt;</font> <font color="#000000">best_score</font><font color="#0000C0">:</font>
        <font color="#000000">IMP</font><font color="#0000C0">:</font><font color="#0000C0">:</font><font color="#000000">core</font><font color="#0000C0">:</font><font color="#0000C0">:</font><font color="#000000">write_yaml</font><font color="#0000C0">(</font><font color="#000000">m</font><font color="#0000C0">,</font> <font color="#000000">fname</font><font color="#0000C0">)</font>
        <font color="#000000">best_score</font><font color="#0000C0">=</font> <font color="#000000">score</font>
<font color="#000000">IMP</font><font color="#0000C0">:</font><font color="#0000C0">:</font><font color="#000000">core</font><font color="#0000C0">:</font><font color="#0000C0">:</font><font color="#000000">read</font><font color="#0000C0">(</font><font color="#000000">fname</font><font color="#0000C0">,</font> <font color="#000000">m</font><font color="#0000C0">)</font><font color="#000000"></font></font></pre>
\endhtmlonly

\code
IMP::Pointer<IMP::Model> m= new IMP::Model();
IMP::Particles particles = setup_model(m);

std::string best;
float best_score=std::numeric_limits<IMP::Float>::infinity();

IMP::core::ConjugateGradients o;
o.set_model(m)
for (int i=0; i< 100; ++i) {
    randomize(particles)
    IMP::Float score=o.optimize(1000)
    if (score < best_score) {
       std::ostringstream oss;
       IMP::core::write(m, oss);
       best=oss.str();
       best_score= score;
    }
}
std::istringstream iss(best_score);
IMP::core::read(iss, m);
\endcode

\section i11 Writing a simple restraint
This is actually an IMP::core::SingletonsRestraint. You really wouldn't want to write such a thing in Python, although you can.

\code
class IMPDLLEXPORT MyRestraint: public IMP::Restraint {
      IMP::Pointer<IMP::SingletonScore> ss_;
      IMP::Pointer<IMP::core::SingletonContainer> sc_;
public:
        MyRestraint(IMP::SingletonScore *ss,
                    IMP::core::SingletonContainer *sc): ss_(ss),
                                                        sc_(sc){}
        IMP_RESTRAINT(my_version_info);
};

IMP::Float MyRestraint::evaluate(IMP::DerivativeAccumulator *da) {
      IMP::Float accum=0;
      for (IMP::core::SingletonContainer::ParticlesIterator it = sc_->particles_begin(); 
           it != sc_->particles_end(); ++it) {
          accum += ss_->evaluate(*it, da);
       }
       return accum;
}
IMP::Float MyRestraint::show(std::ostream &out) const {
      out << "MyRestraint on " << sc_->get_number_of_particles() << " particles" << std::endl;
}

IMP::ParticlesList
MyRestraint::get_interacting_particles() const
{
       return IMP::ParticlesList();
}

\endcode


\section i12 Available functionality

Look through the types inherited from these methods to get an idea of the functionality available.

- IMP::DecoratorBase
- IMP::Restraint
- IMP::SingletonScore
- IMP::PairScore
- IMP::TripletScore
- and check out the modules page for an orthogonal view




\section i13 C++ vs Python

Most code maps trivially from one to the other as you can see in the example.
- have to declare variables in C++
- need to know about smart pointers (use IMP::Pointer to store pointers)
- memory management is a bit of a mess in Python
- a few things can only be done in one language or the other (pdb files in python)

Debugging is much easier in C++.
- hard to inspect objects in python

Easier to experiment in Python.
- we don't have good doc strings though and no str(foo)

Recommendations:
- write restraints and decorators in C++
- never inherit from a C++ object in Python: the python wrapper we use does not manage memory properly.


\section i14 Conventions to be aware of

We have strict naming conventions. See \ref coding_conventions "our coding conventions page" for more information.

- Particles are passed around as pointers (rather than indexes).




\section i15 Getting started

Check out the wiki page to get started with IMP
https://salilab.org/imp/wiki/

*/

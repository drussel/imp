Import('env')

import os.path

dox = env.Doxygen("#/doc/html/index.html", "doxygen/doxygen.conf")
# Force the population of the build/include/ directory with generated headers
env.Depends(dox, ['#/build/include', 'doxygen/layout.xml'])

docdir = os.path.join(env['docdir'], 'doxygen')

# Install all files from 'dox' directory into the 'docdir' directory (cannot
# use env.InstallAs() right now, due to scons bug #1751)
env.Command(Dir(env.subst(docdir)), dox,
            "install -d $TARGET && install ${SOURCE.dir}/* $TARGET")

# Generate doxygen.conf from doxygen.conf.in
def generate_doxygen(target, source, env):
    infile = file(source[0].path, 'r')
    outfile = file(target[0].path, 'w')
    print >> outfile, "# Auto-generated by SConscript; do NOT edit directly!"
    print >> outfile, "# Edit %s instead\n" % source[0].path
    for line in infile:
        if '@ALL_MODULES@' in line:
            # Expand out ALL_MODULES to a list of all modules, one per line
            for mod in env['IMP_MODULES_ALL']:
                outfile.write(line.replace('@ALL_MODULES@', mod))
        else:
            outfile.write(line)
    infile.close()
    outfile.close()
    env.Execute("./kernel/doc/bin/make-examples")

env.Append(BUILDERS = {'GenerateDoxygen': Builder(action=generate_doxygen)})
gd=env.GenerateDoxygen("doxygen/doxygen.conf", "doxygen/doxygen.conf.in")
env.Depends(gd, Glob("inputs/*.in"))

Return('dox')

/** 
    \page conventions Conventions

    To ensure consistency and ease of use, certain conventions should be
    adhered to when writing code using or in \imp.

    \section physical Measurements
    Unless these is a good reason, the following units are be used
    - angstrom for all distances
    - kcal/mol angstrom for forces/derivatives
    - kcal/mol for energies
    - radians for angles. All angles are counterclockwise.

    Anything that breaks from these conventions must be labeled
    clearly and accompanied by an explaination of why the normal units
    could not be used.

    \section storage Passing and storing data

    - 3D points and vectors are stored and passed using
      IMP::algebra::Vector3D objects.

    - 3D rotations are stored and passed using
      IMP::algebra::Rotation3D objects.

    - Likewise for spheres (IMP::algebra::Sphere3D), segments
      (IMP::algebra::Segment3D) etc.

    - Collections of object \c Name are passed using the type \c Names. For
    example, a bunch of IMP::algebra::Vector3D objects is passed using
    a IMP::algebra::Vector3Ds type, and a bunch of IMP::Restraint
    objects is passed using IMP::Restraints (or, equivalently
    IMP::RestraintsTemp).

    \section names Names in IMP
    - Class names are be in \c CamelCase, for example \c class \c SpecialVector'
    - For each type of object in \imp, \c Name, there is a type \c Names
      which is used to pass a list of objects of type \c Name. \c Names
      look like an \c std::vector in C++ or a \c list in Python. Sometimes,
      for efficiency, a \c NamesTemp is passed instead
      (see \ref tempornot "when to use Temp values" for the reason). \c Names
      will be converted into \c NamesTemp without cost, so the distinction
      should not matter for the caller.
    - method names and variables should be \c separated_by_underscores, for
      example \c void \c SpecialVector::add_constant(int the_constant)'
    - member methods that change a value begin with \c set_
    - member methods which return a value begin with \c get_
    - all preprocessor symbols (things created by \c \#define) begin with \c %IMP_
    - Abbreviations are not used in names except when the abbreviation is more
    common than the unabreviated name.

    \section objects Values and Objects
    \anchor values
    As is conventional in C++, \imp classes are divided into two types
    - value classes which are be passed, stored, and returned by value
      (or, for speed, \c const&). Examples include IMP::algebra::Vector3D,
      collections such as IMP::Restraints or IMP::RestraintsTemp, or
      decorators, such as IMP::core::XYZ.

    - object classes which are passed and returned via pointers and
      stored using reference counted pointers (eg IMP::Pointer). In
      \imp, these classes all inherit from IMP::Object.
      \anchor tempornot Since reference counting can be expensive,
      it can be useful to pass, return or store a non-reference
      counted list of objects (or IMP::Decorator). This should only
      be done when it is known to be safe. If you can't figure out
      that it is, don't do it. If it is safe, pass a \c NamesTemp
      instead of a \c Names.  

    Python does not have this distinction.


    \section errors Errors
    Classes and methods use IMP exceptions to report errors. See
    IMP::Exception for a list of existing exceptions. These C++
    exceptions are mapped onto the normal python exception types.

*/

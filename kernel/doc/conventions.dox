/** 
    \page conventions Conventions

    To ensure consistency and ease of use, certain conventions should be
    adhered to when writing code for \imp.

    \section physical Measurements
    Unless these is a good reason, the following units are be used
    - angstrom for all distances
    - kcal/mol angstrom for forces/derivatives
    - kcal/mol for energies
    - radians for angles. All angles are counterclockwise.

    Anything that breaks from these conventions must be labeled clearly and accompanied
    by an explaination of why the normal units could not be used.

    \section storage Passing and storing data
    - 3D points and vectors are stored and passed using IMP::algebra::Vector3D objects.
    - 3D rotations are stored and passed using IMP::algebra::Rotation3D objects.
    - Likewise for spheres (IMP::algebra::Sphere3D), segments (IMP::algebra::Segment3D) etc.
    - Collections of object Foo are passed using the type Foos. For example,
    a bunch of IMP::algebra::Vector3D objects is passed using a IMP::algebra::Vector3Ds
    type, and a bunch of IMP::Restraint objects is passed using IMP::Restraints.

    \section objects Objects and data
    Classes in IMP are divided into two groups
    - Objects classes which inherit from IMP::Object. Such objects are passed using
    pointers. In C++ they must be created using \c new and stored using IMP::Pointer
    objects to make sure they are only deleted when unused. See IMP::RefCounted for
    more info. These all have a IMP::Object::show() method and an
    IMP::Object::get_version_info() method.
    - data objects which do not inherit from IMP::Object. These are passed by value or
    \c const reference and copies of them should be stored when they are stored. Data
    objects are never passed using pointers. Data objects are divided into several
    groups based on what the default contructor does. The groups \ref uninitialized_default, \ref null_default, \ref valid_default.

    \section names Names in IMP
    - Class names are be in \c CamelCase, for example '\ class \c SpecialVector'
    - method names and variables should be \c separated_by_underscores, for
      example '\c void \c SpecialVector::add_constant(int the_constant)'
    - member methods that change a value begin with \c set_
    - member methods which return a value begin with \c get_
    - all preprocessor symbols (things created by \c \#define) begin with \c %IMP_
    - Abbreviations are not used in names except when the abbreviation is more
    common than the unabreviated name.

    \section errors Errors
    Classes and methods use IMP exceptions to report errors. See
    IMP::Exception for a list of existing exceptions.

*/

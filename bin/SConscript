Import('env')
import sys

# Custom builder to generate file:
def builder_script_file(target, source, env):
    infile = file(source[0].abspath, 'r')
    outfile = file(target[0].abspath, 'w')

    sep=":"
    varname=None
    if env['PLATFORM'] == 'posix' or env['PLATFORM']=='sunos':
        varname= "LD_LIBRARY_PATH"
    elif env['PLATFORM'] == 'win32':
        sep=";"

    print "Platform is "+env['PLATFORM']+ " "+ sys.platform
    for line in infile:
        line = line.rstrip('\r\n')
        if line == "@LDPATH@":
            if varname is not None:
                line= varname+"='"+source[1].get_contents()+"/build/lib'"
                line=line+"\nexport "+varname
            else:
                line=""
        if line == "@PYTHONPATH@":
            line= "PYTHONPATH='"+source[1].get_contents()+"/build/lib"+sep+source[2].get_contents().replace(":", sep)+"'\nexport PYTHONPATH"
        if line == "@MODPY@":
            if len(source[3].get_contents())!=0:
                line = "modeller_init_script='" + source[3].get_contents()+"'"
            else:
                line=""
        print >> outfile, line
    outfile.close()
    infile.close()
    env.Execute(Chmod(str(target[0]), 0755))

env.Append(BUILDERS = {'ScriptFile': Builder(action=builder_script_file)})

bin = env.ScriptFile("imppy.sh",
                     ["imppy.sh.in", env.Value(env.Dir('#').abspath),
                      env.Value(env.get('pythonpath', "")),
                      env.Value(env['MODELLER_MODPY'])])

env.AlwaysBuild("imppy.sh")

Return('bin')

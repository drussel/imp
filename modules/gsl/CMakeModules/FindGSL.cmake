# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED GSL_LIBRARIES)
message(STATUS "Checking for GSL")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(GSL_PKGCONF gsl)

# Include dir
find_path(GSL_INCLUDE_DIR
  NAMES gsl/gsl_sf_bessel.h
  PATHS ${GSL_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib gsl gslcblas)
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${GSL_PKGCONF_LIBRARY_DIRS}
)
set(GSL_LIBRARY ${GSL_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(GSL_PROCESS_INCLUDES GSL_INCLUDE_DIR)
set(GSL_PROCESS_LIBS GSL_LIBRARY)
libfind_process(GSL)

if ("${GSL_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${GSL_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "GSL not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/GSL" "ok=False")
else()
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_LIBRARIES "${GSL_LIBRARY}")
  set(CMAKE_REQUIRED_INCLUDES "${GSL_INCLUDE_DIR}")
  set(body "#include <gsl/gsl_sf_bessel.h>
int main(int,char*[]) {
  gsl_sf_bessel_J0(1.0);
  return 0;
}")
  check_cxx_source_compiles("${body}"
 GSL_COMPILES)
  if ("GSL_COMPILES" MATCHES "1")
    message(STATUS "GSL found " ${GSL_INCLUDE_DIR} " " ${GSL_LIBRARY})
    #set(GSL_LINK_PATH ${GSL_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
    set(GSL_INCLUDE_PATH ${GSL_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    set(GSL_LIBRARIES ${GSL_LIBRARY} CACHE INTERNAL "" FORCE)
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/GSL" "ok=True
includepath=\"${GSL_INCLUDE_PATH}\"
swigpath=\"${GSL_SWIG_PATH}\"
libpath=\"${GSL_LIB_PATH}\"
")
  else()
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/GSL" "ok=False")
  endif()
endif()

else()
message(STATUS "GSL already setup")

endif(NOT DEFINED GSL_LIBRARIES)

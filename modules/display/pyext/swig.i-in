

IMP_SWIG_BASE_OBJECT(IMP::display, Writer, Writers);
IMP_SWIG_BASE_OBJECT(IMP::display, TextWriter, TextWriters);
IMP_SWIG_BASE_OBJECT(IMP::display, Geometry, Geometries);
IMP_SWIG_OBJECT(IMP::display, SingletonGeometry, SingletonGeometries);
IMP_SWIG_OBJECT(IMP::display, PairGeometry, PairGeometries);
IMP_SWIG_OBJECT(IMP::display, SingletonsGeometry, SingletonsGeometries);
IMP_SWIG_OBJECT(IMP::display, PairsGeometry, PairsGeometries);
IMP_SWIG_OBJECT(IMP::display, BildWriter, BildWriters);
IMP_SWIG_OBJECT(IMP::display, ChimeraWriter, ChimeraWriters);
IMP_SWIG_OBJECT(IMP::display, CMMWriter, CMMWriters);
IMP_SWIG_OBJECT(IMP::display, PymolWriter, PymolWriters);
IMP_SWIG_OBJECT(IMP::display, SphereGeometry, SphereGeometries);
IMP_SWIG_OBJECT(IMP::display, CylinderGeometry, CylinderGeometries);
IMP_SWIG_OBJECT(IMP::display, EllipsoidGeometry, EllipsoidGeometries);
IMP_SWIG_OBJECT(IMP::display, PointGeometry, PointGeometries);
IMP_SWIG_OBJECT(IMP::display, SegmentGeometry, SegmentGeometries);
IMP_SWIG_OBJECT(IMP::display, PolygonGeometry, PolygonGeometries);
IMP_SWIG_OBJECT(IMP::display, ReferenceFrameGeometry, ReferenceFrameGeometries);
IMP_SWIG_OBJECT(IMP::display, BoundingBoxGeometry, BoundingBoxGeometries);
IMP_SWIG_OBJECT(IMP::display, LabelGeometry, LabelGeometries);
IMP_SWIG_OBJECT(IMP::display, RestraintGeometry, RestraintGeometries);
IMP_SWIG_OBJECT(IMP::display, CompoundGeometry, CompoundGeometries);
IMP_SWIG_DECORATOR(IMP::display, Colored, Coloreds);
IMP_SWIG_VALUE(IMP::display, Color, Colors);
IMP_SWIG_VALUE(IMP::display, WriterOutput, WriterOutputs);
IMP_SWIG_OBJECT(IMP::display, FilterGeometry, FilterGeometries);
IMP_SWIG_OBJECT(IMP::display, WriteOptimizerState, WriteOptimizerStates);
//IMP_SWIG_OBJECT(IMP::display, WriteFailureHandler, WriteFailureHandlers);
IMP_SWIG_OBJECT(IMP::display, TriangleGeometry, TriangleGeometries);
IMP_SWIG_OBJECT(IMP::display, SurfaceMeshGeometry, SurfaceMeshGeometries);

#ifdef IMP_DISPLAY_USE_IMP_CGAL
IMP_SWIG_OBJECT(IMP::display, PlaneGeometry, PlaneGeometries);
IMP_SWIG_OBJECT(IMP::display, IsosurfaceGeometry, IsosurfaceGeometries);
IMP_SWIG_OBJECT(IMP::display, SkinSurfaceGeometry, SkinSurfaceGeometries);
#endif

namespace IMP {
namespace display {
%implicitconv WriterOutput;
}
}


%warnfilter(403) Geometry;
%warnfilter(403) Writer;
%warnfilter(403) SingletonGeometry;
%warnfilter(403) SingletonsGeometry;
%warnfilter(403) PairGeometry;
%warnfilter(403) PairsGeometry;
%warnfilter(403) TextWriter;


/* Wrap our own classes */
%include "IMP/display/display_macros.h"
%include "IMP/display/Color.h"
%include "IMP/display/geometry.h"
%include "IMP/display/GeometryProcessor.h"
%include "IMP/display/Writer.h"

%include "IMP/display/BildWriter.h"
%include "IMP/display/ChimeraWriter.h"
%include "IMP/display/CMMWriter.h"
%include "IMP/display/Colored.h"
%include "IMP/display/FilterGeometry.h"
%include "IMP/display/LogOptimizerState.h"
%include "IMP/display/particle_geometry.h"
%include "IMP/display/PymolWriter.h"
%include "IMP/display/restraint_geometry.h"

%pythoncode %{
import sys
import pivy.sogui
import pivy.coin

class PivyWriter(Writer):
  def __init__(self):
    IMP.display.Writer.__init__(self, "pivy")
    self._setup_pivy()
  def _setup_pivy(self):
    import pivy.sogui
    import pivy.coin
    myWindow = pivy.sogui.SoGui.init(sys.argv[0])
    if myWindow == None:
        raise RuntimeError("Can't open PiVy window.")
    self.window=myWindow
    scene = pivy.coin.SoSeparator()

    # Create a viewer in which to see our scene graph.
    viewer = pivy.sogui.SoGuiExaminerViewer(myWindow)

    # Put our scene into viewer, change the title
    viewer.setSceneGraph(scene)
    viewer.setTitle("IMP")
    viewer.show()
    self.root=scene
    self.viewer=viewer
  def handle_color(self, parent, c):
    color= pivy.coin.SoMFColor()
    color.setValue(c.get_red(), c.get_green(), c.get_blue())
    myMaterial = pivy.coin.SoMaterial()
    myMaterial.diffuseColor.setValue(color)
    parent.addChild(myMaterial)
  def handle_sphere(self, s, c, n):
    sep = pivy.coin.SoSeparator()
    self.root.addChild(sep)
    s.set_was_used(True)
    self.handle_color(sep, c)
    tr= pivy.coin.SoTransform()
    tr.translation.setValue(s.get_geometry().get_center()[0],
                            s.get_geometry().get_center()[1],
                            s.get_geometry().get_center()[2])
    tr.scaleFactor.setValue(s.get_geometry().get_radius(),
                            s.get_geometry().get_radius(),
                            s.get_geometry().get_radius())
    sep.addChild(tr)
    sphere=pivy.coin.SoSphere()
    sep.addChild(sphere)
    return True
  def handle_cylinder(self, s, c, n):
    s.set_was_used(True)
    sep = pivy.coin.SoSeparator()
    self.root.addChild(sep)
    self.handle_color(sep, c)
    tr= pivy.coin.SoTransform()
    cyl= s.get_geometry()
    seg=cyl.get_segment()
    center= seg.get_middle_point()
    #tr.translation.setValue(pivy.coin.SbVec3f(0, seg.get_length()/2, 0))
    tr.translation.setValue(pivy.coin.SbVec3f(center[0], center[1], center[2]))
    #tr.center.setValue(pivy.coin.SbVec3f(center[0], center[1], center[2]))
    uv= seg.get_direction().get_unit_vector()
    tr.rotation.setValue(pivy.coin.SbRotation(pivy.coin.SbVec3f(0,1,0),
                                              pivy.coin.SbVec3f(uv[0],uv[1],uv[2])))
    #print "tr", tr.translation.getValue()[0], tr.translation.getValue()[1], tr.translation.getValue()[2]
    #print "scale", tr.scaleFactor.getValue()[0],  tr.scaleFactor.getValue()[1],  tr.scaleFactor.getValue()[2]
    # tr.rotation.getValue()
    sep.addChild(tr)
    sphere=pivy.coin.SoCylinder()
    sphere.radius.setValue(cyl.get_radius())
    sphere.height.setValue(cyl.get_segment().get_length())
    #sphere.addPart(pivy.coin.SoCylinder.ALL)
    sep.addChild(sphere)
    return True
  def show(self):
    self.set_was_used(True)
    pivy.sogui.SoGui.show(self.window) # Display main window
    pivy.sogui.SoGui.mainLoop()
%}
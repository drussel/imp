/**
 *  \file FilteredListGroupnameContainer.h
 *  \brief Store a list of Classnames filtered based on another list
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_FILTERED_LIST_GROUPNAME_CONTAINER_H
#define IMPCORE_FILTERED_LIST_GROUPNAME_CONTAINER_H

#include "config.h"
#include "internal/version_info.h"
#include <IMP/GroupnameContainer.h>
#include <IMP/container_macros.h>

IMP_BEGIN_NAMESPACE

typedef GroupnameContainers GroupnameFilters;

IMP_END_NAMESPACE

IMPCORE_BEGIN_NAMESPACE

//! Store a list of Classnames filtered by other lists
/** This class stores a list of Classnames and a list of
    GroupnameContainers with the invariant that none of the
    GroupnameContainers contain any of the Classnames stored.

    \note Currently the filter is only applied upon addition
    of a Value to the container. So adding more sets to the
    filter afterwards won't remove objects. Nor will changing
    the filtering sets.

    \note The indexes can change when particles are inserted
    as the list is maintained in sorted order.

    \see ListGroupnameContainer
 */
class IMPCOREEXPORT FilteredListGroupnameContainer
  : public GroupnameContainer
{
  std::vector<Value> data_;
public:
  //! cannot pass a Groupnames on construction
  FilteredListGroupnameContainer();

  IMP_GROUPNAME_CONTAINER(FilteredListGroupnameContainer,
                          internal::version_info);

  //! Add vt if none of the referenced containers already contains it
  void add_classname(Value vt);

  //! remove all objects from the container
  void clear_classnames() {
    data_.clear();
  }
 /** @name Methods to control the set of filters

     GroupnameContainer objects can be used as filters to prevent
     the addition of Classname objects to the container. Every
     time someone requests to add a Classname object, the container
     checks each GroupnameContainer in the GroupnameFilter list to
     see of any of the filters contain an identical object using the
     GroupnameContainer::get_contains_classname() call. If true is
     returned, the object is not added to this container.
  */
  /**@{*/
  IMP_LIST(public, GroupnameFilter, groupname_filter,
           GroupnameContainer*);
   /**@}*/
};


IMPCORE_END_NAMESPACE

#endif  /* IMPCORE_FILTERED_LIST_GROUPNAME_CONTAINER_H */

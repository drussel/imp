/**
 *  \file GroupnameContainer.h    \brief A container for classnames.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_GROUPNAME_CONTAINER_H
#define IMPCORE_GROUPNAME_CONTAINER_H

#include "config.h"
#include "internal/IndexingIterator.h"
#include "internal/container_helpers.h"
#include "Particle.h"
#include "utility.h"
#include "VersionInfo.h"
#include "base_types.h"
#include "Pointer.h"
#include "VectorOfRefCounted.h"
#include "VersionInfo.h"

IMP_BEGIN_NAMESPACE

//! A shared container for classnames
/** Stores a searchable shared collection of classnames.
    \ingroup restraints
 */
class IMPEXPORT GroupnameContainer : public Object
{
  struct Accessor: public NullDefault {
    typedef Accessor This;
    typedef Value result_type;
    typedef unsigned int argument_type;
    result_type operator()(argument_type i) const {
      return o_->get_classname(i);
    }
    Accessor(GroupnameContainer *pc): o_(pc){}
    Accessor(): o_(NULL){}
    IMP_COMPARISONS_1(o_);
  private:
    // This should be ref counted, but swig memory management is broken
    GroupnameContainer* o_;
  };

public:
  GroupnameContainer();

  /** \note This function may be linear. Be aware of the complexity
      bounds of your particular container.
   */
  virtual bool get_contains_classname(Value p) const =0;
  //! return the number of classnames in the container
  /** \note this isn't always constant time
   */
  virtual unsigned int get_number_of_classnames() const =0;

  virtual Value get_classname(unsigned int i) const=0;

#ifdef IMP_DOXYGEN
  //! An iterator through the contents of the container
  class ClassnameIterator;
#else
  typedef internal::IndexingIterator<Accessor> ClassnameIterator;
#endif
  //! begin iterating through the classnames
  ClassnameIterator classnames_begin() const {
    // Since I can't make the count mutable in Object
    return
      ClassnameIterator(Accessor(const_cast<GroupnameContainer*>(this)),
                        0);
  }
  //! iterate through the classnames
  ClassnameIterator classnames_end() const {
    return
      ClassnameIterator(Accessor(const_cast<GroupnameContainer*>(this)),
                        get_number_of_classnames());
    }

  IMP_REF_COUNTED_DESTRUCTOR(GroupnameContainer)
};

IMP_OUTPUT_OPERATOR(GroupnameContainer);

//! A collection of containers
typedef VectorOfRefCounted<GroupnameContainer*> GroupnameContainers;

IMP_END_NAMESPACE

#endif  /* IMPCORE_GROUPNAME_CONTAINER_H */

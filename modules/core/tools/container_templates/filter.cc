/**
 *  \file FilteredListGroupnameContainer.cpp
 *  \brief Simple xyzr decorator.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#include "IMP/core/FilteredListGroupnameContainer.h"
#include <algorithm>


IMPCORE_BEGIN_NAMESPACE

namespace {

  class Found {
    typedef FilteredListGroupnameContainer
    ::GroupnameFilterConstIterator It;
    It b_,e_;
  public:
    Found(It b,
          It e):
      b_(b), e_(e){}
    bool operator()(Value vt) const {
      for (It c=b_; c != e_; ++c) {
        if ((*c)->get_contains_classname(vt)) return true;
      }
      return false;
    }
  };

}

FilteredListGroupnameContainer
::FilteredListGroupnameContainer(): sorted_(true){
}

void FilteredListGroupnameContainer::add_classname(Value vt) {
  IMP_CHECK_OBJECT(this);
  // For VC which can't convert the iterators
  const FilteredListGroupnameContainer *cthis=
    const_cast<const FilteredListGroupnameContainer*>(this);
  if (!Found(cthis->groupname_filters_begin(),
             cthis->groupname_filters_end())(vt)) {
    data_.push_back(vt);
    if (sorted_) {
      std::sort(data_.begin(), data_.end());
    }
  }
}

bool
FilteredListGroupnameContainer
::get_contains_classname(Value vt) const {
  IMP_check(sorted_, "Cannot check if the container contains an object "
            << "while you are editing it.", InvalidStateException);
  return std::binary_search(classnames_begin(),
                            classnames_end(), vt);
}

void FilteredListGroupnameContainer::show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << "FilteredListGroupnameContainer with "
      << get_number_of_classnames()
      << " classnames." << std::endl;
}


void FilteredListGroupnameContainer::set_is_editing(bool tf) {
  if (tf== !sorted_) return;
  else {
    sorted_=!tf;
    if (sorted_) {
      std::sort(data_.begin(), data_.end());
    }
  }
}

unsigned int
FilteredListGroupnameContainer::get_number_of_classnames() const {
  return data_.size();
}

Value
FilteredListGroupnameContainer::get_classname(unsigned int i) const {
  IMP_check(i < get_number_of_classnames(),
            "Out of range " << i << " for array of size " << data_.size(),
            IndexException);
  return data_[i];
}



IMP_LIST_IMPL(FilteredListGroupnameContainer,
              GroupnameFilter,
              groupname_filter,
              GroupnameContainer*,,,)

IMPCORE_END_NAMESPACE

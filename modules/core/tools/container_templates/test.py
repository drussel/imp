import unittest
import IMP
import IMP.test
import IMP.utils
import IMP.core
import math


def singleton_cmp(a,b):
    return cmp(a.get_index().get_index(), b.get_index().get_index())

def pair_cmp(a,b):
    v0= cmp(a[0].get_index().get_index(), b[0].get_index().get_index())
    if v0 != 0: return v0
    return cmp(a[1].get_index().get_index(), b[1].get_index().get_index())

def triplet_cmp(a,b):
    v0= cmp(a[0].get_index().get_index(), b[0].get_index().get_index())
    if v0 != 0: return v0
    return pair_cmp([a[1].get_index().get_index(), a[2].get_index().get_index()],
                    [b[1].get_index().get_index(), b[2].get_index().get_index()])


def evaluate_singleton_score(f, s):
    return f.evaluate(s, None)
def evaluate_pair_score(f, s):
    return f.evaluate(s[0], s[1], None)
# This file is generated by the make-container script

class ClassnameContainerTest(IMP.test.TestCase):
    """Tests for GroupnameContainer related objects"""

    def create_particle(self,m):
        p= IMP.Particle()
        m.add_particle(p)
        p.add_attribute(IMP.FloatKey("thekey"), 1)
        return p

    def create_particle_pair(self,m):
        p0= IMP.Particle()
        m.add_particle(p0)
        p1= IMP.Particle()
        m.add_particle(p1)
        d0= IMP.core.XYZDecorator.create(p0)
        d1= IMP.core.XYZDecorator.create(p1)
        d0.set_coordinates(IMP.Vector3D(0,0,1))
        d1.set_coordinates(IMP.Vector3D(0,0,0))
        return IMP.ParticlePair(p0,p1)

    def same_particle(self, a, b):
        print str(a.get_index().get_index())+ " vs " + str(b.get_index().get_index())
        return a.get_index().get_index() == b.get_index().get_index()

    def same_particle_pair(self, a,b):
        print str(a[0].get_index().get_index())+ ", "\
            + str(a[1].get_index().get_index()) + " vs " \
            + str(b[0].get_index().get_index()) + ", "\
            + str(b[1].get_index().get_index())
        return self.same_particle(a[0], b[0]) and self.same_particle(a[1], b[1])

    def create_particle_score(self):
        uf= IMP.core.Linear(0,1)
        return IMP.core.AttributeSingletonScore(uf,IMP.FloatKey("thekey"))

    def create_particle_pair_score(self):
        uf= IMP.core.Linear(0,1)
        return IMP.core.DistancePairScore(uf)


    def test_restraint(self):
        """Test the GroupnamesRestraint"""
        m= IMP.Model()
        c= IMP.core.ListGroupnameContainer()
        for i in range(0,10):
            c.add_classname(self.create_classname(m))
            r= IMP.core.GroupnamesRestraint(self.create_classname_score(), c)
            r.set_was_owned(True)
        m.add_restraint(r)
        self.assertEqual(m.evaluate(False), 10)
        c.add_classname(self.create_classname(m))
        self.assertEqual(m.evaluate(False), 11)

    def test_min_restraint(self):
        """Test the MinimumGroupnameScoreRestraint"""
        m= IMP.Model()
        c= IMP.core.ListGroupnameContainer()
        for i in range(0,10):
            c.add_classname(self.create_classname(m))
        print c.get_number_of_classnames()
        d= IMP.core.DistanceGroupnameScore(IMP.core.Linear(0,1))
        r= IMP.core.MinimumGroupnameScoreRestraint(d, c)
        self.assert_(not d.thisown)
        self.assert_(not c.thisown)
        r.set_n(4)
        m.add_restraint(r)
        f= m.evaluate(False)
        print f
        ms= [];
        print c.get_number_of_classnames()
        for i in range(0,10):
            ps= c.get_classname(i)
            cm= evaluate_groupname_score(d, ps)
            ms.append(cm)
        print ms
        ms.sort()
        mt=0;
        for i in range(0, 4):
            mt = mt+ ms[i]
        print mt
        self.assertInTolerance(mt, f, .1*f)

    def test_max_restraint(self):
        """Test the MaximumGroupnameScoreRestraint"""
        m= IMP.Model()
        c= IMP.core.ListGroupnameContainer()
        for i in range(0,10):
            c.add_classname(self.create_classname(m))
        print c.get_number_of_classnames()
        d= IMP.core.DistancePairScore(IMP.core.Linear(0,1))
        r= IMP.core.MaximumGroupnameScoreRestraint(d, c)
        self.assert_(not d.thisown)
        self.assert_(not c.thisown)
        r.set_n(4)
        m.add_restraint(r)
        f= m.evaluate(False)
        print f
        ms= [];
        print c.get_number_of_classnames()
        for i in range(0,10):
            ps= c.get_classname(i)
            cm= evaluate_groupname_score(d, ps)
            ms.append(cm)
        print ms
        ms.sort()
        mt=0;
        for i in range(0, 4):
            mt = mt+ ms[-i]
        print mt
        self.assertInTolerance(mt, f, .1*f)


    def test_container(self):
        """Test backwards compatibility on GroupnamesRestraint"""
        m= IMP.Model()
        r= IMP.core.GroupnamesRestraint(self.create_classname_score())
        m.add_restraint(r)

        for i in range(0,10):
            r.add_classname(self.create_classname(m))
        self.assertEqual(m.evaluate(False), 10)
        r.add_classname(self.create_classname(m))
        self.assertEqual(m.evaluate(False), 11)

    def test_filter(self):
        """Testing FilteredListGroupnameContainer"""
        IMP.set_log_level(IMP.VERBOSE)
        m= IMP.Model()
        c= IMP.core.FilteredListGroupnameContainer()
        f= IMP.core.ListGroupnameContainer()
        print "add"
        f.show()
        c.add_groupname_container(f)
        print "assert"
        f.show()
        self.assert_(not f.thisown)
        print "range"
        for i in range(0,10):
            print "filter add"
            f.add_classname(self.create_classname(m))
        print "done 1"
        for i in range(0,10):
            c.add_classname(self.create_classname(m))
        print "done 2"
        for p in f.get_classnames():
            print "adding one"
            c.add_classname(p)
        self.assertEqual(c.get_number_of_classnames(), 10)
        print "all done"

    def test_set(self):
        """Testing GroupnameContainerSet"""
        IMP.set_log_level(IMP.VERBOSE)
        m= IMP.Model()
        print "hi"
        c= IMP.core.GroupnameContainerSet()
        ls=[]
        cs=[]
        for i in range(0,3):
            l= IMP.core.ListGroupnameContainer()
            c.add_groupname_container(l)
            for j in range(0,3):
                t=self.create_classname(m)
                l.add_classname(t)
                cs.append(t)
        for p in cs:
            self.assert_(c.get_contains_classname(p))
        ret=[]
        for i in range(0, len(cs)):
            ret.append(c.get_classname(i))
        ret.sort(groupname_cmp)
        #print ret
        cs.sort(groupname_cmp)
        #print cs
        for i in range(0, len(ret)):
            self.assertEqual(groupname_cmp(ret[i], cs[i]), 0)
        self.assertEqual(c.get_number_of_classnames(), len(cs))

if __name__ == '__main__':
    unittest.main()

# Autogenerated file, run tools/build/setup_cmake.py to regenerate

include_directories(${ANN_INCLUDE_PATH}
        ${BOOST.FILESYSTEM_INCLUDE_PATH}
        ${BOOST.PROGRAMOPTIONS_INCLUDE_PATH}
        ${BOOST.RANDOM_INCLUDE_PATH}
        ${BOOST.SYSTEM_INCLUDE_PATH}
        ${CGAL_INCLUDE_PATH}
        ${GPERFTOOLS_INCLUDE_PATH}
        ${LOG4CXX_INCLUDE_PATH}
        ${TCMALLOC_HEAPCHECKER_INCLUDE_PATH}
        ${TCMALLOC_HEAPPROFILER_INCLUDE_PATH})
link_directories(${ANN_LINK_PATH}
        ${BOOST.FILESYSTEM_LINK_PATH}
        ${BOOST.PROGRAMOPTIONS_LINK_PATH}
        ${BOOST.RANDOM_LINK_PATH}
        ${BOOST.SYSTEM_LINK_PATH}
        ${CGAL_LINK_PATH}
        ${GPERFTOOLS_LINK_PATH}
        ${LOG4CXX_LINK_PATH}
        ${TCMALLOC_HEAPCHECKER_LINK_PATH}
        ${TCMALLOC_HEAPPROFILER_LINK_PATH})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CORE_CXX_FLAGS}")


File(GLOB runtimepytests "${PROJECT_BINARY_DIR}/test/core/test_*.py")


# should make into function
foreach (test ${runtimepytests} ${PROJECT_SOURCE_DIR}/modules/core/test/test_angle.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_blame.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_box.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_centroid.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_cg_optimizer.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_children.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_close_pair_finders.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_close_pairs_ps.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_connectivity.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_cosine.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_cover.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_cover_refiner.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_destroy_rigid_body.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_diameter.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_dihedral.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_display_deriv.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_distance.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_ev.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_geom_alignment.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_harmonic.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_hierarchy.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_incremenal_mc.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_incremenal_scoring.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_linear.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_mccg.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_ms_connectivity.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_nested_rigid_bodies.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_null_scoring_function.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_periodic_os.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_refined_pairs_ps.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_restraints_scoring_function.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_rigid_bodies.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_rigid_distance.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_score_log.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_sd_optimizer.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_set_internal_coordinates.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_splines.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_table.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_to_from_refined.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_transform.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_transform_particles.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_truncated_harmonic.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_typed_pair_score.py
${PROJECT_SOURCE_DIR}/modules/core/test/test_xyzr.py)
  GET_FILENAME_COMPONENT(name ${test} NAME_WE)
  if(EXISTS "${PROJECT_BINARY_DIR}/test/core/${name}.pytests")
    FILE(READ "${PROJECT_BINARY_DIR}/test/core/${name}.pytests" contents)
    STRING(REGEX REPLACE ";" "\\\\;" contents "${contents}")
    STRING(REGEX REPLACE "\n" ";" contents "${contents}")
    foreach(testline ${contents})
      string(REGEX REPLACE "([A-Za-z0-9_]+\\.[A-Za-z0-9_]+) (.*)"
                           "\\1;\\2" split "${testline}")
      list(GET split 0 methname)
      list(GET split 1 docstring)
      add_test("core.${name}.${methname}" ${IMP_TEST_SETUP} python ${test} "${methname}")
      set_tests_properties("core.${name}.${methname}" PROPERTIES LABELS "IMP.core;test")
      set_tests_properties("core.${name}.${methname}" PROPERTIES MEASUREMENT "docstring=${docstring}")
      set_tests_properties("core.${name}.${methname}" PROPERTIES TIMEOUT 5)
    endforeach()
  else()
    add_test("core.${name}" ${IMP_TEST_SETUP} python ${test})
    set_tests_properties("core.${name}" PROPERTIES LABELS "IMP.core;test")
    set_tests_properties("core.${name}" PROPERTIES TIMEOUT 20)
  endif()
endforeach(test)

foreach (test ${PROJECT_SOURCE_DIR}/modules/core/test/expensive_test_ev_restraint.py
${PROJECT_SOURCE_DIR}/modules/core/test/expensive_test_mc.py
${PROJECT_SOURCE_DIR}/modules/core/test/expensive_test_mc_rigid.py
${PROJECT_SOURCE_DIR}/modules/core/test/expensive_test_volume.py)
  GET_FILENAME_COMPONENT(name ${test} NAME_WE)
  if(EXISTS "${PROJECT_BINARY_DIR}/test/core/${name}.pytests")
    FILE(READ "${PROJECT_BINARY_DIR}/test/core/${name}.pytests" contents)
    STRING(REGEX REPLACE ";" "\\\\;" contents "${contents}")
    STRING(REGEX REPLACE "\n" ";" contents "${contents}")
    foreach(testline ${contents})
      string(REGEX REPLACE "([A-Za-z0-9_]+\\.[A-Za-z0-9_]+) (.*)"
                           "\\1;\\2" split "${testline}")
      list(GET split 0 methname)
      list(GET split 1 docstring)
      add_test("core.${name}.${methname}" ${IMP_TEST_SETUP} python ${test} "${methname}")
      set_tests_properties("core.${name}.${methname}" PROPERTIES LABELS "IMP.core;test")
      set_tests_properties("core.${name}.${methname}" PROPERTIES MEASUREMENT "docstring=${docstring}")
      set_tests_properties("core.${name}.${methname}" PROPERTIES TIMEOUT 120)
    endforeach()
  else()
    add_test("core.${name}" ${IMP_TEST_SETUP} python ${test})
    set_tests_properties("core.${name}" PROPERTIES LABELS "IMP.core;test;expensive")
    set_tests_properties("core.${name}" PROPERTIES TIMEOUT 120)
  endif()
endforeach(test)

set(cpp_tests ${PROJECT_SOURCE_DIR}/modules/core/test/test_generic.cpp
${PROJECT_SOURCE_DIR}/modules/core/test/test_soft_sphere.cpp )

foreach (test ${cpp_tests})
   GET_FILENAME_COMPONENT(name ${test} NAME_WE)
   add_executable("core.${name}" ${test})
   target_link_libraries("core.${name}"     imp_core
    ${IMP_BASE_LIBRARY}
${IMP_CGAL_LIBRARY}
${IMP_ALGEBRA_LIBRARY}
${IMP_KERNEL_LIBRARY}
${IMP_DISPLAY_LIBRARY}
${IMP_SCORE_FUNCTOR_LIBRARY}
    ${BOOST.FILESYSTEM_LIBRARIES}
${BOOST.PROGRAMOPTIONS_LIBRARIES}
${BOOST.SYSTEM_LIBRARIES}
${GPERFTOOLS_LIBRARIES}
${TCMALLOC_HEAPPROFILER_LIBRARIES}
${TCMALLOC_HEAPCHECKER_LIBRARIES}
${LOG4CXX_LIBRARIES}
${BOOST.RANDOM_LIBRARIES}
${CGAL_LIBRARIES}
${ANN_LIBRARIES})
   set_target_properties("core.${name}" PROPERTIES
                         RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/test/core/"
                         OUTPUT_NAME ${name})
   add_test("core.${name}" ${IMP_TEST_SETUP}
            "${PROJECT_BINARY_DIR}/test/core/${name}${CMAKE_EXECUTABLE_SUFFIX}")
   set_tests_properties("core.${name}" PROPERTIES LABELS "IMP.core;test")
   set_tests_properties("core.${name}" PROPERTIES TIMEOUT 5)
   set(executables ${executables} "core.${name}")
endforeach(test)

add_custom_target("imp_core_tests" ALL DEPENDS ${executables})

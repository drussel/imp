/**
 *  \file SingletonContainer.h    \brief A container for particles.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-8 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_SINGLETON_CONTAINER_H
#define IMPCORE_SINGLETON_CONTAINER_H

#include "core_exports.h"
#include "internal/IndexingIterator.h"
#include "internal/container_helpers.h"
#include <IMP/Particle.h>
#include <IMP/base_types.h>
#include <IMP/Pointer.h>

IMPCORE_BEGIN_NAMESPACE

//! A shared container for particles
/** Stores a searchable shared collection of particles.
 */
class IMPCOREEXPORT SingletonContainer : public RefCountedObject
{
  struct Accessor {
    typedef Accessor This;
    typedef Particle* result_type;
    typedef unsigned int argument_type;
    result_type operator()(argument_type i) const {
      return o_->get_particle(i);
    }
    Accessor(SingletonContainer *pc): o_(pc){}
    Accessor(){}
    IMP_COMPARISONS_1(o_);
  private:
    bool is_default() const { return false;}
    // This should be ref counted, but swig memory management is broken
    SingletonContainer* o_;
  };

public:
  SingletonContainer();

  virtual ~SingletonContainer();

  //!
  /** \note This function may be linear. Be aware of the complexity
      bounds of your particular container.
   */
  virtual bool get_contains_particle(Particle* p) const =0;
  //!
  virtual unsigned int get_number_of_particles() const =0;
  //!
  virtual Particle* get_particle(unsigned int i) const=0;

  virtual void show(std::ostream &out = std::cout) const;

  virtual VersionInfo get_version_info() const=0;

  //!
  typedef internal::IndexingIterator<Accessor> ParticleIterator;
  //!
  ParticleIterator particles_begin() const {
    // Since I can't make the count mutable in Object
    return
      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
                        0);
  }
  //!
  ParticleIterator particles_end() const {
    return
      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
                        get_number_of_particles());
    }

  /** \todo patch ref_counting.h so this is not needed.
   */
  unsigned int get_index() const {return -1;}
};

IMP_OUTPUT_OPERATOR(SingletonContainer);

typedef std::vector<SingletonContainer*> SingletonContainers;
typedef Index<SingletonContainer> SingletonContainerIndex;

IMPCORE_END_NAMESPACE

#define IMP_SINGLETON_CONTAINER(version_info)                      \
  bool get_contains_particle(Particle* p) const;                      \
  unsigned int get_number_of_particles() const;                   \
  Particle* get_particle(unsigned int i) const;                       \
  void show(std::ostream &out= std::cout) const;                   \
  IMP::VersionInfo get_version_info() const { return version_info; }

#endif  /* IMPCORE_SINGLETON_CONTAINER_H */

/**
 *  \file internal/pair_helpers.h    \brief A container for particle_pairs.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_PAIR_HELPERS_H
#define IMPCORE_INTERNAL_PAIR_HELPERS_H

#include "../config.h"
#include "../ListPairContainer.h"
#include <algorithm>

IMPCORE_BEGIN_INTERNAL_NAMESPACE

template <class OC, class BC>
void update_list(OC &old, ParticlePairsTemp &cur,
                 BC *th) {
  if (th->get_is_added_or_removed_container()) {
    swap(old, cur);
  } else {
    std::sort(cur.begin(), cur.end());
    ParticlePairsTemp added, removed;
    std::set_difference(cur.begin(), cur.end(),
                        old.begin(), old.end(),
                        std::back_inserter(added));
    std::set_difference(old.begin(), old.end(),
                        cur.begin(), cur.end(),
                        std::back_inserter(removed));
    swap(old, cur);
    dynamic_cast<ListPairContainer*>
      (th->get_added_pairs_container())->set_particle_pairs(added);
    dynamic_cast<ListPairContainer*>
      (th->get_removed_pairs_container())->set_particle_pairs(removed);
  }
}


template <class OC, class BC>
void add_to_list(OC &old, ParticlePairsTemp &cur,
                 BC *th) {
  std::sort(cur.begin(), cur.end());
  ParticlePairsTemp added;
  std::set_difference(cur.begin(), cur.end(),
                      old.begin(), old.end(),
                      std::back_inserter(added));
  unsigned int osz= old.size();
  old.insert(old.end(), added.begin(), added.end());
  std::inplace_merge(old.begin(), old.begin()+osz, old.end());
  if (!th->get_is_added_or_removed_container()) {
   dynamic_cast<ListPairContainer*>
     (th->get_added_pairs_container())->set_particle_pairs(added);
  }
}


IMPCORE_END_INTERNAL_NAMESPACE

#define IMP_LISTLIKE_PAIR_CONTAINER_DEF(Name)                      \
  ParticlePairsTemp Name::get_particle_pairs() const {                         \
    return data_;                                                       \
  }                                                                     \
  ParticlePair Name::get_particle_pair(unsigned int i) const {             \
    return data_[i];                                                    \
  }                                                                     \
  void Name::apply(const PairModifier *sm) {                       \
    sm->apply(data_);                                                   \
  }                                                                     \
  void Name::apply(const PairModifier *sm,                         \
                   DerivativeAccumulator &da) {                         \
    sm->apply(data_, da);                                               \
  }                                                                     \
  double Name::evaluate(const PairScore *s,                        \
                        DerivativeAccumulator *da) const {              \
    return s->evaluate(data_, da);                                      \
  }                                                                     \
  double Name::evaluate_change(const PairScore *s,                 \
                               DerivativeAccumulator *da) const {       \
    return s->evaluate_change(data_, da);                               \
  }                                                                     \
  double Name::evaluate_prechange(const PairScore *s,              \
                                  DerivativeAccumulator *da) const {    \
    return s->evaluate_prechange(data_, da);                            \
  }                                                                     \
  unsigned int Name::get_number_of_particle_pairs() const {                 \
    return data_.size();                                                \
  }                                                                     \
  bool                                                                  \
  Name::get_contains_particle_pair(ParticlePair vt) const {                 \
    IMP_CHECK_OBJECT(this);                                             \
    return std::binary_search(data_.begin(), data_.end(), vt);          \
  }


#endif  /* IMPCORE_INTERNAL_PAIR_HELPERS_H */

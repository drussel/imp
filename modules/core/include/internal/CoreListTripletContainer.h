/**
 *  \file ListTripletContainer.h    \brief Store a list of ParticleTripletsTemp
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_CORE_LIST_TRIPLET_CONTAINER_H
#define IMPCORE_INTERNAL_CORE_LIST_TRIPLET_CONTAINER_H

#include "../core_config.h"
#include <IMP/TripletContainer.h>
#include <IMP/internal/container_helpers.h>
#include "triplet_helpers.h"
#include <IMP/ScoreState.h>
#include <IMP/scoped.h>
#include "../generic.h"

IMPCORE_BEGIN_INTERNAL_NAMESPACE


class IMPCOREEXPORT CoreListTripletContainer:
  public internal::ListLikeTripletContainer
{
  IMP_ACTIVE_CONTAINER_DECL(CoreListTripletContainer);
 public:
  CoreListTripletContainer(Model *m, std::string name);
  CoreListTripletContainer(Model *m, const char *name);
  CoreListTripletContainer();
  void add_particle_triplet(const ParticleTriplet& vt) {
    IMP_USAGE_CHECK(IMP::internal::is_valid(vt),
                    "Passed Triplet cannot be NULL (or None)");
    add_to_list(IMP::internal::get_index(vt));
    IMP_USAGE_CHECK(!get_has_added_and_removed_containers()
                    || !get_removed_container()
                    ->get_contains(vt),
      "You cannot remove and add the same item in one time step.");
  }
  void add_particle_triplets(const ParticleTripletsTemp &c) {
    if (c.empty()) return;
    ParticleIndexTriplets cp= IMP::internal::get_index(c);
    add_to_list(cp);
    IMP_IF_CHECK(USAGE) {
      for (unsigned int i=0; i< c.size(); ++i) {
        IMP_USAGE_CHECK(IMP::internal::is_valid(c[i]),
                        "Passed Triplet cannot be NULL (or None)");
        IMP_USAGE_CHECK(!get_has_added_and_removed_containers()
                        || !get_removed_container()
                        ->get_contains(c[i]),
        "You cannot remove and add the same item in one time step.");

      }
    }
  }
  void remove_particle_triplets(const ParticleTripletsTemp &c);
  void set_particle_triplets(ParticleTripletsTemp c) {
    ParticleIndexTriplets cp= IMP::internal::get_index(c);
    update_list(cp);
  }
  void set_particle_triplets(ParticleIndexTriplets cp) {
    update_list(cp);
  }
  void clear_particle_triplets() {
    ParticleIndexTriplets t;
    update_list(t);
  }
  bool get_is_up_to_date() const {
    return true;
  }
  IMP_LISTLIKE_TRIPLET_CONTAINER(CoreListTripletContainer);
};


IMPCORE_END_INTERNAL_NAMESPACE

#endif  /* IMPCORE_INTERNAL_CORE_LIST_TRIPLET_CONTAINER_H */

/**
 *  \file ListPairContainer.h    \brief Store a list of ParticlePairsTemp
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_CORE_LIST_PAIR_CONTAINER_H
#define IMPCORE_INTERNAL_CORE_LIST_PAIR_CONTAINER_H

#include "../core_config.h"
#include <IMP/PairContainer.h>
#include <IMP/internal/container_helpers.h>
#include "pair_helpers.h"
#include <IMP/ScoreState.h>
#include <IMP/scoped.h>
#include <IMP/generic.h>

IMPCORE_BEGIN_INTERNAL_NAMESPACE


class IMPCOREEXPORT CoreListPairContainer:
  public internal::ListLikePairContainer
{
  IMP_ACTIVE_CONTAINER_DECL(CoreListPairContainer);
 public:
  CoreListPairContainer(Model *m, std::string name);
  CoreListPairContainer(Model *m, const char *name);
  void add_particle_pair(const ParticlePair& vt) {
    IMP_USAGE_CHECK(IMP::internal::is_valid(vt),
                    "Passed Pair cannot be nullptr (or None)");
    add_to_list(IMP::internal::get_index(vt));
  }
  void add_particle_pair(const ParticleIndexPair& vt) {
    add_to_list(vt);
  }
  void add_particle_pairs(const ParticlePairsTemp &c) {
    if (c.empty()) return;
    ParticleIndexPairs cp= IMP::internal::get_index(c);
    add_to_list(cp);
  }
  void remove_particle_pairs(const ParticlePairsTemp &c);
  void set_particle_pairs(ParticlePairsTemp c) {
    ParticleIndexPairs cp= IMP::internal::get_index(c);
    update_list(cp);
  }
  void set_particle_pairs(ParticleIndexPairs cp) {
    update_list(cp);
  }
  void clear_particle_pairs() {
    ParticleIndexPairs t;
    update_list(t);
  }
  bool get_is_up_to_date() const {
    return true;
  }
  IMP_LISTLIKE_PAIR_CONTAINER(CoreListPairContainer);
};

IMP_OBJECTS(CoreListPairContainer, CoreListPairContainers);

IMPCORE_END_INTERNAL_NAMESPACE

#endif  /* IMPCORE_INTERNAL_CORE_LIST_PAIR_CONTAINER_H */

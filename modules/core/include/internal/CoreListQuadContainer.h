/**
 *  \file ListQuadContainer.h    \brief Store a list of ParticleQuadsTemp
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_INTERNAL_CORE_LIST_QUAD_CONTAINER_H
#define IMPCORE_INTERNAL_CORE_LIST_QUAD_CONTAINER_H

#include "../core_config.h"
#include <IMP/QuadContainer.h>
#include <IMP/internal/container_helpers.h>
#include "quad_helpers.h"
#include <IMP/ScoreState.h>
#include <IMP/scoped.h>
#include "../generic.h"

IMPCORE_BEGIN_INTERNAL_NAMESPACE


class IMPCOREEXPORT CoreListQuadContainer:
  public internal::ListLikeQuadContainer
{
  IMP_ACTIVE_CONTAINER_DECL(CoreListQuadContainer);
 public:
  CoreListQuadContainer(Model *m, std::string name);
  CoreListQuadContainer(Model *m, const char *name);
  CoreListQuadContainer();
  void add_particle_quad(const ParticleQuad& vt) {
    IMP_USAGE_CHECK(IMP::internal::is_valid(vt),
                    "Passed Quad cannot be NULL (or None)");
    add_to_list(IMP::internal::get_index(vt));
    IMP_USAGE_CHECK(!get_has_added_and_removed_containers()
                    || !get_removed_container()
                    ->get_contains(vt),
      "You cannot remove and add the same item in one time step.");
  }
  void add_particle_quads(const ParticleQuadsTemp &c) {
    if (c.empty()) return;
    ParticleIndexQuads cp= IMP::internal::get_index(c);
    add_to_list(cp);
    IMP_IF_CHECK(USAGE) {
      for (unsigned int i=0; i< c.size(); ++i) {
        IMP_USAGE_CHECK(IMP::internal::is_valid(c[i]),
                        "Passed Quad cannot be NULL (or None)");
        IMP_USAGE_CHECK(!get_has_added_and_removed_containers()
                        || !get_removed_container()
                        ->get_contains(c[i]),
        "You cannot remove and add the same item in one time step.");

      }
    }
  }
  void remove_particle_quads(const ParticleQuadsTemp &c);
  void set_particle_quads(ParticleQuadsTemp c) {
    ParticleIndexQuads cp= IMP::internal::get_index(c);
    update_list(cp);
  }
  void set_particle_quads(ParticleIndexQuads cp) {
    update_list(cp);
  }
  void clear_particle_quads() {
    ParticleIndexQuads t;
    update_list(t);
  }
  bool get_is_up_to_date() const {
    return true;
  }
  IMP_LISTLIKE_QUAD_CONTAINER(CoreListQuadContainer);
};


IMPCORE_END_INTERNAL_NAMESPACE

#endif  /* IMPCORE_INTERNAL_CORE_LIST_QUAD_CONTAINER_H */

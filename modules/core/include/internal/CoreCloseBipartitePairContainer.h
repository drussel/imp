/**
 *  \file CloseBipartitePairContainer.h
 *  \brief Return all pairs from a SingletonContainer
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. Close rights reserved.
 */

#ifndef IMPCORE_INTERNAL_CORE_CLOSE_BIPARTITE_PAIR_CONTAINER_H
#define IMPCORE_INTERNAL_CORE_CLOSE_BIPARTITE_PAIR_CONTAINER_H

#include "../core_config.h"
#include "../ClosePairsFinder.h"
#include "MovedSingletonContainer.h"
#include <IMP/PairContainer.h>
#include <IMP/PairFilter.h>
#include <IMP/SingletonContainer.h>
#include "pair_helpers.h"

IMPCORE_BEGIN_INTERNAL_NAMESPACE

/** \brief Return all close unordered pairs of particles taken from
    the SingletonContainer

    See ClosePairContainer for a more detailed description. This
    container lists all close pairs of particles where one particle is
    taken from each of the input sets.

    \usesconstraint
 */
class IMPCOREEXPORT CoreCloseBipartitePairContainer:
public IMP::core::internal::ListLikePairContainer
{
  typedef IMP::core::internal::ListLikePairContainer P;
  IMP::OwnerPointer<SingletonContainer> a_, b_;
  IMP::OwnerPointer<core::ClosePairsFinder> cpf_;
  IMP::OwnerPointer<core::internal::MovedSingletonContainer>
    moveda_, movedb_;
  bool first_call_;
  double distance_, slack_;
  IMP_ACTIVE_CONTAINER_DECL(CoreCloseBipartitePairContainer);
  void initialize(SingletonContainer *a,
                  SingletonContainer *b,
                  MovedSingletonContainer*ma,
                  MovedSingletonContainer*mb,
                  double distance,
                  double slack, core::ClosePairsFinder *cpf);
public:
  //! Get the individual particles from the passed SingletonContainer
  CoreCloseBipartitePairContainer(SingletonContainer *a,
                              SingletonContainer *b,
                              double distance,
                              double slack=1);

  //! Get the individual particles from the passed SingletonContainer
  CoreCloseBipartitePairContainer(SingletonContainer *a,
                              SingletonContainer *b,
                              double distance,
                              core::ClosePairsFinder *cpf,
                              double slack=1);

  //! make sure you know what you are doing
  CoreCloseBipartitePairContainer(SingletonContainer *a,
                                  SingletonContainer *b,
                                  MovedSingletonContainer*ma,
                                  MovedSingletonContainer*mb,
                                  double distance,
                                  core::ClosePairsFinder *cpf,
                                  double slack=1);

  core::internal::MovedSingletonContainer*
    get_moved_singleton_container(unsigned int ab) const {
    if (ab==0) return moveda_;
    else return movedb_;
  }

  /** @name Methods to control the set of filters

     PairContainer objects can be used as filters to prevent
     the addition of pairs to the containeroutput list. Pairs
     which are contained in any container added to this list
     will be excluded from the close pairs list.
  */
  /**@{*/
  IMP_LIST_ACTION(public, PairFilter, PairFilters, pair_filter,
                  pair_filters,
                  PairFilter*, PairFilters, obj->set_was_used(true);,,);
   /**@}*/
  ParticlesTemp get_contained_particles() const;
  bool get_is_up_to_date() const {
    if (get_model()->get_stage() != IMP::internal::NOT_EVALUATING) {
      return get_last_update_evaluation() == get_model()->get_evaluation();
    } else {
      if (!a_->get_is_up_to_date()
          || !b_->get_is_up_to_date()) return false;
      return true;
    }
  }
  IMP_LISTLIKE_PAIR_CONTAINER(CoreCloseBipartitePairContainer);
};

IMP_OBJECTS(CoreCloseBipartitePairContainer,CoreCloseBipartitePairContainers);

IMPCORE_END_INTERNAL_NAMESPACE

#endif  /* IMPCORE_INTERNAL_CORE_CLOSE_BIPARTITE_PAIR_CONTAINER_H */

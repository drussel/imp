/**
 *  \file FilteredListSingletonContainer.h
 *  \brief Store a list of Particles filtered based on another list
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 */

#ifndef IMPCORE_FILTERED_LIST_SINGLETON_CONTAINER_H
#define IMPCORE_FILTERED_LIST_SINGLETON_CONTAINER_H

#include "config.h"
#include "internal/version_info.h"
#include <IMP/SingletonContainer.h>
#include <IMP/container_macros.h>
#include <IMP/RefCounted.h>

IMP_BEGIN_NAMESPACE

typedef SingletonContainers SingletonFilters;

IMP_END_NAMESPACE

IMPCORE_BEGIN_NAMESPACE

//! Store a list of Particles filtered by other lists
/** This class stores a list of Particles and a list of
    SingletonContainers with the invariant that none of the
    SingletonContainers contain any of the Particles stored.

    \note Currently the filter is only applied upon addition
    of a Particle* to the container. So adding more sets to the
    filter afterwards won't remove objects. Nor will changing
    the filtering sets.

    \note The indexes can change when particles are inserted
    as the list is maintained in sorted order.

    \see ListSingletonContainer
 */
class IMPCOREEXPORT FilteredListSingletonContainer
  : public SingletonContainer
{
  bool sorted_;
  mutable VectorOfRefCounted<Particle*> data_;
public:
  //! cannot pass a Singletons on construction
  FilteredListSingletonContainer();

  IMP_SINGLETON_CONTAINER(FilteredListSingletonContainer,
                          internal::version_info);

  //! Add vt if none of the referenced containers already contains it
  void add_particle(Particle* vt);

  void clear_particles() {
    data_.clear();
    sorted_=true;
  }
  void reserve_particles(unsigned int sz) {
    data_.reserve(sz);
  }

  template <class F>
  void remove_particles_if(const F &f) {
    data_.remove_if(f);
  }


  /** @name Faster editing

      The container keeps it list of elements in a sorted order.
      As this can make for slow insertions, the user has the option
      of disabling the sorting while inserting many objects. To do this,
      call
      \code
      set_is_editing(true);
      // do stuff
      set_is_editing(false);
      \endcode
      \see FilteredListSingletonContainerEditor

      @{
   */
  void set_is_editing( bool tf);

  bool get_is_editing() const {
    return !sorted_;
  }
  /** @}*/

 /** @name Methods to control the set of filters

     SingletonContainer objects can be used as filters to prevent
     the addition of Particle objects to the container. Every
     time someone requests to add a Particle object, the container
     checks each SingletonContainer in the SingletonFilter list to
     see of any of the filters contain an identical object using the
     SingletonContainer::get_contains_particle() call. If true is
     returned, the object is not added to this container.
  */
  /**@{*/
  IMP_LIST(public, SingletonFilter, singleton_filter,
           SingletonContainer*, SingletonContainers);
   /**@}*/
};

IMPCORE_END_NAMESPACE

#endif  /* IMPCORE_FILTERED_LIST_SINGLETON_CONTAINER_H */

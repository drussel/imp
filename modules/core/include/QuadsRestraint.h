/**
 *  \file QuadsRestraint.h
 *  \brief Apply a QuadScore to each ParticleQuad in a list.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2010 Sali Lab. All rights reserved.
 *
 */

#ifndef IMPCORE_QUADS_RESTRAINT_H
#define IMPCORE_QUADS_RESTRAINT_H

#include "config.h"

#include <IMP/Restraint.h>
#include <IMP/Pointer.h>
#include <IMP/QuadScore.h>
#include <IMP/QuadContainer.h>

#include <iostream>

IMPCORE_BEGIN_NAMESPACE

//! Applies a QuadScore to each ParticleQuad in a list.
/** This restraint stores the used particles in a ParticleQuads.
    The container used can be set so that the list can be shared
    with other containers (or a nonbonded list can be used). By default
    a ListQuadContainer is used and the
    {add_, set_, clear_}particle_quad{s} methods can be used.

    \see QuadRestraint
 */
class IMPCOREEXPORT QuadsRestraint : public Restraint
{
  IMP::internal::OwnerPointer<QuadScore> ss_;
  IMP::internal::OwnerPointer<QuadContainer> pc_;
  mutable double score_;
public:
  //! Create the restraint.
  /** \param[in] ss The function to apply to each particle.
      \param[in] ps The list of particles to use in the restraint.
      \param[in] name The object name
  */
  QuadsRestraint(QuadScore *ss,
                      const ParticleQuads &ps=ParticleQuads(),
                      std::string name="QuadsRestraint %1%");

 //! Create the restraint with a shared container
  /** \param[in] ss The function to apply to each particle.
      \param[in] pc The container containing the stored particles. This
      container is not copied.
      \param[in] name The object name
   */
  QuadsRestraint(QuadScore *ss,
                      QuadContainer *pc,
                      std::string name="QuadsRestraint %1%");

  IMP_INCREMENTAL_RESTRAINT(QuadsRestraint, get_module_version_info());

  /** \note This can only be used if the container is a ListQuadContainer
  */
  void add_particle_quads(const ParticleQuads &ps);
  /** \note This can only be used if the container is a ListQuadContainer
   */
  void set_particle_quads(const ParticleQuads &ps);
  /** \note This can only be used if the container is a ListQuadContainer
  */
  void add_particle_quad(ParticleQuad v);
  /** \note This can only be used if the container is a ListQuadContainer
  */
  void clear_particle_quads();

  //! Get the container used to store Particles
  QuadContainer* get_quad_container() {
    return pc_;
  }
  //! Set the container used to store Particles
  /** \note The passed container is used, not a copy.
   */
  void set_quad_container(QuadContainer *pc) {
    pc_=pc;
  }

  QuadScore* get_quad_score() const {
    return ss_;
  }

  void set_quad_score(QuadScore* ss) {
    IMP_USAGE_CHECK(ss, "The QuadScore must be non-null",
              IndexException);
    ss_= ss;
  }
};

IMPCORE_END_NAMESPACE

#endif  /* IMPCORE_QUADS_RESTRAINT_H */

/**
 *  \file SingletonsRestraint.h
 *  \brief Apply a SingletonScore to each Particle in a list.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#ifndef IMPCORE_SINGLETONS_RESTRAINT_H
#define IMPCORE_SINGLETONS_RESTRAINT_H

#include "config.h"
#include "internal/version_info.h"

#include <IMP/Restraint.h>
#include <IMP/Pointer.h>
#include <IMP/SingletonScore.h>
#include <IMP/SingletonContainer.h>

#include <iostream>

IMPCORE_BEGIN_NAMESPACE

//! Applies a SingletonScore to each Particle in a list.
/** This restraint stores the used particles in a SingletonContainer.
    The container used can be set so that the list can be shared
    with other containers (or a nonbonded list can be used). By default
    a ListSingletonContainer is used and the
    {add_, set_, clear_}particle{s} methods can be used.

    \see SingletonRestraint
 */
class IMPCOREEXPORT SingletonsRestraint : public Restraint
{
  Pointer<SingletonScore> ss_;
  Pointer<SingletonContainer> pc_;
public:
  //! Create the restraint.
  /** \param[in] ss The function to apply to each particle.
      \param[in] ps The list of particles to use in the restraint.
   */
  SingletonsRestraint(SingletonScore *ss,
                      const Particles &ps=Particles());

 //! Create the restraint with a shared container
  /** \param[in] ss The function to apply to each particle.
      \param[in] pc The container containing the stored particles. This
      container is not copied.
   */
  SingletonsRestraint(SingletonScore *ss,
                      SingletonContainer *pc);

  IMP_RESTRAINT(SingletonsRestraint, internal::version_info);

  /** \note This can only be used if the container is a ListSingletonContainer
  */
  void add_particles(const Particles &ps);
  /** \note This can only be used if the container is a ListSingletonContainer
   */
  void set_particles(const Particles &ps);
  /** \note This can only be used if the container is a ListSingletonContainer
  */
  void add_particle(Particle* v);
  /** \note This can only be used if the container is a ListSingletonContainer
  */
  void clear_particles();

  //! Get the container used to store Particles
  SingletonContainer* get_singleton_container() {
    return pc_;
  }
  //! Set the container used to store Particles
  /** \note The passed container is used, not a copy.
   */
  void set_singleton_container(SingletonContainer *pc) {
    pc_=pc;
  }

  virtual ParticlesList get_interacting_particles() const;
};

IMPCORE_END_NAMESPACE

#endif  /* IMPCORE_SINGLETONS_RESTRAINT_H */

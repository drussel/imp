/**
 *  \file IMP/core/TripletConstraint.h
 *  \brief Use a TripletModifier applied to a ParticleTripletsTemp to
 *  maintain an invariant
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 */

#ifndef IMPCORE_TRIPLET_CONSTRAINT_H
#define IMPCORE_TRIPLET_CONSTRAINT_H

#include <IMP/core/core_config.h>
#include <IMP/internal/TupleConstraint.h>
#include <IMP/TripletModifier.h>
#include <IMP/TripletDerivativeModifier.h>
#include <IMP/score_state_macros.h>

IMPCORE_BEGIN_NAMESPACE
//! Apply a TripletFunction to a Triplet
/** The score state is passed up to two TripletModifiers, one to
    apply before evaluation and the other after. The one after
    should take a DerivativeAccumulator as its last argument for
    TripletModifier::apply() and will only be called if
    the score was computed with derivatives.

    \see container::TripletsConstraint
 */
class IMPCOREEXPORT TripletConstraint :
#if defined(IMP_DOXYGEN) || defined(SWIG)
public Constraint
#else
public IMP::internal::TupleConstraint<TripletModifier,
                                      TripletDerivativeModifier>
#endif
{
public:
  /** before and after are the modifiers to apply before and after
      evaluate.
   */
  TripletConstraint(TripletModifier *before,
                      TripletDerivativeModifier *after,
                      const ParticleTriplet& vt,
                      std::string name="TripletConstraint %1%"):
      IMP::internal::TupleConstraint<TripletModifier,
                                      TripletDerivativeModifier>
      (before, after, vt, name)
      {
  }

#if defined(IMP_DOXYGEN) || defined(SWIG)
  IMP_CONSTRAINT(TripletConstraint);
#endif
};


IMPCORE_END_NAMESPACE

#endif  /* IMPCORE_TRIPLET_CONSTRAINT_H */

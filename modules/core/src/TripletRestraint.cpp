/**
 *  \file TripletRestraint.cpp
 *  \brief Implementation
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/core/TripletRestraint.h"
#include <IMP/internal/container_helpers.h>

#include <IMP/log.h>


IMPCORE_BEGIN_NAMESPACE

TripletRestraint
::TripletRestraint(TripletScore *ss,
                     const ParticleTriplet& vt,
                     std::string name):
  TripletScoreRestraint(name),
  ss_(ss),
  v_(IMP::internal::get_index(vt))
{
}

double TripletRestraint
::unprotected_evaluate(DerivativeAccumulator *accum) const
{
  IMP_OBJECT_LOG;
  IMP_CHECK_OBJECT(ss_);
  return ss_->evaluate_index(get_model(), v_, accum);
}

double TripletRestraint
::unprotected_evaluate_if_good(DerivativeAccumulator *accum,
                               double max) const
{
  IMP_OBJECT_LOG;
  IMP_CHECK_OBJECT(ss_);
  return ss_->evaluate_if_good_index(get_model(), v_, accum, max);
}



ParticlesTemp TripletRestraint::get_input_particles() const
{
  ParticleTriplet vi= IMP::internal::get_particle(get_model(), v_);
  return IMP::internal::get_input_particles(ss_.get(),
                                            vi);
}

ContainersTemp TripletRestraint::get_input_containers() const
{
  ParticleTriplet vi= IMP::internal::get_particle(get_model(), v_);
  return IMP::internal::get_input_containers(ss_.get(),
                                             vi);
}


Restraints TripletRestraint::do_create_current_decomposition() const {
  ParticleTriplet vi= IMP::internal::get_particle(get_model(), v_);
  return ss_->create_current_decomposition(vi);
}

void TripletRestraint::do_show(std::ostream& out) const
{
  out << "score " << ss_->get_name() << std::endl;
  out << "data "
      << IMP::internal::streamable(IMP::internal::get_particle(get_model(),v_))
      << std::endl;
}

IMPCORE_END_NAMESPACE

/**
 *  \file ListSingletonContainer.cpp   \brief A list of Particles.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#include "IMP/core/ListSingletonContainer.h"
#include <algorithm>


IMPCORE_BEGIN_NAMESPACE

ListSingletonContainer::ListSingletonContainer(const Particles &ps){
  sorted_=false;
  set_particles(ps);
  set_is_editing(false);
}

IMP_LIST_IMPL(ListSingletonContainer, Particle,
              particle, Particle*,Particles,, {
                if (sorted_) std::sort(particles_begin(),
                                       particles_end());
              },);


void ListSingletonContainer::set_is_editing(bool tf) {
  if (tf== !sorted_) return;
  else {
    sorted_=!tf;
    if (sorted_) {
      std::sort(particles_begin(), particles_end());
    }
  }
}


bool
ListSingletonContainer::get_contains_particle(Particle* vt) const {
  IMP_CHECK_OBJECT(this);
  return std::binary_search(particles_begin(), particles_end(), vt);
}

void ListSingletonContainer::show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << "ListSingletonContainer with " << get_number_of_particles()
      << " particles." << std::endl;
}

void ListSingletonContainer::apply(const SingletonModifier *sm) {

  std::for_each(ListSingletonContainer::particles_begin(),
                ListSingletonContainer::particles_end(),
                SingletonFunctor(sm));
}

void ListSingletonContainer::apply(const SingletonModifier *sm,
                               DerivativeAccumulator *da) {

  std::for_each(ListSingletonContainer::particles_begin(),
                ListSingletonContainer::particles_end(),
                SingletonFunctor(sm, da));
}

double ListSingletonContainer::evaluate(const SingletonScore *s,
                                    DerivativeAccumulator *da) const {
  double score=0;
  for (unsigned int i=0;
       i< ListSingletonContainer::get_number_of_particles();
       ++i) {
    double lscore= IMP::internal::ContainerTraits<Particle>
      ::evaluate(s, ListSingletonContainer::get_particle(i), da);
  }
  return score;
}


Particles ListSingletonContainer::get_particles() const {
  return Particles(ListSingletonContainer::particles_begin(),
                    ListSingletonContainer::particles_end());
}

IMPCORE_END_NAMESPACE

/**
 *  \file PairRestraint.cpp
 *  \brief Implementation
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/core/PairRestraint.h"
#include <IMP/internal/container_helpers.h>

#include <IMP/log.h>


IMPCORE_BEGIN_NAMESPACE

PairRestraint
::PairRestraint(PairScore *ss,
                     const ParticlePair& vt,
                     std::string name):
  PairScoreRestraint(name),
  ss_(ss),
  v_(vt)
{
  IMP_IF_CHECK(USAGE) {
    // check the arguments are OK
    ss_->evaluate(v_, NULL);
  }
}

double PairRestraint
::unprotected_evaluate(DerivativeAccumulator *accum) const
{
  IMP_OBJECT_LOG;
  IMP_CHECK_OBJECT(ss_);
  return ss_->evaluate(v_, accum);
}

double PairRestraint
::unprotected_evaluate_if_good(DerivativeAccumulator *accum,
                               double max) const
{
  IMP_OBJECT_LOG;
  IMP_CHECK_OBJECT(ss_);
  return ss_->evaluate_if_good(v_, accum, max);
}



ParticlesTemp PairRestraint::get_input_particles() const
{
  return IMP::internal::get_input_particles(ss_.get(), v_);
}

ContainersTemp PairRestraint::get_input_containers() const
{
  return IMP::internal::get_input_containers(ss_.get(), v_);
}


Restraints PairRestraint::get_instant_decomposition() const {
  return ss_->get_instant_decomposition(v_);
}

void PairRestraint::do_show(std::ostream& out) const
{
  out << "score " << ss_->get_name() << std::endl;
  out << "data " << IMP::internal::streamable(v_) << std::endl;
}

IMPCORE_END_NAMESPACE

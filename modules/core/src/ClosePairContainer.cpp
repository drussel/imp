/**
 *  \file ClosePairContainer.cpp   \brief A list of ParticlePairs.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. Close rights reserved.
 *
 */

#include "IMP/core/ClosePairContainer.h"
#include <IMP/core/internal/DifferenceSingletonContainer.h>
#include <IMP/core/BoxSweepClosePairsFinder.h>
#include <IMP/core/GridClosePairsFinder.h>
#include <IMP/core/ListPairContainer.h>
#include <IMP/core/internal/pair_helpers.h>
#include <IMP/core/internal/close_pairs_helpers.h>
#include <IMP/PairModifier.h>
#include <algorithm>


IMPCORE_BEGIN_NAMESPACE

IMP_LIST_IMPL(ClosePairContainer,
             PairFilter,
             pair_filter,
             PairFilter*,
             PairFilters, obj->set_was_owned(true);,,)


ClosePairContainer::ClosePairContainer(SingletonContainer *c,
                                                 double distance,
                                                 double slack) {
  initialize(c, distance, slack, c->get_particle(0)->get_model(),
             internal::default_cpf());
}
ClosePairContainer::ClosePairContainer(SingletonContainer *c,
                                                 Model *m, double distance,
                                                 double slack) {
  initialize(c, distance, slack, m,
             internal::default_cpf());
}

ClosePairContainer::ClosePairContainer(SingletonContainer *c,
                                                 double distance,
                                                 ClosePairsFinder *cpf,
                                                 double slack) {
  initialize(c, distance, slack, c->get_particle(0)->get_model(),
             cpf);
}
ClosePairContainer::ClosePairContainer(SingletonContainer *c,
                                                 Model *m, double distance,
                                                 ClosePairsFinder *cpf,
                                                 double slack) {
 initialize(c, distance, slack, m,
             cpf);
}

void ClosePairContainer::initialize(SingletonContainer *c, double distance,
                                         double slack, Model *m,
                                         ClosePairsFinder *cpf) {
  set_added_and_removed_containers(
           ListPairContainer::create_untracked_container(),
           ListPairContainer::create_untracked_container());
  set_model(m);
  slack_=slack;
  distance_=distance;
  c_=c;
  cpf_=cpf;
  cpf_->set_distance(distance_+slack_);
  first_call_=true;
  moved_= cpf_->get_moved_singleton_container(c_, m, slack_);
}
IMP_LISTLIKE_PAIR_CONTAINER_DEF(ClosePairContainer);

IMP_ACTIVE_CONTAINER_DEF(ClosePairContainer)

ParticlesTemp ClosePairContainer::get_state_input_particles() const {
  ParticlesTemp ret(cpf_->get_input_particles(c_));
  if (get_number_of_pair_filters() >0) {
    ParticlePairsTemp all_pairs;
    for (unsigned int i=0; i< ret.size(); ++i) {
      for (unsigned int j=0; j< i; ++j) {
        all_pairs.push_back(ParticlePair(ret[i], ret[j]));
      }
    }
    for (PairFilterConstIterator it= pair_filters_begin();
         it != pair_filters_end(); ++it) {
      for (unsigned int i=0; i< all_pairs.size(); ++i) {
        ParticlesTemp cur= (*it)->get_input_particles(all_pairs[i]);
      ret.insert(ret.end(), cur.begin(), cur.end());
      }
    }
  }
  return ret;
}

void ClosePairContainer::do_before_evaluate() {
  IMP_OBJECT_LOG;
  IMP_CHECK_OBJECT(c_);
  IMP_CHECK_OBJECT(cpf_);
  if (first_call_) {
    IMP_LOG(TERSE, "Handling first call of ClosePairContainer." << std::endl);
    data_= cpf_->get_close_pairs(c_);
    internal::filter_close_pairs(this, data_);
    moved_->reset();
    std::sort(data_.begin(), data_.end());
    IMP_LOG(TERSE, "Found " << data_.size() << " pairs." << std::endl);
    first_call_=false;
  } else {
    // hack until we have the dependency graph
    moved_->update();
    if (moved_->get_number_of_particles() != 0) {
      if (moved_->get_particles().size() < c_->get_number_of_particles()*.1) {
        IMP_LOG(TERSE, "Handling incremental update of ClosePairContainer."
                << std::endl);
        ParticlePairsTemp ret= cpf_->get_close_pairs(c_, moved_);
        internal::filter_close_pairs(this, ret);
        internal::filter_same(ret);
        IMP_LOG(TERSE, "Found " << ret.size() << " pairs." << std::endl);
        internal::add_to_list(data_, ret, this);
        moved_->reset_moved();
      } else {
        IMP_LOG(TERSE, "Handling full update of ClosePairContainer."
                << std::endl);
        ParticlePairsTemp ret= cpf_->get_close_pairs(c_);
        internal::filter_close_pairs(this, ret);
        internal::update_list(data_, ret,this);
        IMP_LOG(TERSE, "Found " << data_.size() << " pairs." << std::endl);
        moved_->reset();
      }
    }
  }
}


void ClosePairContainer::do_after_evaluate() {
  internal::get_list(get_added_pairs_container())->clear_particle_pairs();
  internal::get_list(get_removed_pairs_container())
    ->clear_particle_pairs();
}


void ClosePairContainer::show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << "ClosePairContainer on ";
  c_->show(out);
}

ObjectsTemp ClosePairContainer::get_input_objects() const {
  ObjectsTemp ret(2);
  ret[0]=c_;
  ret[1]=moved_;
  return ret;
}

IMPCORE_END_NAMESPACE

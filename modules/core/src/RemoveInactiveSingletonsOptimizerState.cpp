/**
 *  \file RemoveInactiveSingletonsOptimizerState.cpp
 *  \brief Use a SingletonModifier applied to a SingletonContainer to
 *  maintain an invariant
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#include "IMP/core/RemoveInactiveSingletonsOptimizerState.h"
#include <utility>

IMPCORE_BEGIN_NAMESPACE

RemoveInactiveSingletonsOptimizerState
::RemoveInactiveSingletonsOptimizerState(ListSingletonContainer *c):
  c_(c){
}

namespace {
  struct Inactive {
    bool operator()(Particle* c) const {
      return IMP::internal::ContainerTraits<Particle>::is_inactive(c);
    }
  };
}

void RemoveInactiveSingletonsOptimizerState::update()
{
  IMP_OBJECT_LOG;
  IMP_LOG(TERSE, "Begin RemoveInactiveSingletonsOptimizerState::update"
          << std::endl);
  IMP_CHECK_OBJECT(c_);
  c_->remove_particles_if(Inactive());

  IMP_LOG(TERSE, "End RemoveInactiveSingletonsOptimizerState::update"
          << std::endl);
}



void RemoveInactiveSingletonsOptimizerState::show(std::ostream &out) const {
  out << "RemoveInactiveSingletonsOptimizerState" << std::endl;
}

IMPCORE_END_NAMESPACE

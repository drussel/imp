/**
 *  \file PairContainerSet.cpp
 *  \brief A set of PairContainers.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#include "IMP/core/PairContainerSet.h"
#include <algorithm>


IMPCORE_BEGIN_NAMESPACE

PairContainerSet
::PairContainerSet(std::string name):
  PairContainer(name) {
}

bool
PairContainerSet
::get_contains_particle_pair(ParticlePair vt) const {
  for (PairContainerConstIterator it= pair_containers_begin();
       it != pair_containers_end(); ++it) {
    if ((*it)->get_contains_particle_pair(vt)) return true;
  }
  return false;
}

void PairContainerSet::show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << "PairContainerSet with "
      << get_number_of_particle_pairs()
      << " particle_pairs." << std::endl;
}

unsigned int
PairContainerSet::get_number_of_particle_pairs() const {
  unsigned int sum=0;
  for (PairContainerConstIterator it= pair_containers_begin();
       it != pair_containers_end(); ++it) {
    sum+= (*it)->get_number_of_particle_pairs();
  }
  return sum;
}

ParticlePair
PairContainerSet::get_particle_pair(unsigned int i) const {
  for (PairContainerConstIterator it= pair_containers_begin();
       it != pair_containers_end(); ++it) {
    if ( i >= (*it)->get_number_of_particle_pairs()) {
      i-= (*it)->get_number_of_particle_pairs();
    } else {
      return (*it)->get_particle_pair(i);
    }
  }
  throw IndexException("out of range");
}



IMP_LIST_IMPL(PairContainerSet,
              PairContainer,
              pair_container,
              PairContainer*,
              PairContainers,{
                obj->set_was_owned(true);
              },,)


void PairContainerSet::apply(const PairModifier *sm) {
  for (unsigned int i=0; i< get_number_of_pair_containers(); ++i) {
    get_pair_container(i)->apply(sm);
  }
}

void PairContainerSet::apply(const PairModifier *sm,
                               DerivativeAccumulator &da) {
  for (unsigned int i=0; i< get_number_of_pair_containers(); ++i) {
    get_pair_container(i)->apply(sm, da);
  }
}

double PairContainerSet::evaluate(const PairScore *s,
                                       DerivativeAccumulator *da) const {
  double score=0;
  for (unsigned int i=0; i< get_number_of_pair_containers(); ++i) {
    score+=get_pair_container(i)->evaluate(s, da);
  }
  return score;
}

ParticlePairsTemp PairContainerSet::get_particle_pairs() const {
  ParticlePairsTemp ret;
  for (unsigned int i=0; i< get_number_of_pair_containers(); ++i) {
    ParticlePairsTemp c= get_pair_container(i)->get_particle_pairs();
    ret.insert(ret.end(), c.begin(), c.end());
  }
  return ret;
}

ObjectsTemp PairContainerSet::get_input_objects() const {
  return ObjectsTemp(pair_containers_begin(),
                     pair_containers_end());
}

IMPCORE_END_NAMESPACE

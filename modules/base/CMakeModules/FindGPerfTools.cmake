# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED GPerfTools_LIBRARIES)
message(STATUS "Checking for GPerfTools")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(GPerfTools_PKGCONF GPerfTools)

# Include dir
find_path(GPerfTools_INCLUDE_DIR
  NAMES gperftools/profiler.h
  PATHS ${GPerfTools_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib profiler)
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${GPerfTools_PKGCONF_LIBRARY_DIRS}
)
set(GPerfTools_LIBRARY ${GPerfTools_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(GPerfTools_PROCESS_INCLUDES GPerfTools_INCLUDE_DIR)
set(GPerfTools_PROCESS_LIBS GPerfTools_LIBRARY)
libfind_process(GPerfTools)

if ("${GPerfTools_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${GPerfTools_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "GPerfTools not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/GPerfTools" "ok=False")
else()
  message(STATUS "GPerfTools found " ${GPerfTools_INCLUDE_DIR} " " ${GPerfTools_LIBRARY})
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/GPerfTools" "ok=True")
  #set(GPERFTOOLS_LINK_PATH ${GPerfTools_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
  set(GPERFTOOLS_INCLUDE_PATH ${GPerfTools_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
  set(GPERFTOOLS_LIBRARIES ${GPerfTools_LIBRARY} CACHE INTERNAL "" FORCE)
endif()

else()
message(STATUS "GPerfTools already setup")

endif(NOT DEFINED GPerfTools_LIBRARIES)
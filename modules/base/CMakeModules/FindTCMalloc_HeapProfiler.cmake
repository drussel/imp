# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED TCMalloc_HeapProfiler_LIBRARIES)
message(STATUS "Checking for TCMalloc_HeapProfiler")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(TCMalloc_HeapProfiler_PKGCONF TCMalloc_HeapProfiler)

# Include dir
find_path(TCMalloc_HeapProfiler_INCLUDE_DIR
  NAMES gperftools/heap-profiler.h
  PATHS ${TCMalloc_HeapProfiler_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib )
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${TCMalloc_HeapProfiler_PKGCONF_LIBRARY_DIRS}
)
set(TCMalloc_HeapProfiler_LIBRARY ${TCMalloc_HeapProfiler_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(TCMalloc_HeapProfiler_PROCESS_INCLUDES TCMalloc_HeapProfiler_INCLUDE_DIR)
set(TCMalloc_HeapProfiler_PROCESS_LIBS TCMalloc_HeapProfiler_LIBRARY)
libfind_process(TCMalloc_HeapProfiler)

if ("${TCMalloc_HeapProfiler_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${TCMalloc_HeapProfiler_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "TCMalloc_HeapProfiler not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/TCMalloc_HeapProfiler" "ok=False")
else()
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_LIBRARIES "${TCMalloc_HeapProfiler_LIBRARY}")
  set(body "#include <gperftools/heap-profiler.h>
int main(int,char*[]) {
  HeapProfilerStart("profiler");
  return 0;
}")
  check_cxx_source_compiles("${body}"
 TCMalloc_HeapProfiler_COMPILES)
  if ("TCMalloc_HeapProfiler_COMPILES" MATCHES "1")
    message(STATUS "TCMalloc_HeapProfiler found " ${TCMalloc_HeapProfiler_INCLUDE_DIR} " " ${TCMalloc_HeapProfiler_LIBRARY})
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/TCMalloc_HeapProfiler" "ok=True")
    #set(TCMALLOC_HEAPPROFILER_LINK_PATH ${TCMalloc_HeapProfiler_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
    set(TCMALLOC_HEAPPROFILER_INCLUDE_PATH ${TCMalloc_HeapProfiler_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    set(TCMALLOC_HEAPPROFILER_LIBRARIES ${TCMalloc_HeapProfiler_LIBRARY} CACHE INTERNAL "" FORCE)
  else()
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/TCMalloc_HeapProfiler" "ok=False")
  endif()
endif()

else()
message(STATUS "TCMalloc_HeapProfiler already setup")

endif(NOT DEFINED TCMalloc_HeapProfiler_LIBRARIES)
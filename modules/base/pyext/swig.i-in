%include "IMP_base.random.i"

namespace IMP {
namespace base {
%warnfilter(403) FailureHandlerBase;
%implicitconv TextInput;
%implicitconv TextOutput;
}
}

%inline %{
namespace IMP {
namespace base {
template <class T>
class ConvertibleVector;
}
}
%}

%extend IMP::base::Object {
  bool __eq__(const Object *o) const {
     return self ==o;
  }
  bool __ne__(const Object *o) const {
     return self !=o;
  }
  bool __le__(const Object *o) const {
     return self <= o;
  }
  bool __lt__(const Object *o) const {
     return self < o;
  }
  bool __ge__(const Object *o) const {
     return self >= o;
  }
  bool __gt__(const Object *o) const {
     return self > o;
  }
}

%feature("ref")   IMP::base::RefCounted "IMP::base::internal::ref($this);"
%feature("unref") IMP::base::RefCounted "IMP::base::internal::unref($this);"

%include "IMP/base/object_cast.h"

IMP_SWIG_RAII(IMP::base, SetLogState);
IMP_SWIG_RAII(IMP::base, SetCheckState);
IMP_SWIG_OBJECT(IMP::base, Object, Objects);
IMP_SWIG_OBJECT(IMP::base, FailureHandler, FailureHandlers);
IMP_SWIG_DIRECTOR(IMP::base, Object);
IMP_SWIG_VALUE(IMP::base, VersionInfo, VersionInfos);
/*IMP_SWIG_VALUE(IMP::base, TextOutput, TextOutputs);
IMP_SWIG_VALUE(IMP::base, TextInput, TextInputs);*/
IMP_SWIG_RAII(IMP::base, CreateLogContext)
IMP_SWIG_RAII(IMP::base, WarningContext)
IMP_SWIG_RAII(IMP::base, SetLogTarget);

IMP_SWIG_NATIVE_PAIR(IMP, double, DerivativePair, DerivativePairs);
IMP_SWIG_NATIVE_PAIR(IMP, double, FloatRange, FloatRanges);
IMP_SWIG_NATIVE_PAIR(IMP, double, FloatPair, FloatPairs);
IMP_SWIG_NATIVE_PAIR(IMP, int, IntRange, IntRanges);
IMP_SWIG_NATIVE_PAIR(IMP, int, IntPair, IntPairs);
IMP_SWIG_NATIVE_VALUES_LIST(IMP, double, Floats, FloatsList);
IMP_SWIG_NATIVE_VALUES_LIST(IMP, int, Ints, IntsList);
IMP_SWIG_NATIVE_VALUES_LIST(IMP, std::string, Strings, StringsList);
IMP_SWIG_VALUE_BUILTIN(IMP, Float, Floats, double);
IMP_SWIG_VALUE_BUILTIN(IMP, Int, Ints, int);
IMP_SWIG_VALUE_BUILTIN(IMP, String, Strings, std::string);
IMP_SWIG_NATIVE_VALUE(float);
IMP_SWIG_NATIVE_VALUE(double);
IMP_SWIG_NATIVE_VALUE(int);
IMP_SWIG_NATIVE_VALUE(std::string);

IMP_SWIG_VALUE(IMP::base::internal, _Protection, _Protections);

%rename(_InputAdaptor) IMP::base::InputAdaptor;
%rename(_NonCopyable) IMP::base::NonCopyable;
%rename(_RAII) IMP::base::RAII;
%rename(_Value) IMP::base::Value;

%include "IMP/base/InputAdaptor.h"
%include "IMP/base/NonCopyable.h"
%include "IMP/base/RAII.h"
%include "IMP/base/Value.h"

%include "IMP/base/Vector.h"
%include "IMP/base/types.h"
%include "IMP/base/enums.h"
%include "IMP/base/VersionInfo.h"
%include "IMP/base/RefCounted.h"
%include "IMP/base/file.h"
%include "IMP/base/log.h"
%include "IMP/base/declare_Object.h"
%include "IMP/base/Object.h"
%include "IMP/base/FailureHandler.h"
%include "IMP/base/SetLogState.h"
%include "IMP/base/WarningContext.h"
%include "IMP/base/CreateLogContext.h"
%include "IMP/base/SetCheckState.h"
%include "IMP/base/utility.h"
%include "IMP/base/internal/swig.h"
%include "IMP/base/ConstVector.h"
%include "IMP/base/Array.h"
%include "IMP/base/Index.h"
%include "IMP/base/live_objects.h"
%include "IMP/base/deprecation.h"

%pythoncode %{
import IMP
ModelException=IMP.ModelException
#used_modules=[]
#def show_used_modules():
#    for m in used_modules:
#        print "%-20s %s" % (m.get_module(), m.get_version())

import _graph_show
show_altgraph= _graph_show.show_altgraph
show_graphviz= _graph_show.show_graphviz
get_networkx_graph= _graph_show.get_networkx_graph
%}

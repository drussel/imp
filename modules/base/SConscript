Import('env')
import scons_tools.dependency
import scons_tools.dependency.boost
import scons_tools.dependency.gcc

# could use env.Command
env.Execute("%s --output=\"%s\" --datapath=\"%s\" --examplepath=\"%s\""\
            %(File("#/scons_tools/build_tools/setup_paths.py").abspath,
              File("#/build/src/base/paths.cpp").abspath, env['datadir'],
              env['docdir']+"/examples"))


deplist=[]

scons_tools.dependency.boost.add_boost_library(env, "FileSystem", "filesystem",
                                               'boost/filesystem/path.hpp',
                                               body="boost::filesystem::path p;",
                                               extra_boost_libs=["system"])
scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions", "program_options",
                                               'boost/program_options.hpp')
scons_tools.dependency.add_external_library(env, "GPerfTools",
                                            ["profiler"],
                                            "gperftools/profiler.h",
                                            body='ProfilerStop();')

scons_tools.dependency.add_external_library(env, "tcmalloc_heapchecker",
                                            ["tcmalloc"],
                                            header="gperftools/heap-checker.h",
                                            body="new HeapLeakChecker(\"profiler\");",
    enabled=False)

scons_tools.dependency.add_external_library(env, "tcmalloc_heapprofiler",
                                            ["tcmalloc"],
                                            header="gperftools/heap-profiler.h",
                                            body="HeapProfilerStart(\"profiler\");",
    enabled=False)

env.IMPModuleBuild()

Import('env')
import scons_tools.dependency
import scons_tools.dependency.boost
import scons_tools.dependency.gcc
import scons_tools.dependency.range_for
import scons_tools.dependency.enums
import sys

config=[]

if not env.GetOption('help'):
    if env['IMP_PASS']=="CONFIGURE":
        scons_tools.dependency.range_for.configure_check(env)
        scons_tools.dependency.enums.configure_check(env)

    if env.get('deprecated', True):
        config.append(['IMP_HAS_DEPRECATED', 1])
    else:
        config.append(['IMP_HAS_DEPRECATED', 0])

    if env['versionchecks']:
        if env.get("BOOST_VERSION", None):
            config.append(["IMP_BOOST_VERSION", env["BOOST_VERSION"]])

    if env['build'] == 'fast':
        config.append(["IMP_BUILD", "IMP_RELEASE"])
    elif env['build'] == 'release':
        config.append(["IMP_BUILD", "IMP_RELEASE"])
    elif env['build'] == 'debug' or env['build']=='compile':
        config.append(["IMP_BUILD", "IMP_DEBUG"])
# too hard to get swig include order right otherwise
    config.append(["IMP_DEBUG", "0"])
    config.append(["IMP_RELEASE", "1"])

    config.append(["IMP_SILENT", "0"])
    config.append(["IMP_PROGRESS", "2"])
    config.append(["IMP_TERSE", "3"])
    config.append(["IMP_VERBOSE", "4"])

    config.append(["IMP_NONE", "0"])
    config.append(["IMP_USAGE", "1"])
    config.append(["IMP_INTERNAL", "2"])

    config.append(["IMP_HAS_LOG", env['IMP_MAXLOG']])
    config.append(["IMP_HAS_CHECKS", env['IMP_MAXCHECK']])

# could use env.Command
env.Execute("%s --output=\"%s\" --datapath=\"%s\" --examplepath=\"%s\""\
            %(File("#/scons_tools/build_tools/setup_paths.py").abspath,
              File("#/build/src/base/paths.cpp").abspath, env['datadir'],
              env['docdir']+"/examples"))


deplist=[]

scons_tools.dependency.boost.add_boost_library(env, "FileSystem", "filesystem",
                                               'boost/filesystem/path.hpp',
                                               body="boost::filesystem::path p;",
                                               extra_boost_libs=["system"])
scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions", "program_options",
                                               'boost/program_options.hpp')
scons_tools.dependency.boost.add_boost_library(env, "System", "system",
                                               'boost/system/config.hpp')
scons_tools.dependency.boost.add_boost_library(env, "Graph", "graph",
                                               'boost/graph/graphviz.hpp')
scons_tools.dependency.boost.add_boost_library(env, "Random", "random",
                                               'boost/nondet_random.hpp')


env.IMPModuleBuild(config_macros=config)

Import('env')
import scons_tools.dependency
import scons_tools.dependency.boost
import scons_tools.dependency.gcc
import scons_tools.dependency.auto
import scons_tools.dependency.range_for
import scons_tools.dependency.extern
import scons_tools.dependency.override
import scons_tools.dependency.final
import scons_tools.dependency.pragma
import scons_tools.dependency.enums
import scons_tools.dependency.endian
import scons_tools.dependency.gcc
import scons_tools.dependency.nullptr

config=[]

if not env.GetOption('help'):
    if env['IMP_PASS']=="BUILD":
        scons_tools.dependency.endian.configure_check(env)
        scons_tools.dependency.auto.configure_check(env)
        scons_tools.dependency.override.configure_check(env)
        scons_tools.dependency.final.configure_check(env)
        scons_tools.dependency.pragma.configure_check(env)
        scons_tools.dependency.range_for.configure_check(env)
        scons_tools.dependency.enums.configure_check(env)
        scons_tools.dependency.extern.configure_check(env)
        scons_tools.dependency.gcc.configure_debug_vector(env)
        scons_tools.dependency.nullptr.configure_check(env)

    if not env.get('deprecated', True):
        config.append(['IMP_USE_DEPRECATED', 1])
    else:
        config.append(['IMP_USE_DEPRECATED', 1])
    if env['IMP_ENDIAN']=='little':
        config.append("IMP_LITTLE_ENDIAN")
    else:
        config.append('IMP_BIG_ENDIAN')

    if env['versionchecks']:
        if env.get("BOOST_VERSION", None):
            config.append(["IMP_BOOST_VERSION", env["BOOST_VERSION"]])
    if env.get("IMP_COMPILER_NULLPTR"):
        config.append(["IMP_COMPILER_HAS_NULLPTR", 1])
    else:
        config.append(["IMP_COMPILER_HAS_NULLPTR", 0])
    config.append(["IMP_DEBUG", "0"])
    config.append(["IMP_RELEASE", "1"])
    config.append(["IMP_FAST", "2"])

    if env['build'] == 'fast':
        config.append(["IMP_BUILD", "IMP_FAST"])
    elif env['build'] == 'release':
        config.append(["IMP_BUILD", "IMP_RELEASE"])
    elif env['build'] == 'debug' or env['build']=='compile':
        config.append(["IMP_BUILD", "IMP_DEBUG"])
    if env['build'] != 'fast' and env.get('IMP_USE_DEBUG_VECTOR', False):
        config.append(["IMP_COMPILER_HAS_DEBUG_VECTOR", 1])
    else:
        config.append(["IMP_COMPILER_HAS_DEBUG_VECTOR", 0])
    if env['IMP_COMPILER_OVERRIDE']:
        config.append(["IMP_COMPILER_HAS_OVERRIDE", "1"])
    else:
        config.append(["IMP_COMPILER_HAS_OVERRIDE", "0"])
    if env['IMP_COMPILER_FINAL']:
        config.append(["IMP_COMPILER_HAS_FINAL", "1"])
    else:
        config.append(["IMP_COMPILER_HAS_FINAL", "0"])
    if env['IMP_COMPILER_EXTERN']:
        config.append(["IMP_COMPILER_HAS_EXTERN", 1])
    else:
        config.append(["IMP_HAS_EXTERN_EXTERN", 0])
    if env['IMP_COMPILER_PRAGMA']:
        config.append(["IMP_COMPILER_HAS_PRAGMA", 1])
    else:
        config.append(["IMP_HAS_EXTERN_PRAGMA", 0])
# could use env.Command
env.Execute("%s --output=\"%s\" --datapath=\"%s\" --examplepath=\"%s\""\
            %(File("#/scons_tools/build_tools/setup_paths.py").abspath,
              File("#/build/src/base/paths.cpp").abspath, env['datadir'],
              env['docdir']+"/examples"))


deplist=[]

scons_tools.dependency.boost.add_boost_library(env, "FileSystem", "filesystem",
                                               'boost/filesystem/path.hpp',
                                               body="boost::filesystem::path p;",
                                               extra_boost_libs=["system"])
scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions", "program_options",
                                               'boost/program_options.hpp')
scons_tools.dependency.add_external_library(env, "GPerfTools",
                                            ["profiler"],
                                            "gperftools/profiler.h",
                                            body='ProfilerStop();')

# TCMalloc needs to be used by passing
# environment="LD_PRELOAD=/usr/lib64/libtcmalloc_and_profiler.so"
# in your config to ensure that it is used for all libraries that are loaded
# otherwise memory that is freed in IMP, but allocated within another .so
# causes problems
scons_tools.dependency.add_external_library(env, "tcmalloc_heapchecker",
                                            None,
                                            header="gperftools/heap-checker.h",
                                            body="new HeapLeakChecker(\"profiler\");")

scons_tools.dependency.add_external_library(env, "tcmalloc_heapprofiler",
                                            None,
                                            header="gperftools/heap-profiler.h",
                                            body="HeapProfilerStart(\"profiler\");")

scons_tools.dependency.add_external_library(env, "log4cxx",
                                            ["log4cxx"],
                                            header="log4cxx/ndc.h")

env.IMPModuleBuild(config_macros=config)

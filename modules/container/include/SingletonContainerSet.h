/**
 *  \file IMP/container/SingletonContainerSet.h
 *  \brief Store a set of SingletonContainers
 *
 *  This file is generated by a script (tools/maintenance/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 */

#ifndef IMPCONTAINER_SINGLETON_CONTAINER_SET_H
#define IMPCONTAINER_SINGLETON_CONTAINER_SET_H

#include "container_config.h"
#include <IMP/SingletonContainer.h>
#include <IMP/container_macros.h>
#include <IMP/internal/container_helpers.h>
#include <IMP/scoped.h>

IMPCONTAINER_BEGIN_NAMESPACE

//! Stores a set of SingletonContainers
/** The input sets must be disjoint. This can change if there is
    demand for it.

    \usesconstraint
*/
class IMPCONTAINEREXPORT SingletonContainerSet
  : public SingletonContainer
{
  static SingletonContainerSet* get_set(SingletonContainer* c) {
    return dynamic_cast<SingletonContainerSet*>(c);
  }
 public:
  //! Construct and empty set
  SingletonContainerSet(Model *m,
                        std::string name="SingletonContainerSet %1%");

  SingletonContainerSet(const SingletonContainersTemp &pc,
                        std::string name="SingletonContainerSet %1%");

  /** \brief apply modifer sm to all singleton containers */
  void apply(const SingletonModifier *sm) const;

  template <class M>
      void apply_generic(const M*m) const {
    apply(m);
  }

  bool get_is_changed() const;
  ParticleIndexes get_all_possible_indexes() const;
  IMP_OBJECT(SingletonContainerSet);

  /** @name Methods to control the nested container

      This container merges a set of nested containers. To add
      or remove nested containers, use the methods below.
  */
  /**@{*/
  IMP_LIST_ACTION(public, SingletonContainer, SingletonContainers,
                  singleton_container, singleton_containers,
                  SingletonContainer*, SingletonContainers,
                  {
                    obj->set_was_used(true);
                    set_is_changed(true);
                  },{},
                  );
  /**@}*/
#ifndef IMP_DOXYGEN
  ParticleIndexes get_indexes() const;
  ParticleIndexes get_range_indexes() const;
  ModelObjectsTemp do_get_inputs() const;
  void do_before_evaluate();
#endif
};


IMPCONTAINER_END_NAMESPACE

#endif  /* IMPCONTAINER_SINGLETON_CONTAINER_SET_H */

/**
 *  \file DynamicListSingletonContainer.cpp
 *  \brief A list of ParticlesTemp.
 *
 *  This file is generated by a script (internal/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/internal/InternalDynamicListSingletonContainer.h"
#include "IMP/SingletonModifier.h"
#include <IMP/base/check_macros.h>
#include <IMP/compatibility/set.h>
#include <algorithm>


IMP_BEGIN_INTERNAL_NAMESPACE

InternalDynamicListSingletonContainer
::InternalDynamicListSingletonContainer(Container *m,
                                        std::string name):
    P(m->get_model(), name), scope_(m) {
}


InternalDynamicListSingletonContainer
::InternalDynamicListSingletonContainer(Container *m,
                                        const char *name):
    P(m->get_model(), name), scope_(m) {
}


void InternalDynamicListSingletonContainer::do_show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << get_number_of_particles()
      << " Singletons." << std::endl;
}



void InternalDynamicListSingletonContainer
::remove_particles(const ParticlesTemp &c) {
  if (c.empty()) return;
  get_model()->reset_dependencies();
  ParticleIndexes cp= IMP::internal::get_index(c);
  remove_from_list(cp);
  IMP_IF_CHECK(base::USAGE) {
    for (unsigned int i=0; i< c.size(); ++i) {
      IMP_USAGE_CHECK(IMP::internal::is_valid(c[i]),
                    "Passed Singleton cannot be nullptr (or None)");
    }
  }
}

void InternalDynamicListSingletonContainer::
check_list() const {
  ParticlesTemp app= scope_->get_all_possible_particles();

  compatibility::set<Particle*> all(app.begin(),
                                    app.end());
  ParticlesTemp flat= IMP::internal::flatten(get());
  for (unsigned int i=0; i< flat.size(); ++i) {
    IMP_USAGE_CHECK(all.find(flat[i]) != all.end(),
                    "Particle " << Showable(flat[i])
                    << " is not in the list of all possible particles");
  }
}

ParticlesTemp
InternalDynamicListSingletonContainer::get_all_possible_particles() const {
  return scope_->get_all_possible_particles();
}

void InternalDynamicListSingletonContainer::do_before_evaluate() {
}


ParticlesTemp
InternalDynamicListSingletonContainer::get_input_particles() const {
  return ParticlesTemp();
}

ContainersTemp
InternalDynamicListSingletonContainer::get_input_containers() const {
  return ContainersTemp();
}


ParticleIndexes
InternalDynamicListSingletonContainer::get_all_possible_indexes() const {
  IMP_NOT_IMPLEMENTED;
  return ParticleIndexes();
}


IMP_END_INTERNAL_NAMESPACE

/**
 *  \file ListPairContainer.cpp   \brief A list of ParticlePairsTemp.
 *
 *  This file is generated by a script (internal/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/internal/InternalListPairContainer.h"
#include "IMP/PairModifier.h"
#include <IMP/base/check_macros.h>
#include <algorithm>


IMP_BEGIN_INTERNAL_NAMESPACE

InternalListPairContainer
::InternalListPairContainer(Model *m, std::string name):
  P(m, name){
}


InternalListPairContainer
::InternalListPairContainer(Model *m, const char *name):
  P(m, name){
}


void InternalListPairContainer::do_show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << get_number_of_particle_pairs()
      << " Pairs." << std::endl;
}



void InternalListPairContainer
::remove_particle_pairs(const ParticlePairsTemp &c) {
  if (c.empty()) return;
  get_model()->reset_dependencies();
  ParticleIndexPairs cp= IMP::internal::get_index(c);
  remove_from_list(cp);
  IMP_IF_CHECK(base::USAGE) {
    for (unsigned int i=0; i< c.size(); ++i) {
      IMP_USAGE_CHECK(IMP::internal::is_valid(c[i]),
                    "Passed Pair cannot be nullptr (or None)");
    }
  }
}

ParticlesTemp
InternalListPairContainer::get_all_possible_particles() const {
  return IMP::internal::flatten(get());
}

ParticleIndexPairs
InternalListPairContainer::get_all_possible_indexes() const {
  return get_indexes();
}

void InternalListPairContainer::do_before_evaluate() {
}


ParticlesTemp
InternalListPairContainer::get_input_particles() const {
  return ParticlesTemp();
}

ContainersTemp
InternalListPairContainer::get_input_containers() const {
  return ContainersTemp();
}

IMP_END_INTERNAL_NAMESPACE

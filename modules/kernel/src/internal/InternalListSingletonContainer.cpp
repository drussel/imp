/**
 *  \file ListSingletonContainer.cpp   \brief A list of ParticlesTemp.
 *
 *  This file is generated by a script (internal/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#include "IMP/internal/InternalListSingletonContainer.h"
#include "IMP/SingletonModifier.h"
#include <IMP/base/check_macros.h>
#include <algorithm>


IMP_BEGIN_INTERNAL_NAMESPACE

InternalListSingletonContainer
::InternalListSingletonContainer(Model *m, std::string name):
  P(m, name){
}


InternalListSingletonContainer
::InternalListSingletonContainer(Model *m, const char *name):
  P(m, name){
}
void InternalListSingletonContainer::add(ParticleIndex vt) {
  get_model()->clear_caches();
  ParticleIndexes cur;
  swap(cur);
  cur.push_back(vt);
  swap(cur);
}
void InternalListSingletonContainer
::add(const ParticleIndexes &c) {
  if (c.empty()) return;
  get_model()->clear_caches();
  ParticleIndexes cur;
  swap(cur);
  cur+=c;
  swap(cur);
}
void InternalListSingletonContainer::set(ParticleIndexes cp) {
  get_model()->clear_caches();
  swap(cp);
}
void InternalListSingletonContainer::clear() {
  get_model()->clear_caches();
  ParticleIndexes t;
  swap(t);
}
void InternalListSingletonContainer::remove(ParticleIndex vt) {
  get_model()->clear_caches();
  ParticleIndexes t;
  swap(t);
  t.erase(std::remove(t.begin(), t.end(), vt), t.end());
  swap(t);
}
void InternalListSingletonContainer::do_show(std::ostream &out) const {
  IMP_CHECK_OBJECT(this);
  out << get_access()
      << " Singletons." << std::endl;
}


ParticleIndexes
InternalListSingletonContainer::get_all_possible_indexes() const {
  return IMP::internal::flatten(get_indexes());
}

ParticleIndexes
InternalListSingletonContainer::get_range_indexes() const {
  return get_indexes();
}

void InternalListSingletonContainer::do_before_evaluate() {
}


ParticlesTemp
InternalListSingletonContainer::get_input_particles() const {
  return ParticlesTemp();
}

ContainersTemp
InternalListSingletonContainer::get_input_containers() const {
  return ContainersTemp();
}

IMP_END_INTERNAL_NAMESPACE

%{
#include <IMP/internal/swig.h>
%}

%pythoncode %{
import os
i_m_p="IMP_MODULE_PATH"
if i_m_p in os.environ.keys():
  __path__.insert(0, os.environ[i_m_p])

def _forward_add_attribute(self, name, value, opt=None):
    if opt is not None:
        self.get_particle().add_attribute(name, value, opt)
    else:
        self.get_particle().add_attribute(name, value)
def _forward_get_value(self, name):
    self.get_particle().get_value(name)
def _forward_set_value(self, name, value):
    self.get_particle().set_value(name, value)
%}


%typemap(in) char * {
  strings_must_be_passed_by_std_string;
}
%typemap(out) char * {
  strings_must_be_passed_by_std_string;
}

%extend IMP::Particle {
  bool __eq__(const Particle *o) const {
     return self ==o;
  }
  bool __ne__(const Particle *o) const {
     return self !=o;
  }
  bool __le__(const Particle *o) const {
     return self <= o;
  }
  bool __lt__(const Particle *o) const {
     return self < o;
  }
  bool __ge__(const Particle *o) const {
     return self >= o;
  }
  bool __gt__(const Particle *o) const {
     return self > o;
  }
  bool __eq__(const IMP::Decorator &d) const {
     return self == d.get_particle();
  }
  bool __ne__(const IMP::Decorator &d) const {
     return self != d.get_particle();
  }
  bool __le__(const IMP::Decorator &d) const {
     return self <= d.get_particle();
  }
  bool __lt__(const IMP::Decorator &d) const {
     return self < d.get_particle();
  }
  bool __ge__(const IMP::Decorator &d) const {
     return self >= d.get_particle();
  }
  bool __gt__(const IMP::Decorator &d) const {
     return self > d.get_particle();
  }
}


#if IMP_BUILD == IMP_FAST
%pythoncode %{
build="fast"
%}
#elif IMP_BUILD == IMP_RELEASE
%pythoncode %{
build="release"
%}
#else
%pythoncode %{
build="debug"
%}
#endif


namespace IMP {
%warnfilter(473) Refiner;
%warnfilter(473) SingletonContainer;
%warnfilter(473) PairContainer;
%warnfilter(403) Constraint;
%warnfilter(403) ModelObject;
%warnfilter(473) Sampler;
%warnfilter(473) Restraint;
}
// to avoid extend clash
IMP_SWIG_BASE_OBJECT(IMP,Constraint, Constraints);
IMP_SWIG_BASE_OBJECT(IMP,Container, Containers);
IMP_SWIG_BASE_OBJECT(IMP,Optimizer, Optimizers);
IMP_SWIG_BASE_OBJECT(IMP,OptimizerState, OptimizerStates);
IMP_SWIG_BASE_OBJECT(IMP,PairContainer, PairContainers);
IMP_SWIG_BASE_OBJECT(IMP,PairModifier, PairModifiers);
IMP_SWIG_BASE_OBJECT(IMP,PairDerivativeModifier, PairDerivativeModifiers);
IMP_SWIG_BASE_OBJECT(IMP,PairScore, PairScores);
IMP_SWIG_BASE_OBJECT(IMP,QuadContainer, QuadContainers);
IMP_SWIG_BASE_OBJECT(IMP,QuadModifier, QuadModifiers);
IMP_SWIG_BASE_OBJECT(IMP,QuadDerivativeModifier, QuadDerivativeModifiers);
IMP_SWIG_BASE_OBJECT(IMP,QuadScore, QuadScores);
IMP_SWIG_BASE_OBJECT(IMP,Refiner, Refiners);
IMP_SWIG_BASE_OBJECT(IMP,Restraint, Restraints);
IMP_SWIG_BASE_OBJECT(IMP,Sampler, Samplers);
IMP_SWIG_BASE_OBJECT(IMP,ScoreState, ScoreStates);
IMP_SWIG_BASE_OBJECT(IMP,SingletonContainer, SingletonContainers);
IMP_SWIG_BASE_OBJECT(IMP,SingletonModifier, SingletonModifiers);
IMP_SWIG_BASE_OBJECT(IMP,SingletonDerivativeModifier, SingletonDerivativeModifiers);
IMP_SWIG_BASE_OBJECT(IMP,SingletonScore, SingletonScores);
IMP_SWIG_BASE_OBJECT(IMP,TripletContainer, TripletContainers);
IMP_SWIG_BASE_OBJECT(IMP,TripletModifier, TripletModifiers);
IMP_SWIG_BASE_OBJECT(IMP,TripletDerivativeModifier, TripletDerivativeModifiers);
IMP_SWIG_BASE_OBJECT(IMP,TripletScore, TripletScores);
IMP_SWIG_BASE_OBJECT(IMP,UnaryFunction, UnaryFunctions);
IMP_SWIG_OBJECT(IMP,ConfigurationSet, ConfigurationSets);
IMP_SWIG_OBJECT(IMP,Configuration, Configurations);
IMP_SWIG_OBJECT(IMP,Model, Models);
IMP_SWIG_OBJECT(IMP,Particle, Particles);

IMP_SWIG_NESTED_SEQUENCE_TYPEMAP(IMP::Particle, IMP::ParticlesTemp, IMP::ParticlesTemps, const&);
IMP_SWIG_NESTED_SEQUENCE_TYPEMAP(IMP::Particle, IMP::ParticlesTemp, IMP::ParticlesTemps,);

IMP_SWIG_OBJECT(IMP,RestraintSet, RestraintSets);
IMP_SWIG_OBJECT_TUPLE(IMP, ParticlePair, ParticlePairs);
IMP_SWIG_OBJECT_TUPLE(IMP, ParticleTriplet, ParticleTriplets);
IMP_SWIG_OBJECT_TUPLE(IMP, ParticleQuad, ParticleQuads);
IMP_SWIG_VALUE_TUPLE(IMP, ParticleIndexPair, ParticleIndexPairs);
IMP_SWIG_VALUE_TUPLE(IMP, ParticleIndexTriplet, ParticleIndexTriplets);
IMP_SWIG_VALUE_TUPLE(IMP, ParticleIndexQuad, ParticleIndexQuads);
IMP_SWIG_BASE_OBJECT(IMP, SingletonPredicate, SingletonPredicates);
IMP_SWIG_BASE_OBJECT(IMP, PairPredicate, PairPredicates);
IMP_SWIG_BASE_OBJECT(IMP, TripletPredicate, TripletPredicates);
IMP_SWIG_BASE_OBJECT(IMP, QuadPredicate, QuadPredicates);

#ifdef IMP_USE_DEPRECATED
IMP_SWIG_OBJECT(IMP, WriteParticlesOptimizerState, WriteParticlesOptimizerStates);
IMP_SWIG_OBJECT(IMP, WriteParticlesFailureHandler, WriteParticlesFailureHandlers);
#ifdef IMP_KERNEL_USE_NETCDFCPP
IMP_SWIG_OBJECT(IMP, WriteParticlesBinaryOptimizerState, WriteParticlesBinaryOptimizerStates);
IMP_SWIG_OBJECT(IMP, WriteParticlesBinaryFailureHandler, WriteParticlesBinaryFailureHandlers);
#endif
#endif

IMP_SWIG_OBJECT(IMP, SaveToConfigurationSetOptimizerState, SaveToConfigurationSetOptimizerStates);
IMP_SWIG_OBJECT(IMP, SaveToConfigurationSetFailureHandler, SaveToConfigurationSetFailureHandlers);

// derivative accumulator is weird
// IMP_SWIG_VALUE(IMP, DerivativeAccumulator, DerivativeAccumulators);
IMP_SWIG_VALUE_INSTANCE(IMP, ParticleIndex, base::Index, ParticleIndexes);
IMP_SWIG_VALUE_INSTANCE(IMP, FloatKey, Key, FloatKeys);
IMP_SWIG_VALUE_INSTANCE(IMP, IntKey, Key, IntKeys);
IMP_SWIG_VALUE_INSTANCE(IMP, StringKey, Key, StringKeys);
IMP_SWIG_VALUE_INSTANCE(IMP, ParticleKey, Key, ParticleKeys);
IMP_SWIG_VALUE_INSTANCE(IMP, ObjectKey, Key, ObjectKeys);
IMP_SWIG_VALUE_TEMPLATE(IMP, Key);
IMP_SWIG_RAII(IMP, ScopedFailureHandler);
IMP_SWIG_RAII_INSTANCE(IMP, ScopedRestraint, GenericScopedRestraint);
IMP_SWIG_RAII_INSTANCE(IMP, ScopedRemoveRestraint, GenericScopedRemoveRestraint);
IMP_SWIG_RAII_INSTANCE(IMP, ScopedRemoveScoreState, GenericScopedRemoveScoreState);
IMP_SWIG_RAII_INSTANCE(IMP, ScopedScoreState, GenericScopedScoreState);
IMP_SWIG_RAII_TEMPLATE(IMP, GenericScopedRestraint);
IMP_SWIG_RAII_TEMPLATE(IMP, GenericScopedScoreState);
IMP_SWIG_RAII_TEMPLATE(IMP, ScopedSetAttribute);
IMP_SWIG_RAII_INSTANCE(IMP, ScopedSetFloatAttribute, ScopedSetAttribute);

IMP_SWIG_VALUE(IMP, RestraintStatistics, RestraintStatisticsList);
IMP_SWIG_BASE_OBJECT(IMP, ScoringFunction, ScoringFunctions);
IMP_SWIG_BASE_OBJECT(IMP, ModelObject, ModelObjects);


IMP_SWIG_DECORATOR(IMP::internal, _TrivialDecorator, _TrivialDecorators);
IMP_SWIG_DECORATOR(IMP::internal, _TrivialDerivedDecorator, _TrivialDerivedDecorators);
IMP_SWIG_DECORATOR_WITH_TRAITS(IMP::internal, _TrivialTraitsDecorator, _TrivialTraitsDecorators);
IMP_SWIG_OBJECT(IMP::internal, _ConstRestraint, _ConstRestraints);
IMP_SWIG_OBJECT(IMP::internal, _ConstOptimizer, _ConstOptimizers);
IMP_SWIG_VALUE(IMP::internal, _Value, _Values);
IMP_SWIG_GRAPH(IMP, DependencyGraph, DependencyGraph, IMP::ModelObject*);


IMP_SWIG_CONTAINER(IMP, IMP, RestraintSet, Restraint, restraint)
IMP_SWIG_CONTAINER(IMP, IMP, Model, ScoreState, score_state)
IMP_SWIG_CONTAINER(IMP, IMP, Model, Restraint, restraint)
IMP_SWIG_CONTAINER(IMP, IMP, Optimizer, OptimizerState, optimizer_state)

%include "IMP/utility.h"
%include "IMP/Key.h"

namespace IMP {
  %template(FloatKey) ::IMP::Key<0, true>;
  %template(IntKey) ::IMP::Key<1, true>;
  %template(StringKey) ::IMP::Key<2, true>;
  %template(ParticleKey) ::IMP::Key<3, true>;
  %template(ObjectKey) ::IMP::Key<4, true>;
  %template(ParticleIndex) ::IMP::base::Index<IMP::ParticleIndexTag>;
}

%inline %{
namespace IMP {
template <class T, class P, class E>
class Decorators;
template <unsigned int D>
class ParticleTuple;
#ifdef SWIG
class ParticlePair;
class ParticleTriplet;
class ParticleQuad;
class ParticlePairs;
class ParticleTriplets;
class ParticleQuads;
class ParticlePairsTemp;
class ParticleTripletsTemp;
class ParticleQuadsTemp;
#endif
}
%}


%pythoncode %{
  def ParticlePair(a, b):
    return (a,b)
  def ParticleTriplet(a, b, c):
    return (a,b,c)
  def ParticleQuad(a, b, c, d):
    return (a,b,c,d)
%}

%rename(_ParticleIndexTag) ParticleIndexTag;
%rename(_ScoringFunctionAdaptor) ScoringFunctionAdaptor;
%rename(_SingletonContainerAdaptor) SingletonContainerAdaptor;
%rename(_PairContainerAdaptor) PairContainerAdaptor;
%rename(_TripletContainerAdaptor) TripletContainerAdaptor;
%rename(_QuadContainerAdaptor) QuadContainerAdaptor;

%include "IMP/particle_index.h"

%include "IMP/base_types.h"
%include "IMP/constants.h"
%include "IMP/ModelObject.h"
%include "IMP/utility.h"
%include "IMP/DerivativeAccumulator.h"
%include "IMP/ScoreState.h"
%include "IMP/Constraint.h"
%include "IMP/container_base.h"

namespace IMP {
  class Restraints;
  class ScoreStates;
}

%include "IMP/declare_Restraint.h"
%include "IMP/declare_RestraintSet.h"
%include "IMP_kernel_particle.i"
%include "IMP/dependency_graph.h"
%include "IMP/declare_ScoringFunction.h"
%include "IMP/declare_Model.h"
%include "IMP/Decorator.h"
%include "IMP/UnaryFunction.h"
%include "IMP/OptimizerState.h"
%include "IMP/Refiner.h"
%include "IMP/Optimizer.h"
%include "IMP/ConfigurationSet.h"
%include "IMP/Configuration.h"
%include "IMP/Sampler.h"
%include "IMP/PairDerivativeModifier.h"
%include "IMP/PairModifier.h"
%include "IMP/PairScore.h"
%include "IMP/PairPredicate.h"
%include "IMP/declare_PairContainer.h"
%include "IMP/QuadDerivativeModifier.h"
%include "IMP/QuadModifier.h"
%include "IMP/QuadScore.h"
%include "IMP/QuadPredicate.h"
%include "IMP/declare_QuadContainer.h"
%include "IMP/SingletonDerivativeModifier.h"
%include "IMP/SingletonModifier.h"
%include "IMP/SingletonScore.h"
%include "IMP/SingletonPredicate.h"
%include "IMP/declare_SingletonContainer.h"
%include "IMP/TripletDerivativeModifier.h"
%include "IMP/TripletModifier.h"
%include "IMP/TripletScore.h"
%include "IMP/TripletPredicate.h"
%include "IMP/declare_TripletContainer.h"
%include "IMP/io.h"
%include "IMP/internal/swig.h"
%include "IMP/scoped.h"


namespace IMP {
  %template(ScopedScoreState) ::IMP::GenericScopedScoreState< IMP::ScoreState>;
  %template(ScopedRestraint) ::IMP::GenericScopedRestraint< IMP::Restraint>;
  %template(ScopedRemoveRestraint) ::IMP::GenericScopedRemoveRestraint< IMP::Restraint>;
  %template(ScopedRemoveScoreState) ::IMP::GenericScopedRemoveScoreState< IMP::ScoreState>;
  %template(ScopedSetFloatAttribute) ::IMP::ScopedSetAttribute<FloatKey, Float>;
}


%pythoncode %{
#used_modules=[]
#def show_used_modules():
#    for m in used_modules:
#        print "%-20s %s" % (m.get_module(), m.get_version())


import IMP.base
get_networkx_graph=IMP.base.get_networkx_graph
show_altgraph=IMP.base.show_altgraph
show_graphviz=IMP.base.show_graphviz
SetLogState= IMP.base.SetLogState
SetLogTarget= IMP.base.SetLogTarget
Object= IMP.base.Object
NONE= IMP.base.NONE
USAGE= IMP.base.USAGE
USAGE_AND_INTERNAL= IMP.base.USAGE_AND_INTERNAL
TERSE= IMP.base.TERSE
SILENT= IMP.base.SILENT
VERBOSE= IMP.base.VERBOSE
WARNING= IMP.base.WARNING
PROGRESS= IMP.base.PROGRESS
MEMORY= IMP.base.MEMORY
create_temporary_file= IMP.base.create_temporary_file
create_temporary_file_name= IMP.base.create_temporary_file_name
FailureHandler= IMP.base.FailureHandler
FailureHandlerBase= IMP.base.FailureHandlerBase
add_failure_handler= IMP.base.add_failure_handler
remove_failure_handler= IMP.base.remove_failure_handler
random_number_generator= IMP.base.random_number_generator
set_log_level=IMP.base.set_log_level
set_log_timer=IMP.base.set_log_timer
get_log_level=IMP.base.get_log_level
add_to_log= IMP.base.add_to_log
set_check_level= IMP.base.set_check_level
get_check_level= IMP.base.get_check_level
%}

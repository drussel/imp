/**
 *  \file TripletScore.h    \brief Define TripletScore.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2012 IMP Inventors. All rights reserved.
 */

#ifndef IMPKERNEL_TRIPLET_SCORE_H
#define IMPKERNEL_TRIPLET_SCORE_H

#include "kernel_config.h"
#include "base_types.h"
#include "ParticleTuple.h"
#include "DerivativeAccumulator.h"
#include "internal/container_helpers.h"

IMP_BEGIN_NAMESPACE

//! Abstract score function
/** TripletScores will evaluate the score and derivatives
    for the passed particles. Use in conjunction with various
    restraints such as IMP::core::TripletsRestraint or
    IMP::core::TripletRestraint.

    Implementers should check out IMP_TRIPLET_SCORE().
*/
class IMPEXPORT TripletScore : public base::Object
{
 public:
  typedef ParticleTriplet Argument;
  typedef ParticleIndexTriplet IndexArgument;
  TripletScore(std::string name="TripletScore %1%");
  //! Compute the score and the derivative if needed.
  virtual double evaluate(const ParticleTriplet& vt,
                          DerivativeAccumulator *da) const =0;

  /** Implementations
      for these are provided by the IMP_TRIPLET_SCORE()
      macro.
  */
  virtual double evaluate(const ParticleTripletsTemp &o,
                          DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< o.size(); ++i) {
      ret+= evaluate(o[i], da);
    }
    return ret;
  }



  //! Compute the score and the derivative if needed.
  virtual double evaluate_index(Model *m, const ParticleIndexTriplet& vt,
                                DerivativeAccumulator *da) const {
    return evaluate(internal::get_particle(m, vt), da);
  }

  /** Implementations
      for these are provided by the IMP_TRIPLET_SCORE()
      macro.
  */
  virtual double evaluate_indexes(Model *m,
                                  const ParticleIndexTriplets &o,
                                  DerivativeAccumulator *da) const {
    double ret=0;
    for (unsigned int i=0; i< o.size(); ++i) {
      ret+= evaluate_index(m, o[i], da);
    }
    return ret;
  }


  //! Compute the score and the derivative if needed.
  virtual double evaluate_if_good_index(Model *m,
                                        const ParticleIndexTriplet& vt,
                                        DerivativeAccumulator *da,
                                        double max) const {
    IMP_UNUSED(max);
    return evaluate_index(m, vt, da);
  }

  /** Implementations
      for these are provided by the IMP_TRIPLET_SCORE()
      macro.
  */
  virtual double evaluate_if_good_indexes(Model *m,
                                          const ParticleIndexTriplets &o,
                                          DerivativeAccumulator *da,
                                          double max) const {
    double ret=0;
    for (unsigned int i=0; i< o.size(); ++i) {
      double cur= evaluate_index(m, o[i], da);
      max-=cur;
      ret+=cur;
      if (max<0) break;
    }
    return ret;
  }

  /** Get the set of particles read when applied to the arguments. */
  virtual ParticlesTemp
    get_input_particles(Particle *p) const =0;

  /** Get the set of input containers when this modifier is applied to
      the arguments. */
  virtual ContainersTemp
    get_input_containers(Particle *p) const =0;

  /** Decompose this pair score acting on the pair into a set of
      restraints. The scoring function and derivatives should
      be equal to the current score. The defualt implementation
      just returns this object bound to the pair.*/
  Restraints create_current_decomposition(const ParticleTriplet& vt) const;

  IMP_REF_COUNTED_DESTRUCTOR(TripletScore);
};

/** A TripletScoreRestraint is a restraint where the score (and
    derivative values) can be decomposed into an application
    of a TripletScore onto a ParticleTriplet.
*/
class IMPEXPORT TripletScoreRestraint: public Restraint {
public:
  TripletScoreRestraint(std::string name);
  virtual TripletScore *get_score() const =0;
  virtual ParticleTriplet get_argument() const=0;
};

IMP_OBJECTS(TripletScoreRestraint, TripletScoreRestraints);

/** A TripletsScoreRestraint is a restraint where the score (and
    derivative values) can be decomposed into a series of applications
    of a TripletScore onto a ParticleTriplet.
*/
class IMPEXPORT TripletsScoreRestraint: public Restraint {
public:
  TripletsScoreRestraint(std::string name);
  virtual TripletScore *get_score() const =0;
  virtual ParticleTripletsTemp get_arguments() const=0;
};

IMP_OBJECTS(TripletsScoreRestraint, TripletsScoreRestraints);

IMP_END_NAMESPACE

#include "generic.h"

#endif  /* IMPKERNEL_TRIPLET_SCORE_H */

/**
 *  \file PairContainer.h    \brief A container for Pairs.
 *
 *  This file is generated by a script (core/tools/make-container).
 *  Do not edit directly.
 *
 *  Copyright 2007-2011 IMP Inventors. All rights reserved.
 */

#ifndef IMPKERNEL_PAIR_CONTAINER_H
#define IMPKERNEL_PAIR_CONTAINER_H

#include "kernel_config.h"
#include "internal/IndexingIterator.h"
#include "Particle.h"
#include "container_base.h"
#include "VersionInfo.h"
#include "DerivativeAccumulator.h"
#include "internal/OwnerPointer.h"
#include "ParticleTuple.h"
#include "PairScore.h"
#include "PairModifier.h"
#include "PairDerivativeModifier.h"
#include "macros.h"

IMP_BEGIN_NAMESPACE

class PairContainer;
typedef std::pair<PairContainer*,
                  PairContainer*> PairContainerPair;

//! A shared container for Pairs
/** Stores a searchable shared collection of Pairs.
    \ingroup restraints

    \implementationwithoutexample{PairContainer, IMP_PAIR_CONTAINER}
 */
class IMPEXPORT PairContainer : public Container
{
 protected:
  PairContainer(){}
  PairContainer(Model *m,
                     std::string name="PairContainer %1%");
#ifndef IMP_DOXYGEN
  template <class S>
    double call_evaluate_index(const S *s,
                         const ParticleIndexPair& a,
                         DerivativeAccumulator *da) const {
    return s->S::evaluate_index(get_model(), a, da);
  }
  double call_evaluate_index(const PairScore *s,
                              const ParticleIndexPair& a,
                              DerivativeAccumulator *da) const {
    return s->evaluate_index(get_model(), a, da);
  }
  template <class S>
    double call_evaluate_if_good_index(const S *s,
                                 const ParticleIndexPair& a,
                                 DerivativeAccumulator *da,
                                 double max) const {
    return s->S::evaluate_if_good_index(get_model(), a, da, max);
  }
  double call_evaluate_if_good_index(const PairScore *s,
                                      const ParticleIndexPair& a,
                                      DerivativeAccumulator *da,
                                      double max) const {
    return s->evaluate_if_good_index(get_model(), a, da, max);
  }
  template <class S>
    void call_apply_index(const S *s,
                    const ParticleIndexPair& a) const {
    s->S::apply_index(get_model(), a);
  }
  void call_apply(const PairModifier *s,
                         const ParticleIndexPair& a) const {
    s->apply_index(get_model(), a);
  }
  template <class S>
    void call_apply_index(const S *s,
                           const ParticleIndexPair& a,
                           DerivativeAccumulator *&da) const {
    s->S::apply_index(get_model(), a, da);
  }
  void call_apply_index(const PairDerivativeModifier *s,
                  const ParticleIndexPair& a,
                  DerivativeAccumulator &da) const {
    s->apply_index(get_model(), a, da);
  }
#endif
public:
  typedef ParticlePair ContainedType;
  /** \note This function may be linear. Be aware of the complexity
      bounds of your particular container.
   */
  virtual bool get_contains_particle_pair(const ParticlePair& v) const =0;

  ParticlePairsTemp get_particle_pairs() const {
    return IMP::internal::get_particle(get_model(),
                                       get_indexes());
  }
#ifndef IMP_DOXGEN
  //! return the number of Pairs in the container
  /** \note this isn't always constant time
   */
  virtual unsigned int get_number_of_particle_pairs() const {
    return get_number();
  }

  virtual ParticlePair get_particle_pair(unsigned int i) const {
    return get(i);
  }

#endif

  //! Apply a SingletonModifier to the contents
  virtual void apply(const PairModifier *sm)=0;

  //! Apply a SingletonModifier to the contents
  virtual void apply(const PairDerivativeModifier *sm,
                     DerivativeAccumulator &da)=0;

  //! Evaluate a score on the contents
  virtual double evaluate(const PairScore *s,
                          DerivativeAccumulator *da) const=0;

  //! Evaluate a score on the contents
  virtual double evaluate_if_good(const PairScore *s,
                                  DerivativeAccumulator *da,
                                  double max) const=0;

  /** Return true if the contents of the container changed since the last
      evaluate.
  */
  virtual bool get_contents_changed() const=0;

#ifndef IMP_DOXYGEN
  typedef ParticlePair value_type;
  ParticlePair get(unsigned int i) const {
    return IMP::internal::get_particle(get_model(),
                                       get_indexes()[i]);
  }
  ParticlePairsTemp get() const {
    return IMP::internal::get_particle(get_model(), get_indexes());
  }
  bool get_contains(const ParticlePair& v) const {
    return get_contains_particle_pair(v);
  }
  unsigned int get_number() const {return get_indexes().size();}
  virtual ParticleIndexPairs get_indexes() const=0;
  virtual ParticleIndexPairs get_all_possible_indexes() const=0;
  virtual Restraints create_decomposition(PairScore *s) const=0;
#ifndef SWIG
  virtual bool get_provides_access() const {return false;}
  virtual const ParticleIndexPairs& get_access() const {
    IMP_THROW("Object not implemented properly.", IndexException);
  }
#endif
#endif

  IMP_REF_COUNTED_NONTRIVIAL_DESTRUCTOR(PairContainer);
};

IMP_OBJECTS(PairContainer,PairContainers);

IMP_END_NAMESPACE

#endif  /* IMPKERNEL_PAIR_CONTAINER_H */

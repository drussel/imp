%include "IMP/rmf/infrastructure_macros.h"

/* Apply the passed macro to each basic type used in RMF*/
%define IMP_RMF_SWIG_FOREACH_SIMPLE_TYPE(macroname)
  macroname(int, Int);
  macroname(float, Float);
  macroname(index, Index);
%enddef

/* Apply the passed macro to each type used in RMF */
%define IMP_RMF_SWIG_FOREACH_TYPE(macroname)
  IMP_RMF_SWIG_FOREACH_SIMPLE_TYPE(macroname);
  macroname(string, String);
  macroname(node_id, NodeID);
  macroname(data_set, DataSet);
  macroname(node_ids, NodeIDs);
  macroname(ints, Ints);
%enddef

%pythoncode %{
_types_list=[]
def get_data_types():
   return _types_list
%}

/* Declare the needed things for each type */
%define IMP_RMF_SWIG_DECLARE_TYPE(lcname, Ucname)
namespace rmf {
%rename(_##Ucname##Traits) Ucname##Traits;
}
IMP_SWIG_VALUE_INSTANCE(rmf, Ucname##Key, Ucname##Key, Ucname##Keys);
IMP_SWIG_VALUE_INSTANCE(rmf, HDF5##Ucname##DataSet, HDF5##Ucname##DataSet, HDF5##Ucname##DataSets);
%pythoncode %{
_types_list.append(#lcname)
%}
%enddef


%define IMP_RMF_SWIG_DEFINE_TYPE(lcname, Ucname)
%template(HDF5##Ucname##DataSet) rmf::HDF5DataSet<rmf::Ucname##Traits>;
%template(Ucname##Key) rmf::Key<rmf::Ucname##Traits>;
%enddef


IMP_SWIG_GRAPH(rmf, NodeTree, NodeTree, rmf::NodeHandle);
IMP_SWIG_VALUE(rmf, NodeHandle, NodeHandles);
IMP_SWIG_VALUE(rmf, RootHandle, RootHandles);
IMP_SWIG_VALUE(rmf, NodeID, NodeIDs);
IMP_SWIG_VALUE(rmf, Category, Categories);
IMP_SWIG_VALUE_TEMPLATE(rmf, Key);
IMP_SWIG_VALUE(rmf, HDF5Group, HDF5Groups);
IMP_SWIG_VALUE(rmf, HDF5File, HDF5Files);
IMP_SWIG_VALUE_TEMPLATE(rmf, HDF5DataSet);
IMP_SWIG_PAIR(rmf, NodeHandle, BondPair, BondPairs)
IMP_SWIG_OBJECT(IMP::rmf, SaveHierarchyConfigurationOptimizerState, SaveHierarchyConfigurationOptimizerStates);
IMP_SWIG_OBJECT(IMP::rmf, RMFWriter, RMFWriters);

IMP_RMF_SWIG_FOREACH_TYPE(IMP_RMF_SWIG_DECLARE_TYPE);

// char is special cased since it is just used for attributes
namespace rmf {
%rename(_CharTraits) CharTraits;
}

%extend rmf::RootHandle {
   %pythoncode %{
    def get_keys(self, kc):
        ret=[]
        for t in _types_list:
           fn= getattr(self, "get_"+t+"_keys")
           ret.extend(fn(kc))
        return ret
  %}
}

%include "IMP/rmf/NodeID.h"
%include "IMP/rmf/hdf5_handle.h"
%include "IMP/rmf/hdf5_types.h"
%template(_IntsTraits) rmf::ArrayTraits<rmf::IntTraits>;
%template(_NodeIDsTraits) rmf::ArrayTraits<rmf::NodeIDTraits>;

%include "IMP/rmf/hdf5_wrapper.h"
%include "IMP/rmf/Category.h"
%include "IMP/rmf/Key.h"
%include "IMP/rmf/NodeHandle.h"
%include "IMP/rmf/RootHandle.h"
%include "IMP/rmf/atom_io.h"
%include "IMP/rmf/restraint_io.h"
%include "IMP/rmf/particle_io.h"
%include "IMP/rmf/geometry_io.h"

IMP_RMF_SWIG_FOREACH_TYPE(IMP_RMF_SWIG_DEFINE_TYPE);

# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED RMF_LIBRARIES)

set(CHECK_COMPILES_BODY "")

check_compiles("_environment" RMF RMF "#include <RMF/FileHandle.h>" "" "RMF" RMF_ok)
if("${RMF_ok}" MATCHES "1")
message(STATUS "Found RMF in environment")
else()
include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules("RMF_PKGCONF" "rmf")

# Include dir
find_path("RMF_INCLUDE_DIR"
  NAMES RMF/FileHandle.h
  PATHS ${RMF_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib RMF)
find_library("${lib}_LIBRARY"
  NAMES ${lib}
  PATHS ${RMF_PKGCONF_LIBRARY_DIRS}
)
set("RMF_LIBRARY" ${RMF_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(RMF_PROCESS_INCLUDES RMF_INCLUDE_DIR)
set(RMF_PROCESS_LIBS RMF_LIBRARY)
libfind_process(RMF)

if ("${RMF_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${RMF_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  set(RMF_INTERNAL 1 CACHE INTERNAL "" FORCE)
        include("${PROJECT_SOURCE_DIR}/modules/rmf/dependency/RMF.cmake")

else()
  check_compiles("_found" "RMF" "RMF" "#include <RMF/FileHandle.h>" "${RMF_INCLUDE_DIR}" "${RMF_LIBRARY}" RMF_ok_ok)
  if(${RMF_ok_ok} MATCHES "1")
    message(STATUS "Found RMF at ""${RMF_INCLUDE_DIR}" " " "${RMF_LIBRARY}")
  else()
    set(RMF_INTERNAL 1 CACHE INTERNAL "" FORCE)
        include("${PROJECT_SOURCE_DIR}/modules/rmf/dependency/RMF.cmake")

  endif()
endif()
endif()
else()
message(STATUS "RMF already setup")
if(DEFINED RMF_INTERNAL)
include("${PROJECT_SOURCE_DIR}/modules/rmf/dependency/RMF.cmake")
endif(DEFINED RMF_INTERNAL)
endif(NOT DEFINED RMF_LIBRARIES)
Import('env')

# All .dox, .pdf and .pdb files are installed
env.IMPModuleDoc(env.IMPModuleGetDocs(),
                 authors=["Keren Lasker", "Daniel Russel"],
                 # Provide a brief description of what the module does
                 brief="MODULENAME provides a divide and conquer sampler. It provides a simpler interface and (hopefully) faster performance than the original IMP.domino module.",
                 # Provide a longer description of what the module does
                 # This description can have multiple paragraphs and all sorts of markup
                 overview="""Currently the module does not do anything useful and simply provides prototypes for what it will look like when functional.

The central class is the IMP::domino2::DominoSampler which computes the best configurations of a model given the restraints in the model and the sampling space provided. Each particle being optimized must have a corresponding IMP::domino2::ParticleStates object which describes a discrete sampling of the particle's domain.

API todo list:
- nothing currently, it looks pretty good

Implementation todo list:
- avoid rebuilding indexes repeatedly
- use vectors instead of maps to store scores
- better filtering of states based on
   - scores of individual restraints
   - lower bounds on the score of the rest of the model
- perhaps compact represetnation of incomplete states
- better model evaluator which does not re-evaluate restraints
- reduce looping through lists for reconciliation
- avoid the SingletonContainer interface (use the macros, for example)
- need a way of filtering the set of states for large nodes as their space gets huge quickly.
  for example, could use the score of subsets to reject all states with that subset
""",
                 publications=env.StandardPublications(),
                 license="Being worked out (currently have some code from Afra)"
#env.StandardLicense()
)

/* Ignore things to prevent SWIG warning about them */
namespace IMP::em {
  %ignore DensityMap::operator =;
}
%ignore operator<<(std::ostream&, const DensityHeader &);

/* Make selected classes extensible in Python */
IMP_SWIG_OBJECT(IMP::em, DensityMap, DensityMaps);
IMP_SWIG_OBJECT(IMP::em, SampledDensityMap, SampledDensityMaps);
IMP_SWIG_OBJECT(IMP::em, SurfaceShellDensityMap, SurfaceShellDensityMaps);
IMP_SWIG_OBJECT(IMP::em, FitRestraint, FitRestraints);
IMP_SWIG_VALUE(IMP::em, RadiusDependentKernelParameters, RadiusDependentKernelParametersList);
IMP_SWIG_VALUE(IMP::em, KernelParameters, KernelParametersList);
IMP_SWIG_OBJECT(IMP::em, HighDensityEmbedding, HighDensityEmbeddings);
IMP_SWIG_OBJECT(IMP::em, MapReaderWriter, MapReaderWriters);
IMP_SWIG_OBJECT(IMP::em, MRCReaderWriter, MRCReaderWriters);
IMP_SWIG_OBJECT(IMP::em, SpiderMapReaderWriter, SpiderMapReaderWriters);
IMP_SWIG_OBJECT(IMP::em, EMReaderWriter, EMReaderWriters);
IMP_SWIG_OBJECT(IMP::em, XplorReaderWriter, XplorReaderWriters);
IMP_SWIG_OBJECT(IMP::em, CoarseCC, CoarseCCs);
IMP_SWIG_OBJECT(IMP::em, CoarseCCatIntervals, CoarseCCatIntervalsList);
IMP_SWIG_VALUE(IMP::em, FittingSolutions, FittingSolutionsList);

/* Since DensityHeaders are not values or Objects, we must ensure that whenever
   pointers to them are returned to Python, the object that manages the header's
   storage (usually a DensityMap) must be kept alive so that the header is not
   prematurely freed. (They cannot be Objects, since the EM code relies on
   their memory layout, and cannot be values, since it uses them to modify
   existing map objects.) */
namespace IMP {
 namespace em {
  // Note that since SWIG does not preserve const-correctness, get_header()
  // and get_header_writable() are essentially equivalent
  %feature("shadow") DensityMap::get_header() const %{
    def get_header(self):
        h = _IMP_em.DensityMap_get_header(self)
        h._owner = self
        return h
  %}
  %feature("shadow") DensityMap::get_header_writable() %{
    def get_header_writable(self):
        h = _IMP_em.DensityMap_get_header_writable(self)
        h._owner = self
        return h
  %}
 }
}


/* Wrap our own classes */
%include "IMP/em/def.h"
%include "IMP/em/DensityHeader.h"
%include "IMP/em/MapReaderWriter.h"
%include "IMP/em/DensityMap.h"
%include "IMP/em/masking.h"
%include "IMP/em/EMReaderWriter.h"
%include "IMP/em/XplorReaderWriter.h"
%include "IMP/em/MRCReaderWriter.h"
%include "IMP/em/KernelParameters.h"
%include "IMP/em/SampledDensityMap.h"
%include "IMP/em/SurfaceShellDensityMap.h"
%include "IMP/em/CoarseCC.h"
%include "IMP/em/CoarseConvolution.h"
%include "IMP/em/CoarseCCatIntervals.h"
%include "IMP/em/FitRestraint.h"
%include "IMP/em/converters.h"
%include "IMP/em/SpiderHeader.h"
%include "IMP/em/ImageHeader.h"
%include "IMP/em/SpiderReaderWriter.h"
%include "IMP/em/rigid_fitting.h"
%include "IMP/em/envelope_penetration.h"
%include "IMP/em/embedding.h"
%include "IMP/em/density_utilities.h"
%include "IMP/em/densityMapVolumetrics.h"

/* Allow runtime casting of Restraint* objects to FitRestraint* */
namespace IMP {
  namespace em {
    %extend FitRestraint {
      static FitRestraint* cast(Restraint *r) {
        return dynamic_cast<IMP::em::FitRestraint *>(r);
      }
    }
    %template(floats) ::std::vector<float>;


  }
}

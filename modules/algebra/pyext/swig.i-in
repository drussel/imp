%include "IMP/algebra/algebra_macros.h"
%include "IMP_algebra_types.i"
%pythoncode %{
def get_vector(v):
   try:
      return v.get_coordinates()
   except:
      return v
def get_sphere(v):
   try:
      return v.get_sphere()
   except:
      return v
%}


IMP_SWIG_VALUE(IMP::algebra, Rotation2D, Rotation2Ds);
IMP_SWIG_VALUE(IMP::algebra, Rotation3D, Rotation3Ds);
IMP_SWIG_VALUE(IMP::algebra, Reflection3D, Reflection3Ds);
IMP_SWIG_VALUE(IMP::algebra, Transformation2D, Transformation2Ds);
IMP_SWIG_VALUE(IMP::algebra, Transformation3D, Transformation3Ds);
IMP_SWIG_VALUE(IMP::algebra, SphericalVector3D, SphericalVector3Ds);
IMP_SWIG_VALUE(IMP::algebra, Triangle3D, Triangle3Ds);

IMP_SWIG_VALUE(IMP::algebra,  Cone3D, Cone3Ds);
IMP_SWIG_VALUE(IMP::algebra,  Cylinder3D, Cylinder3Ds);
IMP_SWIG_VALUE(IMP::algebra,  Ellipsoid3D, Ellipsoid3Ds);
IMP_SWIG_VALUE(IMP::algebra,  Plane3D, Plane3Ds);
IMP_SWIG_VALUE(IMP::algebra,  Segment3D, Segment3Ds);
IMP_SWIG_VALUE(IMP::algebra,  SpherePatch3D, SpherePatch3Ds);
IMP_SWIG_VALUE(IMP::algebra, PrincipalComponentAnalysis, PrincipalComponentAnalyses);

// we seem to need the non-typedefed name, at least for the first argument
IMP_SWIG_ALGEBRA_VALUE_D(IMP::algebra,  Vector);
IMP_SWIG_ALGEBRA_VALUE_D(IMP::algebra,  Sphere);
IMP_SWIG_ALGEBRA_VALUE_D(IMP::algebra,  BoundingBox);
IMP_SWIG_ALGEBRA_OBJECT_D(IMP::algebra,  NearestNeighbor);
IMP_SWIG_VALUE(IMP::algebra,  ReferenceFrame3D, ReferenceFrame3Ds);

IMP_SWIG_ALGEBRA_VALUE_D(IMP::algebra::grids,  GridIndex);
IMP_SWIG_ALGEBRA_VALUE_D(IMP::algebra::grids,  ExtendedGridIndex);
IMP_SWIG_VALUE(IMP::algebra, LinearFit, LinearFits);
IMP_SWIG_VALUE(IMP::algebra, ParabolicFit, ParabolicFits);
IMP_SWIG_VALUE(IMP::algebra, FixedZYZ, FixedZYZs);
IMP_SWIG_VALUE(IMP::algebra, FixedXYZ, FixedXYZs);
IMP_SWIG_VALUE(IMP::algebra, FixedZXZ, FixedZXZs);

namespace boost {
template <class T, int D> class multi_array{};

namespace multi_array_types {
  typedef size_t size_type;
  typedef size_t difference_type;
}
}


/* to extend */
%include "IMP_algebra_bounding_box.i"
%include "IMP_algebra_vector.i"
%include "IMP_algebra_transformation2d.i"
%include "IMP_algebra_transformation3d.i"

/* Wrap our own classes */
%include "IMP/algebra/VectorD.h"
%include "IMP/algebra/Vector2D.h"
%include "IMP/algebra/Vector3D.h"
// to transform bbs
%include "IMP/algebra/Rotation3D.h"
%include "IMP/algebra/Transformation3D.h"
%include "IMP/algebra/Rotation2D.h"
%include "IMP/algebra/Transformation2D.h"
%include "IMP/algebra/BoundingBoxD.h"
%include "IMP/algebra/SphereD.h"
%include "IMP/algebra/Sphere3D.h"

IMP_SWIG_ALGEBRA_TEMPLATE_D(IMP::algebra, Vector);
IMP_SWIG_ALGEBRA_TEMPLATE_D(IMP::algebra, BoundingBox);
IMP_SWIG_ALGEBRA_TEMPLATE_D(IMP::algebra, Sphere);


%include "IMP/algebra/ReferenceFrame3D.h"


%include "IMP_algebra_matrix2d.i"
%include "IMP_algebra_matrix3d.i"
%include "IMP_algebra_spherical_coords.i"
%include "IMP/algebra/eigen_analysis.h"
%include "IMP/algebra/Segment3D.h"
%include "IMP/algebra/Triangle3D.h"
%include "IMP/algebra/LinearFit.h"
%include "IMP/algebra/ParabolicFit.h"
%include "IMP/algebra/Plane3D.h"
%include "IMP/algebra/Reflection3D.h"
%include "IMP/algebra/Cylinder3D.h"
%include "IMP/algebra/Ellipsoid3D.h"


%include "IMP/algebra/GridD.h"

IMP_SWIG_ALGEBRA_PRIVATE_TEMPLATE_D(IMP::algebra::grids, UnboundedGridStorage);
IMP_SWIG_ALGEBRA_TEMPLATE_D(IMP::algebra::grids, GridIndex);
IMP_SWIG_ALGEBRA_TEMPLATE_D(IMP::algebra::grids, ExtendedGridIndex);

%include "IMP/algebra/Grid3D.h"

%include "IMP/algebra/SpherePatch3D.h"
%include "IMP/algebra/Cone3D.h"
%include "IMP/algebra/io.h"
%include "IMP/algebra/vector_generators.h"
%include "IMP/algebra/endian.h"
%include "IMP/algebra/Rotation2D.h"
%include "IMP/algebra/shortest_segment.h"
%include "IMP/algebra/vector_search.h"

IMP_SWIG_ALGEBRA_TEMPLATE_OBJECT_D(IMP::algebra, NearestNeighbor);

%include "IMP/algebra/geometric_alignment.h"

IMP_SWIG_ALGEBRA_FUNCTION_N_DD(double, get_distance, Vector, Vector);
IMP_SWIG_ALGEBRA_FUNCTION_N_DD(double, get_distance, Sphere, Sphere);
IMP_SWIG_ALGEBRA_FUNCTION_N_DD(double, get_squared_distance, Vector, Vector);
IMP_SWIG_ALGEBRA_FUNCTION_TEMPLATE_D(get_basis_vector);
IMP_SWIG_ALGEBRA_FUNCTION_TEMPLATE_D(get_zero_vector);
IMP_SWIG_ALGEBRA_FUNCTION_TEMPLATE_D(get_ones_vector);
IMP_SWIG_ALGEBRA_FUNCTION_TEMPLATE_D(get_unit_bounding_box);
IMP_SWIG_ALGEBRA_FUNCTION_TEMPLATE_D(get_unit_sphere);
IMP_SWIG_ALGEBRA_FUNCTION_N_DD(bool, get_interiors_intersect, Sphere, Sphere);
IMP_SWIG_ALGEBRA_FUNCTION_N_DD(bool, get_interiors_intersect, BoundingBox, BoundingBox);
IMP_SWIG_ALGEBRA_FUNCTION_D_D(Vector, get_random_vector_on, Sphere);
IMP_SWIG_ALGEBRA_FUNCTION_D_D(Vector, get_random_vector_on, BoundingBox);
IMP_SWIG_ALGEBRA_FUNCTION_D_D(Vector, get_random_vector_in, Sphere);
IMP_SWIG_ALGEBRA_FUNCTION_D_D(Vector, get_random_vector_in, BoundingBox);
IMP_SWIG_ALGEBRA_FUNCTION_D_DD(BoundingBox, get_intersection, BoundingBox, BoundingBox);
IMP_SWIG_ALGEBRA_FUNCTION_D_DD(BoundingBox, get_union, BoundingBox, BoundingBox);
IMP_SWIG_ALGEBRA_FUNCTION_D_D(BoundingBox, get_bounding_box, Sphere);
IMP_SWIG_ALGEBRA_FUNCTION_DS_DN(Vector, get_uniform_surface_cover, Sphere, unsigned int);
IMP_SWIG_ALGEBRA_FUNCTION_DS_DN(Vector, get_grid_interior_cover_by_spacing, BoundingBox, double);

namespace IMP {
 namespace algebra {
   namespace grids {
   %template(_BoundedGridStorage3D) BoundedGridStorageD<3>;
   %template(_SparseIntStorage) SparseGridStorageD<3, int, BoundedGridStorageD<3> >;
   %template(_SparseUBIntStorage) grids::SparseGridStorageD<3, int, UnboundedGridStorageD<3> >;
   %template(_DenseDoubleStorage) DenseGridStorageD<3, double>;
   %template(_DenseFloatStorage) DenseGridStorageD<3, float>;
   %template(_DefaultEmbedding3D) DefaultEmbeddingD<3>;
   %template(LogEmbedding3D) LogEmbeddingD<3>;
   %template(SparseIntGrid3D) GridD<3, SparseGridStorageD<3, int, BoundedGridStorageD<3> >, int, DefaultEmbeddingD<3> >;
   %template(SparseUnboundedIntGrid3D) GridD<3, SparseGridStorageD<3, int, UnboundedGridStorageD<3> >, int, DefaultEmbeddingD<3> >;
   %template(DenseDoubleGrid3D) GridD<3, DenseGridStorageD<3, double>, double, DefaultEmbeddingD<3> >;
   %template(DenseFloatGrid3D) GridD<3, DenseGridStorageD<3, float>, float, DefaultEmbeddingD<3> >;
   %template(DenseFloatLogGrid3D) GridD<3, DenseGridStorageD<3, float>, float, LogEmbeddingD<3> >;
   %template(_AxisAnglePair) ::std::pair<IMP::algebra::VectorD<3>,double>;
   }


   %template(get_transformation_aligning_first_to_second) get_transformation_aligning_first_to_second<std::vector<IMP::algebra::VectorD<3> >, std::vector<IMP::algebra::VectorD<3> > >;
   // rotation operations
 }
}

Import('env')

env.IMPModuleDoc(env.IMPModuleGetDocs(),
                 authors=["Daniel Russel"],
                 brief="This module provides rich file I/O for \imp.",
                 overview="""The modules supports provides three levels of abstraction
for writing data to and reading if from hdf5 files.

-# The \imp layer: supports I/O of IMP::atom::Hierarchy and associated
   types as well as output of IMP::display::Geometry, IMP::Restraint and arbitrary IMP::Particles. These
   work by having a \c write_X method which adds the object to the file and then
   \c save_conformation methods which can add another conformation of the object to
   the file. Similarly, there are \c read_X and \c load_conformation methods which create
   an object of the type in question and load the data from the corresponding frame
   into already created objects.
-# The hierarchy layer: supports general traversal of the encoded hierarchy
   and addition and reading of arbitrary hierarchical data. This layer primarily
   consists of IMP::hdf5::RootHandle and IMP::hdf5::NodeHandle.
-# The HDF5 layer: provides a C++ interface to access the raw HDF5 file directly.
   This layer consists of IMP::hdf5::HDF5DataSet and IMP::hdf5::HDF5Group along
   with the IMP::hdf5::HDF5Handle and type traits classes.

   In addition, there is an executable \c hdf5_display which outputs an arbitrary
   hdf5 file to pymol or chimera as appropriate (based on the file name of the
   second argument). It support files with multiple frames via the \c -f argument as
   well as geometry and restraints written to the file.

   Finally, \c hdf5_show prints out the hierarchy written to the file.
""",
                 publications=env.IMPStandardPublications(),
                 license=env.IMPStandardLicense())

Import('env')
import scons_tools.dependency.gcc
import scons_tools.dependency.clang
import scons_tools.dependency.cgal
import scons_tools.dependency.boost


if not env.get("IMP_CGAL_LIBS", None):
    env["IMP_CGAL_LIBS"]\
        =scons_tools.dependency.cgal.get_libs(env,
                                              scons_tools.dependency\
            .boost.get_boost_lib_name(env,"thread"))

scons_tools.dependency.add_external_library(env, "CGAL", ['CGAL']+env["IMP_CGAL_LIBS"],
                                            ['CGAL/Gmpq.h', 'CGAL/Lazy_exact_nt.h'],
                                            body='CGAL_assertion(1); CGAL::Lazy_exact_nt<CGAL::Gmpq> q;',
                                            versioncpp=["CGAL_VERSION_NR"],
                                            versionheader="CGAL/version.h")


# the CGAL lib requires too much memory when built together
opercppcompilation=env['percppcompilation']
env['percppcompilation']="cgal"

extra_cxxflags=[]
removed_cxxflags=[]
if not env.GetOption('help') and not env.GetOption('clean') \
    and scons_tools.data.get(env).dependencies['CGAL'].ok:
    # Note we need get_is_gcc_like() here so that MPI builds work
    # correctly with CGAL
    if scons_tools.dependency.gcc.get_is_gcc_like(env):
        yeslist=['trapping-math',
                 'signaling-nans',
                 'rounding-math',
                 'float-store']
        nolist=['finite-math-only',
                'strict-aliasing',
                'tree-vectorize',
                'unsafe-loop-optimizations',
                'fast-math',]
        if scons_tools.dependency.gcc.get_version(env)>= 4.3:
            yeslist.append('signed-zeros')
            nolist+=['reciprocal-math', 'associative-math']

    else:
        yeslist=[]
        nolist=[]

    #print scons_tools.data.get(env).dependencies['CGAL'].version
    if int(scons_tools.data.get(env).dependencies['CGAL'].version[0])\
            < 1030700000 and env['cxx11'] != "no":
        import sys
        print >> sys.stderr, "ERROR Versions of CGAL prior to 3.7 don't support C++11"
        print >> sys.stderr, "Please update CGAL or add cxx11='no' to your config."
        exit(1)
    #extra_cxxflags.append('-DCGAL_DISABLE_ROUNDING_MATH_CHECK')
    extra_cxxflags+= ['-f'+x for x in yeslist]+['-fno-'+x for x in nolist]
    removed_cxxflags+= ['-f'+x for x in nolist]+['-fno-'+x for x in yeslist]
    if env['build']!= 'debug':
        extra_cxxflags+=['-O1']
        # remove NDEBUG as it would get passed to the python wrappers
env.IMPModuleBuild(required_modules=["base"],
                   required_dependencies=["CGAL"],
                   extra_cxxflags=extra_cxxflags,
                   removed_cxxflags=removed_cxxflags)

env['percppcompilation']=opercppcompilation

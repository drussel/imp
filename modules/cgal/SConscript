Import('env')
import scons_tools.dependency.gcc
import scons_tools.dependency.cgal
import scons_tools.dependency.boost



cgal_libs=scons_tools.dependency.cgal.get_libs(env,
                         scons_tools.dependency.boost.get_boost_lib_name(env,"thread"))

scons_tools.dependency.add_external_library(env, "CGAL", ['CGAL']+cgal_libs,
                                            ['CGAL/Gmpq.h', 'CGAL/Lazy_exact_nt.h'],
                                            body='CGAL_assertion(1); CGAL::Lazy_exact_nt<CGAL::Gmpq> q;',
                                            versioncpp=["CGAL_VERSION_NR"],
                                            versionheader="CGAL/version.h")


# the CGAL lib requires too much memory when built together
opercppcompilation=env['percppcompilation']
env['percppcompilation']="cgal"

if not env.GetOption('help') and not env.GetOption('clean') \
        and scons_tools.dependency.gcc.get_is_gcc_like(env)\
        and scons_tools.data.get(env).dependencies['CGAL'].ok:
    cxxflags=[]
    yeslist=['trapping-math',
             'signaling-nans',
             'rounding-math',
             'float-store']
    nolist=['finite-math-only',
            'strict-aliasing',
            'tree-vectorize',
            'unsafe-loop-optimizations',
            'fast-math',]
    if scons_tools.dependency.gcc.get_version(env)>= 4.3:
        yeslist.append('signed-zeros')
        nolist+=['reciprocal-math', 'associative-math']
    # there is a bug with old cgal version
    l=['-f'+x for x in nolist]+['-fno-'+x for x in yeslist]
    #print scons_tools.data.get(env).dependencies['CGAL'].version
    if int(scons_tools.data.get(env).dependencies['CGAL'].version[0])\
            < 1030700000 and env['cxx11'] != "no":
        import sys
        print >> sys.stderr, "ERROR Versions of CGAL prior to 3.7 don't support C++11"
        print >> sys.stderr, "Please update CGAL or add cxx11='no' to your config."
        exit(1)
    for f in env['CXXFLAGS']:
        if not f in l:
            cxxflags.append(f)
    cxxflags.append('-DCGAL_DISABLE_ROUNDING_MATH_CHECK')
    cxxflags+= ['-f'+x for x in yeslist]+['-fno-'+x for x in nolist]
    if env['build']!= 'debug':
        cxxflag=cxxflags+['-O1', '-DNDEBUG']
else:
    cxxflags=[]
env.IMPModuleBuild(version='nightly-17/6/2012',
                   required_modules=["base"],
                   required_dependencies=["CGAL"],
                   cxxflags=cxxflags, python=False)

env['percppcompilation']=opercppcompilation

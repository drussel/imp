Import('env')
import scons_tools.dependency

config=[]

if not env.GetOption('help'):
    if not env.get('deprecated', True):
        config.append(['IMP_USE_DEPRECATED', 1])
    else:
        config.append(['IMP_USE_DEPRECATED', 1])
    if env['IMP_ENDIAN']=='little':
        config.append("IMP_LITTLE_ENDIAN")
    else:
        config.append('IMP_BIG_ENDIAN')

    if env['versionchecks']:
        if env.get("BOOST_VERSION", None):
            config.append(["IMP_BOOST_VERSION", env["BOOST_VERSION"]])
    if env.get("IMP_COMPILER_NULLPTR"):
        config.append(["IMP_DEFINE_NULLPTR", 0])
    else:
        config.append(["IMP_DEFINE_NULLPTR", 1])
    config.append(["IMP_DEBUG", "0"])
    config.append(["IMP_RELEASE", "1"])
    config.append(["IMP_FAST", "2"])

    if env.get("cxx11")=="no":
        config.append(["IMP_NO_CXX11", "0"])

    if env['build'] == 'fast':
        config.append(["IMP_BUILD", "IMP_FAST"])
    elif env['build'] == 'release':
        config.append(["IMP_BUILD", "IMP_RELEASE"])
    elif env['build'] == 'debug' or env['build']=='compile':
        config.append(["IMP_BUILD", "IMP_DEBUG"])
    if env['build'] != 'fast' and env.get('IMP_USE_DEBUG_VECTOR', False):
        config.append(["IMP_USE_DEBUG_VECTOR", 1])
    else:
        config.append(["IMP_USE_DEBUG_VECTOR", 0])


scons_tools.dependency.add_external_library(env, "tcmalloc",
                                            ["tcmalloc"],
                                            # garbage to avoid rename issues
                                            "vector")

env.IMPModuleBuild(config_macros=config,
                   required_modules=[],
                   optional_dependencies=["tcmalloc"])

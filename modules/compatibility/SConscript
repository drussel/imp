Import('env')
import scons_tools.dependency

import scons_tools.dependency.auto
import scons_tools.dependency.range_for
import scons_tools.dependency.extern
import scons_tools.dependency.override
import scons_tools.dependency.final
import scons_tools.dependency.pragma
import scons_tools.dependency.enums
import scons_tools.dependency.endian
import scons_tools.dependency.gcc
import scons_tools.dependency.nullptr

config=[]

if not env.GetOption('help'):
    if env['IMP_PASS']=="BUILD":
        scons_tools.dependency.endian.configure_check(env)
        scons_tools.dependency.auto.configure_check(env)
        scons_tools.dependency.override.configure_check(env)
        scons_tools.dependency.final.configure_check(env)
        scons_tools.dependency.pragma.configure_check(env)
        scons_tools.dependency.range_for.configure_check(env)
        scons_tools.dependency.enums.configure_check(env)
        scons_tools.dependency.extern.configure_check(env)
        scons_tools.dependency.gcc.configure_debug_vector(env)
        scons_tools.dependency.nullptr.configure_check(env)

    if not env.get('deprecated', True):
        config.append(['IMP_USE_DEPRECATED', 1])
    else:
        config.append(['IMP_USE_DEPRECATED', 1])
    if env['IMP_ENDIAN']=='little':
        config.append("IMP_LITTLE_ENDIAN")
    else:
        config.append('IMP_BIG_ENDIAN')

    if env['versionchecks']:
        if env.get("BOOST_VERSION", None):
            config.append(["IMP_BOOST_VERSION", env["BOOST_VERSION"]])
    if env.get("IMP_COMPILER_NULLPTR"):
        config.append(["IMP_DEFINE_NULLPTR", 0])
    else:
        config.append(["IMP_DEFINE_NULLPTR", 1])
    config.append(["IMP_DEBUG", "0"])
    config.append(["IMP_RELEASE", "1"])
    config.append(["IMP_FAST", "2"])

    if env['build'] == 'fast':
        config.append(["IMP_BUILD", "IMP_FAST"])
    elif env['build'] == 'release':
        config.append(["IMP_BUILD", "IMP_RELEASE"])
    elif env['build'] == 'debug' or env['build']=='compile':
        config.append(["IMP_BUILD", "IMP_DEBUG"])
    if env['build'] != 'fast' and env.get('IMP_USE_DEBUG_VECTOR', False):
        config.append(["IMP_USE_DEBUG_VECTOR", 1])
    else:
        config.append(["IMP_USE_DEBUG_VECTOR", 0])
    if env['IMP_COMPILER_OVERRIDE']:
        config.append(["IMP_OVERRIDE", "IMP_NO_SWIG(override)"])
    else:
        config.append(["IMP_OVERRIDE", ""])
    if env['IMP_COMPILER_FINAL']:
        config.append(["IMP_FINAL", "IMP_NO_SWIG(final)"])
    else:
        config.append(["IMP_FINAL", ""])
    if env['IMP_COMPILER_EXTERN']:
        config.append(["IMP_USE_EXTERN", 1])
        config.append(["IMP_EXTERN", "extern"])
    else:
        config.append(["IMP_USE_EXTERN", 0])
        config.append(["IMP_EXTERN", ""])
    config.append(["IMP_STRINGIFY(x)", "#x"])
    config.append(["IMP_PRAGMA(x)", env['IMP_COMPILER_PRAGMA']])

env.IMPModuleBuild(config_macros=config,
                   required_modules=[])

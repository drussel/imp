# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED libTau_LIBRARIES)
message(STATUS "Checking for libTau")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(libTau_PKGCONF libtau)

# Include dir
find_path(libTau_INCLUDE_DIR
  NAMES libTAU/PairwiseDockingEngine.h
  PATHS ${libTau_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib TAU)
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${libTau_PKGCONF_LIBRARY_DIRS}
)
set(libTau_LIBRARY ${libTau_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(libTau_PROCESS_INCLUDES libTau_INCLUDE_DIR)
set(libTau_PROCESS_LIBS libTau_LIBRARY)
libfind_process(libTau)

if ("${libTau_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${libTau_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "libTau not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/libTau" "ok=False")
else()
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_LIBRARIES "${libTau_LIBRARY}")
  set(CMAKE_REQUIRED_INCLUDES "${libTau_INCLUDE_DIR}")
  set(body "#include <libTAU/PairwiseDockingEngine.h>
int main(int,char*[]) {
  
  return 0;
}")
  check_cxx_source_compiles("${body}"
 libTau_COMPILES)
  if ("libTau_COMPILES" MATCHES "1")
    message(STATUS "libTau found " ${libTau_INCLUDE_DIR} " " ${libTau_LIBRARY})
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/libTau" "ok=True")
    #set(LIBTAU_LINK_PATH ${libTau_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
    set(LIBTAU_INCLUDE_PATH ${libTau_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    set(LIBTAU_LIBRARIES ${libTau_LIBRARY} CACHE INTERNAL "" FORCE)
  else()
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/libTau" "ok=False")
  endif()
endif()

else()
message(STATUS "libTau already setup")

endif(NOT DEFINED libTau_LIBRARIES)

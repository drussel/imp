Import('env')

env.IMPModuleDoc(env.IMPModuleGetDocs(),
                 authors=["Ben Webb"],
                 brief="Support for parallel tasks that communicate "
                       "infrequently.",
                 overview="""
This module allows for \\imp tasks to be distributed to multiple processors
or machines. It employs a master-slave model; the main (master) \\imp process
sends the tasks out to one or more slaves. Tasks cannot communicate with each
other, but return results to the master. The master can then start new tasks,
possibly using results returned from completed tasks. The system is fault
tolerant; if a slave fails, any tasks running on that slave are automatically
moved to another slave.

To use the module, first create a Manager object. Add one or
more slaves to the Manager using its
\link Manager::add_slave() add_slave()\endlink method (example slaves are
LocalSlave, which simply starts another \\imp process on the
same machine as the master, and SGEQsubSlaveArray, which starts
an array of multiple slaves on a Sun GridEngine cluster). Next, call
Manager::get_context() method, which creates and returns a new Context object.
Add tasks to the Context with the Context::add_task() method (each task is
simply a Python function or other callable object). Finally, call
Context::get_results_unordered() to
send the tasks out to the slaves (a slave only runs a single task at a time;
if there are more tasks than slaves later tasks will be queued until a slave
is done with an earlier task). This method returns the results from each task
as it completes.

Setup in \\imp is often expensive, and thus the Manager::get_context() method
allows you to specify a Python function or other callable object to do any
setup for the tasks. This function will be run on the slave before any tasks
from that context are started (the return values from this function are
passed to the task functions). If multiple tasks from the same context are
run on the same slave, the setup function is only called once.
""",
                 publications=env.IMPStandardPublications(),
                 license=env.IMPStandardLicense())

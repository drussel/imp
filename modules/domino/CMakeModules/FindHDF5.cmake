# Autogenerated file, run tools/build/setup_cmake.py to regenerate

if(NOT DEFINED HDF5_LIBRARIES)
message(STATUS "Checking for HDF5")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(HDF5_PKGCONF hdf5)

# Include dir
find_path(HDF5_INCLUDE_DIR
  NAMES hdf5.h
  PATHS ${HDF5_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
foreach(lib hdf5)
find_library(${lib}_LIBRARY
  NAMES ${lib}
  PATHS ${HDF5_PKGCONF_LIBRARY_DIRS}
)
set(HDF5_LIBRARY ${HDF5_LIBRARY} ${${lib}_LIBRARY})
endforeach(lib)


# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(HDF5_PROCESS_INCLUDES HDF5_INCLUDE_DIR)
set(HDF5_PROCESS_LIBS HDF5_LIBRARY)
libfind_process(HDF5)

if ("${HDF5_LIBRARY}" MATCHES ".*NOTFOUND.*"
    OR "${HDF5_INCLUDE_DIR}" MATCHES ".*NOTFOUND.*")
  message(STATUS "HDF5 not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/HDF5" "ok=False")
else()
  include(CheckCXXSourceCompiles)
  set(CMAKE_REQUIRED_LIBRARIES "${HDF5_LIBRARY}")
  set(CMAKE_REQUIRED_INCLUDES "${HDF5_INCLUDE_DIR}")
  set(body "#include <hdf5.h>
int main(int,char*[]) {
  H5garbage_collect();
  return 0;
}")
  check_cxx_source_compiles("${body}"
 HDF5_COMPILES)
  if ("HDF5_COMPILES" MATCHES "1")
    message(STATUS "HDF5 found " ${HDF5_INCLUDE_DIR} " " ${HDF5_LIBRARY})
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/HDF5" "ok=True")
    #set(HDF5_LINK_PATH ${HDF5_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
    set(HDF5_INCLUDE_PATH ${HDF5_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
    set(HDF5_LIBRARIES ${HDF5_LIBRARY} CACHE INTERNAL "" FORCE)
  else()
    file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/HDF5" "ok=False")
  endif()
endif()

else()
message(STATUS "HDF5 already setup")

endif(NOT DEFINED HDF5_LIBRARIES)

# Autogenerated file, run build/tools/setup_cmake.py to regenerate

if(NOT DEFINED HDF5_LIBRARIES)
message(STATUS "Checking for HDF5")

include(LibFindMacros)

# Use pkg-config to get hints about paths
libfind_pkg_check_modules(HDF5_PKGCONF HDF5)

# Include dir
find_path(HDF5_INCLUDE_DIR
  NAMES hdf5.h
  PATHS ${HDF5_PKGCONF_INCLUDE_DIRS}
)

# Finally the library itself
find_library(HDF5_LIBRARY
  NAMES hdf5
  PATHS ${HDF5_PKGCONF_LIBRARY_DIRS}
)

# Set the include dir variables and the libraries and let libfind_process do the rest.
# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
set(HDF5_PROCESS_INCLUDES HDF5_INCLUDE_DIR)
set(HDF5_PROCESS_LIBS HDF5_LIBRARY)
libfind_process(HDF5)

if (${HDF5_LIBRARY} MATCHES "HDF5_LIBRARY-NOTFOUND"
    OR ${HDF5_INCLUDE_DIR} MATCHES "HDF5_INCLUDE_DIR-NOTFOUND")
  message(STATUS "HDF5 not found")
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/HDF5" "ok=False")
else()
  message(STATUS "HDF5 found " ${HDF5_INCLUDE_DIR} " " ${HDF5_LIBRARY})
  file(WRITE "${PROJECT_BINARY_DIR}/data/build_info/HDF5" "ok=True")
  #set(HDF5_LINK_PATH ${HDF5_LIBRARY_DIRS} CACHE INTERNAL ""  FORCE)
  set(HDF5_INCLUDE_PATH ${HDF5_INCLUDE_DIR} CACHE INTERNAL "" FORCE)
  set(HDF5_LIBRARIES ${HDF5_LIBRARY} CACHE INTERNAL "" FORCE)
endif()

else()
message(STATUS "HDF5 already setup")

endif(NOT DEFINED HDF5_LIBRARIES)
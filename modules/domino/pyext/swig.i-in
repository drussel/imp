IMP_DIRECTOR_MODULE_CLASS(domino, DiscreteSampler);
IMP_DIRECTOR_MODULE_CLASS(domino, DiscreteSet);
IMP_DIRECTOR_MODULE_CLASS(domino, RestraintEvaluatorI);

//%include "std_map.i"


/* Wrap our own classes */
%include "IMP/domino/CombState.h"
%include "IMP/domino/Transformation.h"
%include "IMP/domino/TransformationUtils.h"
%include "IMP/domino/JunctionTree.h"
%include "IMP/domino/DiscreteSampler.h"
%include "IMP/domino/RestraintEvaluatorI.h"
%include "IMP/domino/RestraintEvaluator.h"
%include "IMP/domino/RestraintEvaluatorFromFile.h"
%include "IMP/domino/JNode.h"
%include "IMP/domino/RestraintGraph.h"
%include "IMP/domino/DominoOptimizer.h"
%include "IMP/domino/DiscreteSet.h"
%include "IMP/domino/PermutationSampler.h"
%include "IMP/domino/MappedDiscreteSet.h"
%include "IMP/domino/CartesianProductSampler.h"
%include "IMP/domino/SimpleDiscreteSpace.h"
%include "IMP/domino/SimpleDiscreteRestraint.h"
%include "IMP/domino/SimpleDiscreteSampler.h"
%include "IMP/domino/TransformationMappedDiscreteSet.h"
%include "IMP/domino/TransformationCartesianProductSampler.h"
%include "IMP/domino/TransformationPermutationSampler.h"
%include "IMP/domino/TransformationDiscreteSet.h"
%include "IMP/domino/TransformationUtils.h"
%include "IMP/domino/SymmetrySampler.h"


// namespace IMP {
//   namespace domino {
//     %template(Combinations) ::std::map < ::std::string, ::IMP::domino::CombState * >;
//     %template(CombinationValues) ::std::map < ::std::string, float >;
//   }
// }

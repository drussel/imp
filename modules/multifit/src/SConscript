Import('env')
files = [
#'random_rotation.cpp',
#'learn_fftw.cpp',
         'DensityDataPoints.cpp',
         'DataPointsAssignment.cpp',
#         'HVQClustering.cpp',
         'density_analysis.cpp',
         'fft_based_rigid_fitting.cpp',
         'weighted_excluded_volume.cpp',
#         'sampling_space.cpp',
         'FittingSolutionRecord.cpp',
#         'SingleDominoRun.cpp',
         'pca_based_rigid_fitting.cpp',
         'fitting_solutions_reader_writer.cpp',
         'fitting_tools.cpp',
         'SettingsData.cpp',
#         'DataContainer.cpp',
#         'restraints_utils.cpp',
#         'sampling_space_utils.cpp',
         'WeightedExcludedVolumeRestraint.cpp',
                 'ComplementarityRestraint.cpp',
         'anchor_graph.cpp',
         'anchor_utilities.cpp',
         'connolly_surface.cpp',
#         'mc_cg_refinement.cpp'
         'RMSDClustering.cpp',
         'fitting_clustering.cpp',
        'TransformationClustering.cpp',
        'proteomics_reader.cpp',
        'anchors_reader.cpp',
        'coarse_molecule.cpp',
        'fitting_utils.cpp',
        'RadiusOfGyrationRestraint.cpp',
        'AlignmentParams.cpp',
        'ensemble_analysis.cpp',
        'path_reader_writer.cpp',
        'protein_anchors_mapping_reader.cpp',
        'proteomics_em_alignment_atomic.cpp',
        'merge_tree_utils.cpp',
        'fitting_states.cpp',
#        'RigidBodiesRMSDClustering.cpp',
        ]\
        + SConscript('internal/SConscript')

# Build and install the shared library:
env.IMPModuleLib(files)

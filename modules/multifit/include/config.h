/*
 * \file IMP/multifit/config.h
 * \brief Provide macros to mark functions and classes as exported
 *        from a DLL/.so, and to set up namespaces
 *
 * When building the module, IMPMULTIFIT_EXPORTS should be defined, and when
 * using the module externally, it should not be. Classes and functions
 * defined in the module's headers should then be marked with
 * IMPMULTIFITEXPORT if they are intended to be part of the API, or with
 * IMPMULTIFITLOCAL if they are not (the latter is the default).
 *
 * The Windows build environment requires applications to mark exports in
 * this way; we use the same markings to set the visibility of ELF symbols
 * if we have compiler support.
 *
 * All code in this module should live in the IMP::multifit namespace.
 * This is simply achieved by wrapping things with the
 * IMPMULTIFIT_BEGIN_NAMESPACE and IMPMULTIFIT_END_NAMESPACE macros.
 * There are similar macros for module code that is designed to be for
 * internal use only.
 *
 * This header is auto-generated by tools/imp-module.py; it should not be
 * edited manually.
 *
 * Copyright 2007-9 Sali Lab. All rights reserved.
 *
 */

#ifndef IMPMULTIFIT_CONFIG_H
#define IMPMULTIFIT_CONFIG_H

#include <boost/static_assert.hpp>

#ifdef _MSC_VER
#ifdef IMPMULTIFIT_EXPORTS
#define IMPMULTIFITEXPORT __declspec(dllexport)
#else
#define IMPMULTIFITEXPORT __declspec(dllimport)
#endif
#define IMPMULTIFITLOCAL
#else
#ifdef GCC_VISIBILITY
#define IMPMULTIFITEXPORT __attribute__ ((visibility("default")))
#define IMPMULTIFITLOCAL __attribute__ ((visibility("hidden")))
#else
#define IMPMULTIFITEXPORT
#define IMPMULTIFITLOCAL
#endif
#endif

#define IMPMULTIFIT_BEGIN_NAMESPACE \
namespace IMP {\
namespace multifit {\

#define IMPMULTIFIT_END_NAMESPACE \
} /* namespace IMP */ \
} /* namespace multifit */ \

#define IMPMULTIFIT_BEGIN_INTERNAL_NAMESPACE \
IMPMULTIFIT_BEGIN_NAMESPACE \
namespace internal {


#define IMPMULTIFIT_END_INTERNAL_NAMESPACE \
} /* namespace internal */ \
IMPMULTIFIT_END_NAMESPACE




//  functions are defined explicitly for swig
#ifndef SWIG
namespace IMP {
  class VersionInfo;
}

#include <IMP/internal/directories.h>
#include <IMP/config.h>
#include <string>

IMP_BEGIN_INTERNAL_NAMESPACE
IMPEXPORT std::string get_data_path(std::string module_name,
                                    std::string file_name);
IMPEXPORT std::string get_example_path(std::string module_name,
                                       std::string file_name);

IMP_END_INTERNAL_NAMESPACE

IMPMULTIFIT_BEGIN_NAMESPACE
IMPMULTIFITEXPORT const VersionInfo& get_module_version_info();

//! Return the path to installed data for this module
/** Each module has its own data directory, so be sure to use
    the version of this function in the correct module.
*/
inline std::string get_data_path(std::string file_name) {
  return IMP::internal::get_data_path("multifit", file_name);
}

//! Return the path to installed example data for this module
/** Each module has its own example directory, so be sure to use
    the version of this function in the correct module.
*/
inline std::string get_example_path(std::string file_name)  {
  return IMP::internal::get_example_path("multifit", file_name);
}


IMPMULTIFIT_END_NAMESPACE

#endif // SWIG

#endif  /* IMPMULTIFIT_CONFIG_H */

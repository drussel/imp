# Autogenerated file, run tools/build/setup_cmake.py to regenerate

include_directories(${ANN_INCLUDE_PATH}
        ${BOOST.FILESYSTEM_INCLUDE_PATH}
        ${BOOST.GRAPH_INCLUDE_PATH}
        ${BOOST.PROGRAMOPTIONS_INCLUDE_PATH}
        ${BOOST.RANDOM_INCLUDE_PATH}
        ${BOOST.REGEX_INCLUDE_PATH}
        ${BOOST.SYSTEM_INCLUDE_PATH}
        ${CGAL_INCLUDE_PATH}
        ${FFTW3_INCLUDE_PATH}
        ${GPERFTOOLS_INCLUDE_PATH}
        ${HDF5_INCLUDE_PATH}
        ${LOG4CXX_INCLUDE_PATH}
        ${RMF_INCLUDE_PATH}
        ${TCMALLOC_HEAPCHECKER_INCLUDE_PATH}
        ${TCMALLOC_HEAPPROFILER_INCLUDE_PATH})
link_directories(${ANN_LINK_PATH}
        ${BOOST.FILESYSTEM_LINK_PATH}
        ${BOOST.GRAPH_LINK_PATH}
        ${BOOST.PROGRAMOPTIONS_LINK_PATH}
        ${BOOST.RANDOM_LINK_PATH}
        ${BOOST.REGEX_LINK_PATH}
        ${BOOST.SYSTEM_LINK_PATH}
        ${CGAL_LINK_PATH}
        ${FFTW3_LINK_PATH}
        ${GPERFTOOLS_LINK_PATH}
        ${HDF5_LINK_PATH}
        ${LOG4CXX_LINK_PATH}
        ${RMF_LINK_PATH}
        ${TCMALLOC_HEAPCHECKER_LINK_PATH}
        ${TCMALLOC_HEAPPROFILER_LINK_PATH})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MULTIFIT_CXX_FLAGS}")


File(GLOB runtimepytests "${PROJECT_BINARY_DIR}/test/multifit/test_*.py")
set(pytests ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_add_fit_rmsd.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_add_surface_index.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_align.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_alignment_params.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_anchor_graph.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_anchors.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_anchors_secondary_structure.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_complementarity_restraint.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_connected_components.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_connolly.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_fit_fft.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_hit_map.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_indexes.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_models.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_mol_coarsening.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_param_script.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_path_reader.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_proteomics.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_radius_of_gyration_restraint.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_read_anchors_data.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_read_anchors_proteomics_mapping.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_read_fitting_solutions.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_read_proteomics_data.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_read_settings.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_rigid_fitting_fft.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_rmsd_clustering.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_score.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_settings_data.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_surface_sample_protein.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_transforms.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_weighted_excluded_volume_restraint.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_weighted_excluded_volume_score.py ${PROJECT_SOURCE_DIR}/modules/multifit/test/expensive_test_rigid_fitting_pca.py)

foreach (test ${runtimepytests} ${pytests})
  GET_FILENAME_COMPONENT(name ${test} NAME_WE)
  if(EXISTS "${PROJECT_BINARY_DIR}/test/multifit/${name}.pytests")
    FILE(READ "${PROJECT_BINARY_DIR}/test/multifit/${name}.pytests" contents)
    STRING(REGEX REPLACE ";" "\\\\;" contents "${contents}")
    STRING(REGEX REPLACE "\n" ";" contents "${contents}")
    foreach(testline ${contents})
      string(REGEX REPLACE "([A-Za-z0-9_]+\\.[A-Za-z0-9_]+) (.*)" 
                           "\\1;\\2" split "${testline}")
      list(GET split 0 methname)
      list(GET split 1 docstring)
      add_test("multifit.${name}.${methname}" ${PROJECT_BINARY_DIR}/setup_environment.sh python ${test} "${methname}")
      set_tests_properties("multifit.${name}.${methname}" PROPERTIES LABELS "IMP.multifit;test")
      set_tests_properties("multifit.${name}.${methname}" PROPERTIES MEASUREMENT "docstring=${docstring}")
    endforeach()
  else()
    add_test("multifit.${name}" ${PROJECT_BINARY_DIR}/setup_environment.sh python ${test})
    set_tests_properties("multifit.${name}" PROPERTIES LABELS "IMP.multifit;test")
  endif()
endforeach(test)

set(cpp_tests ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_geometric_complementarity.cpp ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_geometric_hash.cpp ${PROJECT_SOURCE_DIR}/modules/multifit/test/test_get_candidate_transformations_match_1st_surface_to_2nd.cpp )

foreach (test ${cpp_tests})
   GET_FILENAME_COMPONENT(name ${test} NAME_WE)
   add_executable("multifit.${name}" ${test})
   target_link_libraries("multifit.${name}"     imp_multifit
    ${IMP_BASE_LIBRARY} ${IMP_CGAL_LIBRARY} ${IMP_ALGEBRA_LIBRARY} ${IMP_KERNEL_LIBRARY} ${IMP_DISPLAY_LIBRARY} ${IMP_SCORE_FUNCTOR_LIBRARY} ${IMP_CORE_LIBRARY} ${IMP_CONTAINER_LIBRARY} ${IMP_STATISTICS_LIBRARY} ${IMP_ATOM_LIBRARY} ${IMP_EM_LIBRARY} ${IMP_RMF_LIBRARY} ${IMP_DOMINO_LIBRARY}
    ${FFTW3_LIBRARIES} ${BOOST.PROGRAMOPTIONS_LIBRARIES} ${BOOST.FILESYSTEM_LIBRARIES} ${BOOST.SYSTEM_LIBRARIES} ${GPERFTOOLS_LIBRARIES} ${TCMALLOC_HEAPPROFILER_LIBRARIES} ${TCMALLOC_HEAPCHECKER_LIBRARIES} ${LOG4CXX_LIBRARIES} ${BOOST.RANDOM_LIBRARIES} ${CGAL_LIBRARIES} ${ANN_LIBRARIES} ${BOOST.REGEX_LIBRARIES} ${RMF_LIBRARIES} ${BOOST.GRAPH_LIBRARIES} ${HDF5_LIBRARIES})
   set_target_properties("multifit.${name}" PROPERTIES
                         RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/test/multifit/"
                         OUTPUT_NAME ${name})
   add_test("multifit.${name}" ${PROJECT_BINARY_DIR}/setup_environment.sh
            "${PROJECT_BINARY_DIR}/test/multifit/${name}${CMAKE_EXECUTABLE_SUFFIX}")
   set_tests_properties("multifit.${name}" PROPERTIES LABELS "IMP.multifit;test")
   set(executables ${executables} "multifit.${name}")
endforeach(test)

add_custom_target("imp_multifit_tests" ALL DEPENDS ${executables})

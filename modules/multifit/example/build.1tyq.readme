========================================
===       Build the ARP2/3 complex    ====
========================================

=====0. user preparation
The user needs to prepare:
I. a file with the subunits list. Each line describes a subunit and contains:
name pdb_file num_copies.
(1tyq.subuits)
Make sure that the subunit names are unique.
II. a mrc file of the assembly
(input/1tyq_15.mrc)

=====1.generate the parameters file
multifit.py param -i 1tyq.asmb.input -- 1tyq input/1tyq.subunit.list.txt 15 input/1tyq_10.mrc 10 3.3 0.28 -99.375000 -62.513000 -40.181999

The parameters are:
1tyq.subunits              : list of subunits
15                         : coarsening level, 15 residues per bead is recommeted
input/1tyq_10.mrc          : the density map
10                         : the resolution
3.3                        : the spacing
155                        : the threshold
-83.6 -46.2 -24.2              : the origin
-i 1tyq.asmb.input         : the name of the assembly input file

A file named 1tyq.asmb.input is generated. This file holds all parameters required for the MultiFit stages
In addition, a filed named 1tyq.alignment.param is generated for step 5.

=====2. Running MultiFit
The steps to execute:

==2.1 generate the assembly anchor graph
multifit.py anchors 1tyq.asmb.input 1tyq.asmb.anchors

Files being generated:
1tyq.asmb.anchors.pdb  : The graph in pdb format
1tyq.asmb.anchors.txt  : The graph in txt format
1tyq.asmb.anchors.cmm  : The graph in cmm format

==2.2 generate the fits
multifit.py fit_fft -c 6 1tyq.asmb.input -n 1000

(for benchmarking; if names of PDBs in native orientation are added to the
rightmost column in 1tyq.asmb.input, the RMSD of each fit to native can be
generated by running
multifit.py add_fit_rmsd 1tyq.asmb.input
)

==2.3 generate indexes
multifit.py indexes 1tyq 1tyq.asmb.input 1000 1tyq.indexes.mapping.input

==2.4 create a proteomics file
multifit.py proteomics 1tyq.asmb.input 1tyq.asmb.anchors.txt 1tyq.proteomics.input

Anchor combinations based on the fits are generated

==2.5 assemble fitting solutions
multifit.py align 1tyq.asmb.input 1tyq.proteomics.input 1tyq.indexes.mapping.input 1tyq.alignment.param 1tyq.combinations.output 1tyq.scores.output 

==2.6 Write individual solutions
to write out all solutions call:
multifit.py models 1tyq.asmb.input 1tyq.combinations.output 1tyq.asmb.mdl

It will write the solutions as:
1tyq.asmb.mdl.001.pdb
....


==2.7. For debugging, if the reference structures are added to the 1tyq.asmb.input file, you can get the rmsds using:
multifit.py rmsd 1tyq.asmb.input 1tyq.proteomics.input 1tyq.indexes.mapping.input 1tyq.combinations.output 1tyq.combinations.rmsd.output


====3. Refine the first model
==3.0 create the first model and split it into chains
>>$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/write_ensemble_models.py -m 1 1tyq.asmb.input 1tyq.combinations.output 1tyq.asmb.mdl
multifit.py split 1tyq.asmb.mdl.0.pdb
>> manually create 1tyq.subunit.refined.list.txt
==3.1 create the parameters file
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_assembly_input.py -i 1tyq.asmb.refined.input -- 1tyq 1tyq.subunit.refined.list.txt 15 input/1tyq_10.mrc 10 3.3 0.28 -99.375000 -62.513000 -40.181999

==3.3 generate the fits
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/run_fitting_fft.py -c 6 1tyq.asmb.refined.input 1tyq.subunit.refined.list.txt 


[[ debugging command, get the RMSD of each fit
$IMP_NEW_FAST/tools/imppy.sh python $IMP_NEW_SRC/modules/multifit/pyext/src/add_rmsd_column_for_fitting_solutions.py 1tyq.asmb.input 1tyq.proteomics.input 1tyq.indexes.mapping.input 1tyq.alignment.param
]]

==3.4 generate indexes
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_indexes_from_fitting_solutions.py 1tyq.refined 1tyq.asmb.refined.input 100

==3.5 create proteomics file
$IMP/tools/imppy.sh python multifit.py proteomics 1tyq.asmb.input 1tyq.asmb.anchors.txt  1tyq.proteomics.input

==3.6 assmble
$IMP/tools/imppy.sh python $IMP/modules/multifit/pyext/src/align.py 1tyq.asmb.refined.input 1tyq.refined.proteomics.input 1tyq.refined.indexes.mapping.input 1tyq.alignment.param 1tyq.docking.param 1tyq.refined.combinations.output 1tyq.refined.scores.output






===== Extra things, to be validated:



Valid combinations of fits are generated

==2.5 analyse the ensemble
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/ensemble_analysis.py 1tyq.asmb.input paths.output

==2.5. write the output
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/create_output_file.py asmb.input paths.output

Solutions are scored.
The output is written to : multifit.output, each line is of the format for a 4 protein complex:
solution index | solution filename | fitting score| ev score | prot1 transformation |prot2 transformation |prot3 transformation |prot4 transformation |


== 2.6 create all docking solutions
$IMP/tools/imppy.sh python  ../bin/run_pairwise_docking.py asmb.input
#convering to IMP format
==2.7 [for debugging calculate the RMSD of the docking solutions]


===== TO ADD, not fully supported at this point
8. improve by pairwise docking
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/assemble_paths.py asmb.input
9. minimize


================================
== 1. Create fine parameters
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_assembly_input.py -i asmb.refined.input -- input/1tyq.subunit.list.txt 3 input/1tyq_15.mrc 15 2 300 30 4 -96
== 2. Create the fine anchors
$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/generate_anchors.py asmb.refined.input



==================================
===== Rank by CC match


$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/score_by_points_matching.py input/1tyq_A.pdb A_fitting_rmsd.txt 10 A_anchors.fine.txt em_anchors.FINE.txt A_fitting_rmsd_point_match_score.txt

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/score_by_points_matching.py input/1tyq_B.pdb B_fitting_rmsd.txt 10 B_anchors.fine.txt em_anchors.FINE.txt B_fitting_rmsd_point_match_score.txt

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/score_by_points_matching.py input/1tyq_C.pdb C_fitting_rmsd.txt 10 C_anchors.fine.txt em_anchors.FINE.txt C_fitting_rmsd_point_match_score.txt

$IMP/tools/imppy.sh python $IMP/modules/multifit2/bin/score_by_points_matching.py input/1tyq_D.pdb D_fitting_rmsd.txt 10 D_anchors.fine.txt em_anchors.FINE.txt D_fitting_rmsd_point_match_score.txt

%include "RMF/infrastructure_macros.h"

/* Apply the passed macro to each type used in RMF */
%define IMP_RMF_SWIG_FOREACH_TYPE(macroname)
  macroname(int, Int);
  macroname(float, Float);
  macroname(index, Index);
  macroname(string, String);
  macroname(node_id, NodeID);
  macroname(node_ids, NodeIDs);
  macroname(ints, Ints);
  macroname(index_data_set_2d, IndexDataSet2D);
  macroname(float_data_set_2d, FloatDataSet2D);
%enddef

%pythoncode %{
_types_list=[]
def get_data_types():
   return _types_list
%}

/* Declare the needed things for each type */
%define IMP_RMF_SWIG_DECLARE_TYPE(lcname, Ucname)
namespace RMF {
%rename(_##Ucname##Traits) Ucname##Traits;
}
IMP_SWIG_VALUE_INSTANCE(RMF, Ucname##Key, Ucname##Key, Ucname##Keys);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5##Ucname##DataSet1D, HDF5##Ucname##DataSet1D, HDF5##Ucname##DataSet1Ds);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5##Ucname##DataSet2D, HDF5##Ucname##DataSet2D, HDF5##Ucname##DataSet2Ds);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5##Ucname##DataSet3D, HDF5##Ucname##DataSet3D, HDF5##Ucname##DataSet3Ds);
%pythoncode %{
_types_list.append(#lcname)
%}
%enddef

%define IMP_RMF_SWIG_DEFINE_TYPE(lcname, Ucname)
%template(HDF5##Ucname##DataSet1D) RMF::HDF5DataSetD<RMF::Ucname##Traits, 1>;
%template(HDF5##Ucname##DataSet2D) RMF::HDF5DataSetD<RMF::Ucname##Traits, 2>;
%template(HDF5##Ucname##DataSet3D) RMF::HDF5DataSetD<RMF::Ucname##Traits, 3>;
%template(Ucname##Key) RMF::Key<RMF::Ucname##Traits>;
%enddef


IMP_SWIG_GRAPH(RMF, NodeTree, NodeTree, RMF::NodeHandle);
IMP_SWIG_VALUE(RMF, NodeHandle, NodeHandles);
IMP_SWIG_VALUE(RMF, RootHandle, RootHandles);
IMP_SWIG_VALUE(RMF, NodeID, NodeIDs);
IMP_SWIG_VALUE(RMF, Category, Categories);
IMP_SWIG_VALUE_TEMPLATE(RMF, Key);
IMP_SWIG_VALUE(RMF, HDF5Group, HDF5Groups);
IMP_SWIG_VALUE(RMF, HDF5File, HDF5Files);
IMP_SWIG_VALUE_TEMPLATE(RMF, HDF5DataSetD);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5DataSetIndex1D, HDF5DataSetIndex1D, HDF5DataSetIndex1Ds);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5DataSetIndex2D, HDF5DataSetIndex2D, HDF5DataSetIndex2Ds);
IMP_SWIG_VALUE_INSTANCE(RMF, HDF5DataSetIndex3D, HDF5DataSetIndex3D, HDF5DataSetIndex3Ds);
IMP_SWIG_PAIR(RMF, NodeHandle, BondPair, BondPairs)

IMP_RMF_SWIG_FOREACH_TYPE(IMP_RMF_SWIG_DECLARE_TYPE);

// char is special cased since it is just used for attributes
namespace RMF {
%rename(_CharTraits) CharTraits;
}

%extend RMF::RootHandle {
   %pythoncode %{
    def get_keys(self, kc):
        ret=[]
        for t in _types_list:
           fn= getattr(self, "get_"+t+"_keys")
           ret.extend(fn(kc))
        return ret
  %}
}




%include "RMF/NodeID.h"
%include "RMF/hdf5_handle.h"
%include "RMF/hdf5_types.h"
%template(_IntsTraits) RMF::ArrayTraits<RMF::IntTraits>;
%template(_NodeIDsTraits) RMF::ArrayTraits<RMF::NodeIDTraits>;

%include "RMF/HDF5DataSetD.h"
%template(HDF5DataSetIndex1D) RMF::HDF5DataSetIndexD<1>;
%template(HDF5DataSetIndex2D) RMF::HDF5DataSetIndexD<2>;
%template(HDF5DataSetIndex3D) RMF::HDF5DataSetIndexD<3>;
%template(_IndexDataSet2DTraits) RMF::HDF5DataSetDTraits<RMF::IndexTraits, 2>;
%template(_FloatDataSet2DTraits) RMF::HDF5DataSetDTraits<RMF::FloatTraits, 2>;

%include "RMF/Key.h"
IMP_RMF_SWIG_FOREACH_TYPE(IMP_RMF_SWIG_DEFINE_TYPE);

%include "RMF/HDF5Group.h"
%include "RMF/Category.h"
%include "RMF/NodeHandle.h"
%include "RMF/RootHandle.h"


Import('env')
import scons_tools.dependency
import scons_tools.dependency.boost
import scons_tools.data


scons_tools.dependency.add_external_library(env, "HDF5", ["hdf5"],
                                            "hdf5.h",
                                            extra_libs=["z", "m"],
                                            body='H5garbage_collect();')
#                                            versionheader="hdf5.h",
#                                            versioncpp=["H5Acreate_vers"])

scons_tools.dependency.boost.add_boost_library(env, "FileSystem", "filesystem",
                                               'boost/filesystem/path.hpp',
                                               body="boost::filesystem::path p;",
                                               extra_boost_libs=["system"])
scons_tools.dependency.boost.add_boost_library(env, "Thread", "thread",
                                               'boost/thread/mutex.hpp',
                                               body="boost::mutex p;",
                                               extra_boost_libs=["system"])
scons_tools.dependency.add_external_library(env, "ProtoBuf", ["protobuf"],
                                            "google/protobuf/text_format.h")

olinktest=env['linktest']
env['linktest']=False
if env['build']=='fast':
    ocppdef= env.get('CPPDEFINES', [])
    env.Append(CPPDEFINES=["IMP_RMF_NDEBUG"])

oenv=env.IMPModuleBuild(version='nightly-25/5/2012',
                   required_modules=[],
                   required_dependencies=['HDF5', "Boost.FileSystem",
                                          "Boost.Thread"],
                   optional_dependencies=["ProtoBuf"],
                   module='RMF', module_libname="RMF", module_pylibname="_RMF",
                   module_include_path="RMF",
                   module_preproc="RMF", module_namespace="RMF", data=False)

if not env.GetOption('help') and not env.GetOption('clean') \
   and scons_tools.data.get(env).modules['RMF'].ok \
   and "ProtoBuf" in scons_tools.data.get(env).modules['RMF'].dependencies:
    oenv.Append(CPPPATH=[Dir(env['builddir']+"/src")])
    """cat %(tmpdir)s/RMF.pb.cc | sed "s#data/RMF.pb.h#RMF/internal/proto.hpp#g"> %(targetcc)s"""
    def build_protoc(target, source, env):
        cmd="""mkdir -p %(tmpdir)s;
cp %(source)s %(tmpdir)s
cd %(tmpdir)s; protoc RMF.proto --cpp_out=%(tmpdir)s --python_out=%(tmpdir)s
mv %(tmpdir)s/RMF.pb.cc %(targetcc)s
mv %(tmpdir)s/RMF.pb.h %(targeth)s
mv %(tmpdir)s/RMF_pb2.py %(targetpy)s
"""%{"tmpdir":Dir(env['builddir']+"/tmp").abspath,
     "targetcc":target[0].path,
     "targeth":target[1].path,
     "targetpy":target[2].path,
     "source":source[0].path}
        env.Execute(cmd)
    oenv['BUILDERS']['Protoc']=Builder(action=build_protoc)
    oenv.Protoc(source=[File("./data/RMF.proto")],
               target=[File(env['builddir']+"/src/RMF.pb.cpp"),
                       File(env['builddir']+"/src/RMF.pb.h"),
                       File(env['builddir']+"/src/_RMF_proto.py")])
env['linktest']=olinktest
if env['build']=='fast':
    env['CPPDEFINES']=ocppdef

/*
 * \file RMF/RMF_config.h
 * \brief Provide macros to mark functions and classes as exported
 *        from a DLL/.so, and to set up namespaces
 *
 * When building the module, RMF_EXPORTS should be defined, and when
 * using the module externally, it should not be. Classes and functions
 * declared in the module's headers should then be marked with
 * RMFEXPORT if they are intended to be part of the API and
 * they are not defined entirely in a header.
 *
 * The Windows build environment requires applications to mark exports in
 * this way; we use the same markings to set the visibility of ELF symbols
 * if we have compiler support.
 *
 * All code in this module should live in the RMF namespace.
 * This is simply achieved by wrapping things with the
 * RMF_BEGIN_NAMESPACE and RMF_END_NAMESPACE macros.
 * There are similar macros for module code that is designed to be for
 * internal use only.
 *
 * This header is auto-generated by scons_tools/module/_config_h.py;
 * it should not be edited manually.
 *
 * Copyright 2007-2012 IMP Inventors. All rights reserved.
 *
 */

#ifndef RMF_CONFIG_H
#define RMF_CONFIG_H

#include <string>


#  ifdef _MSC_VER

#    ifdef RMF_EXPORTS
#      define RMFEXPORT __declspec(dllexport)
#    else // EXPORTS
#      define RMFEXPORT __declspec(dllimport)
#    endif // EXPORTS

#  else // _MSC_VER

#    ifdef GCC_VISIBILITY
#      define RMFEXPORT __attribute__ ((visibility("default")))
#    else // GCC_VISIBILITY
#      define RMFEXPORT
#    endif // GCC_VISIBILITY
#  endif // _MSC_VER

#  if defined(_MSC_VER) && !defined(SWIG)
#    ifdef RMF_EXPORTS

#      define RMF_EXPORT_TEMPLATE(name)                 template class __declspec(dllexport) name

#    else //EXPORTS

#      define RMF_EXPORT_TEMPLATE(name)                 template class __declspec(dllimport) name

#    endif // EXPORTS

#  else // MSC and SWIG
#    define RMF_EXPORT_TEMPLATE(name) IMP_REQUIRE_SEMICOLON_NAMESPACE

#  endif // MSC and SWIG



#  define RMF_BEGIN_NAMESPACE \
namespace RMF {\

#  define RMF_END_NAMESPACE \
} /* namespace RMF */ \

#  define RMF_BEGIN_INTERNAL_NAMESPACE \
RMF_BEGIN_NAMESPACE \
namespace internal {


#  define RMF_END_INTERNAL_NAMESPACE \
} /* namespace internal */ \
RMF_END_NAMESPACE



#  define RMF_USE_HDF5

#  define RMF_USE_BOOST_FILESYSTEM

#  define RMF_USE_BOOST_THREAD



//  functions are defined explicitly for swig
#ifndef SWIG

#ifndef IMP_DOXYGEN
namespace std {
template <class T, class A>
class vector;
template <class A, class B>
class pair;
}
namespace IMP {
namespace compatibility {
template <class T>
class checked_vector;
}
}
#include <sstream>
#endif

RMF_BEGIN_NAMESPACE
/** \name Standard module methods
  All \imp modules have a set of standard methods to help get information
  about the module and about file associated with the modules.
  @{
  */
RMFEXPORT std::string get_module_version();

inline std::string get_module_name() {
   return "RMF";
}



RMF_END_NAMESPACE

#endif // SWIG

#endif  /* RMF_CONFIG_H */

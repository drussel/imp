Import('env', 'modconfig')

# Pass gcc or MSVC suitable options to mark dynamic symbols as exported or
# private:
env = env.Copy()
env.Append(CPPDEFINES=['IMP_EXPORTS', '${VIS_CPPDEFINES}'],
           CCFLAGS='${VIS_CCFLAGS}')

# On AIX things get confused if AIX C but not AIX C++ is installed - AIX C
# options get passed to g++ - so hard code GNU link flags:
if 'aixcc' in env['TOOLS'] and 'aixc++' not in env['TOOLS'] \
   and 'g++' in env['TOOLS']:
    slflags = str(env['SHLINKFLAGS'])
    env['SHLINKFLAGS'] = slflags.replace('-qmkshrobj -qsuppress=1501-218',
                                         '-shared')

# Check for the powf() function in the C++ cmath header:
def CheckPowf(context):
    context.Message('Checking for powf() function in C++ cmath header...')
    text = """
#include <cmath>
int main(void)
{ return (int)powf(0.,0.); }
"""
    res = context.TryLink(text, '.cpp')
    if not res:
        context.Result("no")
    else:
        context.Result("yes")
    return res

conf = env.Configure(custom_tests={'CheckPowf': CheckPowf})
if conf.CheckPowf():
    env.Append(CPPDEFINES=['HAVE_POWF'])
conf.Finish()

# Source files
files = ('Score_Func.cpp', 'Model.cpp', 'Model_Data.cpp', 'Optimizer.cpp',
         'Particle.cpp', 'Restraint_Set.cpp', 'Restraint.cpp',
         'Complexes_Restraints.cpp', 'Rigid_Body.cpp', 'log.cpp', 'imp.cpp',
         'emfile.cpp', 'emscore.cpp')

# Header files
headers = ('Complexes_Restraints.h', 'Model_Data.h', 'Optimizer.h',
           'Restraint_Set.h', 'IMP.h', 'Model.h', 'Particle.h', 'Rigid_Body.h',
           'log.h', 'Model_Loader.h', 'Restraint.h', 'Score_Func.h')

# Build the shared library:
lib = env.SharedLibrary('imp', files)

# Install the library:
libinst = env.Install(modconfig['libinstall'], lib)
env.Alias('install', [libinst])

# Subdirectories:
pyext = SConscript('pyext/SConscript')
test = SConscript('tests/SConscript')
env.Depends(test, lib)

Return('lib', 'pyext')

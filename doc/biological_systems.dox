/** \page biosys_sug_struct Biological Systems Suggested Structure

A biological system should have each of a several scripts
    - \c setup.py which should be run first in order to set everything up (if it is missing, no setup is required)
    And then one or move of
    - \c sample_i.py: These scripts can take the following arguments:
            - \c -j \c i: an index
            - \c -n \c i: the total number of independent parts to divide the task in to
            - \c --test: run a more limited version of the sampling to test the script
            - \c -i \c path_to_directory: where to find the outputs of the last script (if there was one)
            - \c -o \c path_to_directory: where to write output files
            - \c -d \c path_to_data: where to find input data (defaults to the 'data' directory in the directory containing the script
            .
      That is, running \command{sample_0.py 3 13 output_0} divides the job into 13 independent parts and
      runs part 3 of it. The output will be placed in output_0.
    - \c analyze_i.py which, after all parts of run_i have have completed, performs analysis
      on the results. These scripts also take the -i, -o, and -d arguments.
    .
    The scripts for a given iteration must have completed before the scripts for the next
    iteration may be run (although some applications will include intermediate data, allowing
    users to avoid running all the scripts in order).

    A biological system can be marked as testable meaning that it can be run with only partial sampling by using the "--test" argument.

    Also, a biological system can be marked as parallelizeable which means that, given  \c sample_0.py, \c sample_1.py and \c analyze_0.py exist, the following will work
    work (from any directory):
    - \command{path_to_application/sample_0.py -j 0 -n 3 -o output_0}
    - \command{path_to_application/sample_0.py -j 1 -n 3 -o output_0}
    - \command{path_to_application/sample_0.py -j 2 -n 3 -o output_0}
    to divide the sampling into three parts and run them separately (eg in different machines or cores).

    The names of the directories where to look for inputs and outputs can be specified
    for each of the script. By default, data is found in a directory called "data"
    in the directory containing the scripts. The output for \c sample_i.py is
    \c sample_i in the current directory. The input for \c sample_i.py for i>0
    is \c sample_{i-1}. The input for \c analyze_0.py is the last sample output and the
    output is \c analyzed_0 (and accordingly for later analyze scripts).

    The IMP::system module provides support for writing biological system scripts.
*/
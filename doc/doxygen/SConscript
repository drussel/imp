Import('env')

import os
import os.path


def run_doxygen(target, source, env):
    env.Execute("doxygen "+source[0].abspath)


env.Append(BUILDERS = {'RunDoxygen': Builder(action=run_doxygen)})

docdir = env.GetInstallDirectory('docdir', 'doxygen')

# Install all files from 'dox' directory into the 'docdir' directory (cannot
# use env.InstallAs() right now, due to scons bug #1751)

input_files=Glob("#/examples/README") +Glob("#/examples/*/README")\
    +Glob("#/examples/*.py") +Glob("#/examples/*/*.py")\
    +Glob("#/examples/*.cpp") +Glob("#/examples/*/*.cpp")
examples = env.MakeExamples("#/doc/doxygen/.examples/examples.dox",
                            input_files)


# Generate doxygen.conf from doxygen.conf.in
def generate_doxygen(target, source, env):
    infile = file(source[0].path, 'r')
    outfile = file(target[0].path, 'w')
    source_path= os.path.split(os.path.split(os.path.split(source[0].abspath)[0])[0])[0]
    target_path= os.path.split(os.path.split(os.path.split(target[0].abspath)[0])[0])[0]
    print >> outfile, "# Auto-generated by SConscript; do NOT edit directly!"
    print >> outfile, "# Edit %s instead\n" % source[0].path
    for line in infile:
        if '@INPUTS@' in line:
            for s in source[1:]:
                outfile.write("     \""+s.abspath + "\"\\\n")
        elif '@IMP_SOURCE_PATH@' in line:
            outfile.write(line.replace('@IMP_SOURCE_PATH@', source_path))
        elif '@IMP_TARGET_PATH@' in line:
            outfile.write(line.replace('@IMP_TARGET_PATH@', target_path))
        elif '@IMP_HAS_DOT@' in line:
            if env.get('dot', True) and os.system('dot -V > /dev/null') == 0:
                outfile.write(line.replace('@IMP_HAS_DOT@', 'YES'))
            else:
                outfile.write(line.replace('@IMP_HAS_DOT@', 'NO'))
        elif not line.startswith('#'):
            outfile.write(line)
    infile.close()
    outfile.close()


env.Append(BUILDERS = {'GenerateDoxygen': Builder(action=generate_doxygen)})
headers=[]
for h in Glob("#/build/include/*.h") + Glob("#/build/include/IMP/*.h") +Glob("#/build/include/IMP/*/*.h"):
    if h.path.find("internal")==-1:
        headers.append(h)
sources= headers +Glob("#/kernel/doc/*.dox") + Glob("#/kernel/doc/.generated/*.dox")\
    + Glob(".examples/*.dox") + Glob("modules/*/doc/*.dox")
doxconf=env.GenerateDoxygen("doxygen.conf", ["doxygen.conf.in"] +sources)

dox = env.RunDoxygen("#/doc/html/index.html", ["doxygen.conf"]+sources)
env.Command(Dir(env.subst(docdir)), dox,
            "install -d $TARGET && install ${SOURCE.dir}/* $TARGET")
env.Alias('doc-install', docdir)
Clean(dox, Glob("#/doc/html/*"))


Return('dox', 'examples')

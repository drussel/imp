Import('env')

import os
import os.path


def run_doxygen(target, source, env):
    env.Execute("doxygen "+source[0].abspath)


# Generate doxygen.conf from doxygen.conf.in
def generate_doxygen(target, source, env):
    print "generatind doxygen conf"
    infile = file(source[0].path, 'r')
    outfile = file(target[0].path, 'w')
    source_path= os.path.split(os.path.split(os.path.split(source[0].abspath)[0])[0])[0]
    target_path= os.path.split(os.path.split(os.path.split(target[0].abspath)[0])[0])[0]
    print >> outfile, "# Auto-generated by SConscript; do NOT edit directly!"
    print >> outfile, "# Edit %s instead\n" % source[0].path
    examples=[]
    inputs=[]
    images=[]
    for s in source[1:]:
        if str(s).endswith(".png"):
            images.append(s)
        else:
            put=False
            if str(s).find('example') !=-1 and not str(s).endswith(".dox"):
                examples.append(s)
                put=True
            if str(s).endswith(".dox") or str(s).endswith(".py") or str(s).endswith(".h"):
                inputs.append(s)
                put=True
            if not put:
                print >> sys.stderr, "Warning, do not know what to do with the file "+ str(s)
    for line in infile:
        if '@IMP_IMAGES@' in line:
            for s in images:
                outfile.write("     \""+s.abspath + "\"\\\n")
        elif '@INPUTS@' in line:
            for s in inputs:
                outfile.write("     \""+s.abspath + "\"\\\n")
        elif '@IMP_EXAMPLES@' in line:
            for s in examples:
                outfile.write("     \""+s.abspath + "\"\\\n")
        elif '@IMP_SOURCE_PATH@' in line:
            outfile.write(line.replace('@IMP_SOURCE_PATH@', source_path))
        elif '@IMP_TARGET_PATH@' in line:
            outfile.write(line.replace('@IMP_TARGET_PATH@', target_path))
        elif '@IMP_HAS_DOT@' in line:
            if env.get('dot', True) and os.system('dot -V > /dev/null') == 0:
                outfile.write(line.replace('@IMP_HAS_DOT@', 'YES'))
            else:
                outfile.write(line.replace('@IMP_HAS_DOT@', 'NO'))
        elif not line.startswith('#'):
            outfile.write(line)
    infile.close()
    outfile.close()


def generate_example_index(target, source, env):
    print "generating index"
    outfile= open(target[0].abspath, "w")
    print >> outfile, """/** \page examples IMP Examples
Each modules has its own set of examples demonstrating how to use the features of that particular module."""
    for p in source:
        contents= open(p.abspath, "r").read()
        # rather dumb, I think
        name= contents[contents.find("\page")+6:].split(" ")[0]
        print >> outfile, " - \\ref "+name +"\n"
    print >> outfile, "*/"
    print "done generating examples"

env.Append(BUILDERS = {'RunDoxygen': Builder(action=run_doxygen)})

docdir = env.GetInstallDirectory('docdir', 'html')

# Install all files from 'dox' directory into the 'docdir' directory (cannot
# use env.InstallAs() right now, due to scons bug #1751)

input_files=Glob("#/examples/README") +Glob("#/examples/*/README")\
    +Glob("#/examples/*.py") +Glob("#/examples/*/*.py")\
    +Glob("#/examples/*.cpp") +Glob("#/examples/*/*.cpp")



env.Append(BUILDERS = {'GenerateDoxygen': Builder(action=generate_doxygen)})



env.Append(BUILDERS = {'GenerateExamples': Builder(action=generate_example_index)})

examplei= env.GenerateExamples("all_examples.dox", Glob("#/modules/*/examples/examples.dox")\
                                   + Glob("#/kernel/examples/examples.dox"))

headers=[]
for h in Glob("#/build/include/*.h", ondisk=False) \
         + Glob("#/build/include/IMP/*.h", ondisk=False) \
         + Glob("#/build/include/IMP/*/*.h", ondisk=False):
    if h.path.find("internal")==-1:
        headers.append(h)
modexamples=Glob("#/modules/*/examples/*.dox")+['#/kernel/examples/examples.dox']
sources= headers +Glob("#/kernel/doc/*.dox") + Glob("#/doc/doxygen/*.dox")\
    +Glob("modules/*/doc/*.dox")+modexamples
if env['python']:
    sources += Glob("#/build/lib/IMP/*.py", ondisk=False) \
               + Glob("#/build/lib/IMP/*/*.py", ondisk=False)
examples= Glob("#/modules/examples/src/*.cpp") + Glob("#/modules/examples/include/*.h")\
    + Glob("#/modules/*/examples/*.py") + Glob("#/modules/*/examples/*/*.py")\
    + Glob("#/modules/*/examples/*.cpp") + Glob("#/modules/*/examples/*/*.cpp")\
    + Glob("#/modules/*/examples/*.html") + Glob("#/modules/*/examples/*/*.html")\
    + Glob("#/kernel/examples/*.py") + Glob("#/kernel/examples/*/*.py")\
    + Glob("#/kernel/examples/*.cpp") + Glob("#/kernel/examples/*/*.cpp")\
    + Glob("#/kernel/examples/*.html") + Glob("#/kernel/examples/*/*.html")\
    + Glob("#/modules/*/doc/*.dox") + Glob("#/modules/*/doc/*/*.dox")\
    + Glob("#/modules/*/doc/*.png") + Glob("#/modules/*/doc/*/*.png")\
    + Glob("#/modules/*/doc/*.html") + Glob("#/modules/*/doc/*/*.html")\
    + Glob("#/kernel/doc/*.dox") + Glob("#/kernel/doc/*/*.dox")\
    + Glob("#/kernel/doc/*.png") + Glob("#/kernel/doc/*/*.png")\
    + Glob("#/kernel/doc/*.html") + Glob("#/kernel/doc/*/*.html")\

modexamples.sort()
sources.sort()
examples.sort()

env.Depends(examplei, modexamples)
doxconf=env.GenerateDoxygen("doxygen.conf", ["doxygen.conf.in"] +sources+examples)
env.Depends(doxconf, ['#/build/include'])

dox = env.RunDoxygen("#/doc/html/index.html", ["doxygen.conf"]+sources)

install=env.Command(Dir(env.subst(docdir)), dox,
                    "install -d $TARGET && cp -r ${SOURCE.dir}/* $TARGET")
env.Alias('doc-install', install)
env.Alias('doc', dox)
env.Requires(install, env.Alias('doc'))
env.Depends(env.Alias('all'), [env.Alias('doc')])
Clean(dox, Glob("#/doc/html/*"))

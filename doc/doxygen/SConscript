Import('env')

import os
import os.path
import sys
import scons_tools.install

def run_doxygen(target, source, env):
    env.Execute("cd %s; "%Dir("#/build").abspath+File("#/tools/imppy.sh").abspath + " doxygen "+File("#/build/doxygen/Doxyfile.xml").abspath)
    env.Execute("cd %s; "%Dir("#/build").abspath+File("#/scons_tools/build_tools/make_cross_refs.py").abspath)
    env.Execute("cd %s; "%Dir("#/build").abspath+File("#/tools/imppy.sh").abspath + " doxygen "+File("#/build/doxygen/Doxyfile.html").abspath)
def print_doxygen(target, source, env):
    print "running doxygen"

env.Append(BUILDERS = {'RunDoxygen': Builder(action=env.Action(run_doxygen,
                                                               print_doxygen))})

docdir = scons_tools.install.get_install_directory(env, 'docdir', 'html')

# Install all files from 'dox' directory into the 'docdir' directory (cannot
# use env.InstallAs() right now, due to scons bug #1751)

dox = env.RunDoxygen(target="#/build/doc/html/index.html",
                     source="#/build/doxygen/Doxyfile.html")
env.Requires(dox, Glob("#/build/doxygen/*.dox")+Glob("#/build/doxygen/*/*.dox"))
env.Requires(dox, "#/tools/imppy.sh")
env.AlwaysBuild(dox)

# Need to have the top level IMP Python package in place (even if we don't
# parse it for Python classes) so that doxygen can figure out that modules
# live under the IMP Python module (e.g. IMP.restrainer rather than restrainer)
env.Depends(dox, '#/build/lib/IMP/__init__.py')

install=env.Command(Dir(env.subst(docdir)), dox,
                    "install -d $TARGET && cp -rL ${SOURCE.dir}/* $TARGET")
env.Alias('doc-install', install)
env.Alias('doc', dox)
env.Requires(install, env.Alias('doc'))

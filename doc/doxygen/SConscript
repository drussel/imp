Import('env')

import os
import os.path
import sys
import scons_tools.install

def run_doxygen(target, source, env):
    print "doxy is ", env['DOXYGEN']
    env.Execute(env['DOXYGEN']+" "+source[0].abspath)
def print_doxygen(target, source, env):
    print "running doxygen"
def print_generate_doxygen(target, source, env):
    print "generating doxygen configuration"
def print_generate_doxygen_header(target, source, env):
    print "generating doxygen header ", target[0].path


def make_output(nodes):
    return "     "+"\\\n     ".join(['"'+x.abspath+'"' for x in nodes])

def generate_doxygen_header(target, source, env):
    print "generate header from ", source[0].path
    infile = file(source[0].path, 'r')
    outfile= file(target[0].path, 'w')
    for l in infile:
        if l.find("DOXYGEN STUFF GOES HERE") != -1:
            outfile.write("""<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="$relpath$tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="$relpath$jquery.js"></script>
<script type="text/javascript" src="$relpath$dynsections.js"></script>
$treeview
$search
$mathjax
<link href="$relpath$doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->""")


        elif l.find('@TOPDIR@pygments.css') == -1:
            l = l.replace('@TOPDIR@', '')
            outfile.write(l)

# Generate doxygen.conf from doxygen.conf.in
def generate_doxygen(target, source, env):
    print "generating doxygen.conf"
    infile = file(source[0].path, 'r')
    outfile = file(target[0].path, 'w')
    source_path= os.path.split(os.path.split(os.path.split(source[0].abspath)[0])[0])[0]
    target_path= os.path.split(os.path.split(os.path.split(target[0].abspath)[0])[0])[0]
    print >> outfile, "# Auto-generated by SConscript; do NOT edit directly!"
    print >> outfile, "# Edit %s instead\n" % source[0].path
    examples=[]
    inputs=[]
    images=[]
    dots=[]
    has_dot=source[1].get_contents()
    for s in source[2:]:
        ss= str(s)
        if ss.endswith(".png"):
            images.append(s)
        else:
            put=False
            if ss.find('example') !=-1 and not ss.endswith(".dox"):
                examples.append(s)
                put=True
            if ss.endswith(".dox") \
                    or ss.endswith(".h"):
                inputs.append(s)
                put=True
            elif ss.endswith(".py"):
                put=True
                if ss.find("/_") ==-1 or ss.endswith("__init__.py"):
                    inputs.append(s)
            elif ss.endswith(".dot"):
                dots.append(s)
                put = True
            elif ss.endswith(".def"):
                put = True
            elif ss.endswith("header.txt"):
                put = True
            if not put:
                print >> sys.stderr, "Warning, do not know what to do with the file "+ ss
    for line in infile:
        if '@IMP_IMAGES@' in line:
            outfile.write(make_output(images))
        elif '@INPUTS@' in line:
            outfile.write(make_output(inputs))
        elif '@IMP_EXAMPLES@' in line:
            outfile.write(make_output(examples))
        elif '@IMP_DOTS@' in line:
            outfile.write(make_output(dots))
        elif '@IMP_SOURCE_PATH@' in line:
            outfile.write(line.replace('@IMP_SOURCE_PATH@', source_path))
        elif '@IMP_TARGET_PATH@' in line:
            outfile.write(line.replace('@IMP_TARGET_PATH@', target_path))
        elif '@IMP_ENABLED_SECTIONS@' in line:
            if has_dot == "YES":
                outfile.write(line.replace('@IMP_ENABLED_SECTIONS@', "graphs"))
            else:
                outfile.write("")
        elif '@IMP_HAS_DOT@' in line:
            outfile.write(line.replace('@IMP_HAS_DOT@', has_dot))
        elif not line.startswith('#'):
            outfile.write(line)
    infile.close()
    outfile.close()


env.Append(BUILDERS = {'RunDoxygen': Builder(action=env.Action(run_doxygen,
                                                               print_doxygen))})

docdir = scons_tools.install.get_install_directory(env, 'docdir', 'html')

# Install all files from 'dox' directory into the 'docdir' directory (cannot
# use env.InstallAs() right now, due to scons bug #1751)

env.Append(BUILDERS = {'GenerateDoxygen':
                       Builder(action=env.Action(generate_doxygen,
                                                 print_generate_doxygen))})
env.Append(BUILDERS = {'GenerateDoxygenHeader':
                       Builder(action=env.Action(generate_doxygen_header,
                                                 print_generate_doxygen_header))})





rawheaders=[]
for h in Glob("#/build/include/*.h", ondisk=False) \
         + Glob("#/build/include/RMF/*.h", ondisk=False) \
         + Glob("#/build/include/IMP/*.h", ondisk=False) \
         + Glob("#/build/include/IMP/*/*.h", ondisk=False):
    if h.path.find("internal")==-1:
        rawheaders.append(h)

sources = rawheaders
for d in ["#/kernel/doc/",
          "#/modules/*/doc/",
          "#/kernel/examples/",
          "#/modules/*/examples/",
          "#/biological_systems/*/",
          "#/biological_systems/*/doc/",
          "#/applications/*/",
          "#/doc/",]:
    for t in ["dox", "xml", "dot"]:
        #print "checking fr surces matching",d+"*."+t,"and",d+"generated/*."+t
        sources+= Glob(d+"*."+t)
        sources+= Glob(d+"generated/*."+t)

if env['IMP_PROVIDE_PYTHON']:
    for p in env.get('IMP_PYTHON_DOCS', []):
        sources += Glob("#/build/lib/IMP/"+p+"/*.py", ondisk=False) \
                   + Glob("#/build/lib/IMP/"+p+"/*/*.py", ondisk=False)
examples=[]
for d in ["#/modules/example/src/",
          "#/modules/example/include/",
          "#/modules/*/examples/",
          "#/biological_systems/*/doc/",
          "#/biological_systems/*/",
          "#/kernel/examples/",]:
    for t in ["py", "cpp", "png", "png", "html", "xml"]:
        #print "checking fr examples matching",d+"*."+t, d+"*/*."+t
        cur=Glob(d+"*."+t)+Glob(d+"*/*."+t)
        #print "fund", [str(x) for x in cur]
        examples+=cur

# skip layout.xml and footer.html
for t in ["py", "cpp", "png", "png", "html", "xml"]:
        #print "checking fr examples matching",d+"*."+t, d+"*/*."+t
    cur=Glob("#/doc/*."+t)
    examples+=cur

#sources.sort()
examples.sort()

doxyheader= env.GenerateDoxygenHeader(target=["#/doc/doxygen/generated/header.txt"],
                                      source=["#/website/header.txt"])
env.Alias('doxygen-header', doxyheader)
dot= env.get('DOT', None)
#print "dot is", dot
if dot:
    dotstring="YES"
else:
    dotstring="NO"
#print "dotstring is", dotstring
doxconf=env.GenerateDoxygen(target="doxygen.conf",
                            source=["doxygen.conf-in",
                                    env.Value(dotstring)] +sources+examples)
env.Depends(doxconf, ['#/build/include'])

dox = env.RunDoxygen(target="#/build/doc/html/index.html",
                     source=["doxygen.conf"]+sources+[doxyheader])
env.Depends(dox, '#/doc/doxygen/doxypy.py')

# Need to have the top level IMP Python package in place (even if we don't
# parse it for Python classes) so that doxygen can figure out that modules
# live under the IMP Python module (e.g. IMP.restrainer rather than restrainer)
env.Depends(dox, '#/build/lib/IMP/__init__.py')
env.Requires(dox, env.Alias("doc-files"))

install=env.Command(Dir(env.subst(docdir)), dox,
                    "install -d $TARGET && cp -r ${SOURCE.dir}/* $TARGET")
env.Alias('doc-install', install)
env.Alias('doc', dox)
env.Requires(install, env.Alias('doc'))
Clean(dox, Glob("#/build/doc/html/*"))

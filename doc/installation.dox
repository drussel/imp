/**
\page installation Getting started

\imp is available in a variety of different ways. If you are just planning on using
existing \imp code and run on a standard platform, you may be able to install
a pre-built binary. See the \salilab{imp/download.html,download page}.

If you are planning on contributing to \imp, you should download and build the source.
See the next section for more information.

If you are building \imp from source, read the following sections, otherwise skip
to the last one.

\tableofcontents








\section userbuild 1. Building and installing basics

Building \imp from source is straightforward if the \ref prereq "prerequisites"
are already installed. We recommend you get \imp from \svn by
\command{svn checkout http://svn.salilab.org/imp/nightly/latest imp}
This will create directory called \c imp, containing a directory \c trunk. Go
in to that directory and do
 \command{scons prefix=place_to_install_imp install}

If there are build errors
-# make sure all prerequisites are installed
-# read the scons help (\c scons \c -h) to figure out any more arguments you need to pass to scons in order to make sure it finds needed external libraries.
.
If you cannot figure things out, feel free to post on the \impusers list.

\section tarball 1.1 Install IMP from a tarball
First, obtain the source code tarball from the
\salilab{imp/nightly/download.html,download page}.
code there
-# Extract the tarball
   \command{tar -xvzf imp-version.tar.gz}
   This will create a directory called \c imp containing all the source.
-# change into that directory and build by doing
   \command{scons prefix=place_to_install_imp install}


\section release 1.2 Using the IMP 1.0 release

One can, instead, use the IMP 1.0 release. We don't recommend it as it is very old
and are likely to respond to any problems by asking you to upgrade to the current
\svn version. But, if you still want to do this:
 First, obtain the source code tarball from the
\salilab{imp/download.html,download page}.
-# Extract the tarball
   \command{tar -xvzf imp-1.0.tar.gz}
   This will create a directory called \c imp-1.0 containing all the source.
-# change into that directory and build by doing
   \command{scons prefix=place_to_install_imp all}
-# install \imp by doing
   \command{scons prefix=place_to_install_imp install}

(If you are familiar with \svn, you can also use an SVN client to check out
the same code from our Subversion repository at
http://svn.salilab.org/imp/tags/release-1.0/)

\section devbuild 3. Building and installing for developers

To get started, if you have \c curl installed, you can do:
\command{curl -fsSLk http://svn.salilab.org/imp/trunk/tools/maintenance/make-developer-setup-read-only.sh | csh}
or, if you have write access,
\command{curl -fsSLk http://svn.salilab.org/imp/trunk/tools/maintenance/make-developer-setup.sh | csh}
Otherwise, just run the script by copying, doing
\command{cat | csh}
and pasting it into the terminal.

You can inspect the scripts before running by looking at \external{http://svn.salilab.org/imp/trunk/tools/maintenance/make-developer-setup-read-only.sh, make-developer-setup-read-only.sh} or \external{http://svn.salilab.org/imp/trunk/tools/maintenance/make-developer-setup.sh, make-developer-setup.sh}.

This creates a directory structure like
 - \c imp
   - \c svn
     - \c trunk: the \imp source
   - \c debug: a directory for building \imp to use with the debugger
   - \c release: a directory for a release build of \imp which has checks turned on, but is faster than debug. Use this for testing scripts.
   - \c fast: a directory to build \imp with all checks disabled. Use this build for running large jobs.
   - \c update-to-nightly: run this script to update your source to the latest nightly build
   - \c update-to-head: run this script if you need a patch that someone just commited to the repository
   - \c show-changes: run this script to show what has changed in \imp since you last updated.
   - \c global_config.py: a configuration file (see next section) that is shared by the \c debug, \c fast and \c release builds.

To get started using \imp go into the release directory and do
 \command{scons -j number_of_processors_on_your_machine -k}

In each build there is a script that sets up the environment to use that build eg \c debug/tools/imppy.sh. So to run a python script \c myscript.py using your debug build, do
\command{path/to/debug/tools/imppy.sh python myscript.py}


\note When you upgrade your system (eg get a new version of boost, or install
a prerequisite), scons may not detect the package automatically. To force it
to recheck, add the \c --config=force option when you run scons. In certain
rare cases, scons may get really confused, and you may need
to manually clear out the scons state. To do this, in the source directory do
\command{rm -rf .scon*}

\section config_files 3. Config files

If you are likely to be building \imp repeatedly, it can be useful to
put the arguments to \c scons into a config file. This is a file called \c config.py
located in the top-level \imp directory (the one containing the \c SConstruct file).
For %example one of ours looks like
\include "example_config.py"

For simple setups (such as a Linux build with no dependencies installed in odd places) the following would suffice.
\include "example_simple_config.py"
When building a module or biological system externally to the main \imp directory (but still using an svn copy of IMP, something like the following will do:
\include "example_external_config.py"

An example configuration for a Windows system might look like
\include "example_windows_config.py"

Finally, when building in a complicated environment, such as with the google native client, a config file might look like
\include "example_nacl_config.py"



\section prereq 4. Prerequisites
In order to obtain and compile \imp, you will need:

 - scons (0.98 or later)
 - Boost (1.33 or later)
 - Developers will also need a Subversion (svn) client to access the repository

If you wish to build the Python interfaces, you will also need:

 - Python (2.3 or later)
 - SWIG (1.3.40 or later)

If you install headers, libraries or tools anywhere other than the
standard locations (i.e. \c /usr/lib and friends) then you need to
tell \c SCons where to find them. This is done using the
`includepath`, `libpath`, and `path` options (paths are
colon-separated). These can either be passed to scons as command
line arguments or put in the \c config.py file. For example
\command{scons includepath=/usr/local/include:/opt/local/include libpath=/usr/local/lib path=/usr/local/bin}
Tells \imp to search to headers and libraries in the provided locations
in addition to the standard ones.

Notes on how to work around various platform issues can be found at
\wiki{build, the Build Notes page in the wiki}.

\subsection mac Getting prerequisites on a Mac

Mac users must first install Xcode (previously known as Developer Tools)
which is not installed by default with OS X, but is available from the App store
(or from the Mac OS install DVD for old versions of Mac OS).

Then Mac users should use one of the available collections of Unix tools,
either
 - \external{http://mxcl.github.com/homebrew/, Homebrew:} (recommended) Once you installed \c homebrew by running
\command{/usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"}
do
 \command{brew install boost gmp bullet google-perftools cgal graphviz scons gsl subversion doxygen hdf5 swig eigen llvm fftw mpfr gfortran}
to install everything \imp finds useful (or that you will want for installing various useful python libs that \imp finds useful).
 - \external{http://www.macports.org/, MacPorts:} If you use MacPorts, you must
add \c /opt/local/bin to your path (either by modifying your shell's
config file or by making an \c environment.plist file-see the
\salilab{imp/wiki/FAQ, FAQ}) and then do
\command{sudo port install boost scons swig-python}
to install the needed libraries and tools. When installing HDF5 with MacPorts, be sure to install \c hdf5-18
(version 1.8), rather than the older \c hdf5 (version 1.6.9).
 - or \external{http://www.finkproject.org/, Fink}

\note Mac OS X 10.5 and 10.6 include a 'swig' binary, but it is too old to use
with IMP. If you install SWIG with MacPorts above, you will need to make sure
SCons picks up your SWIG rather than Apple's by setting the `path` option when
running `scons`. Do not install any C++ headers in `/usr/include` on your Mac as
the compiler assumes any such headers are C headers.


\subsection windows Getting prerequisites on Windows

The SCons build system should work on Windows with the command line
Microsoft Visual Studio compiler (`cl`) but we have not been able to get
it to work (but haven't tried very hard either). (In the Sali lab, you can build a Windows version on
`synth` by running `scons` in the usual way, giving the `wine=true`
command line option.)

\subsection linux Getting prerequisites on Linux
All of the prerequisites should be available as pre-built packages for
your Linux distribution of choice.

\subsection optional Optional dependencies

\imp can make use of a variety of external tools to provide more or
better functionality.

\subsubsection doxygen Doxygen and Dot
\anchor doxygen
Building the documentation requires \external{http://www.doxygen.org/,Doxygen}.
In addition the documentation will look prettier if you have
\external{http://www.graphviz.org/,graphviz} installed. It is available as
part of most Unix tool sets (MacPorts, all Linux distributions etc.).

\subsubsection modeller MODELLER
\anchor modeller
If you want to use \imp with MODELLER, you should use version 9v7 or
later. If you installed the MODELLER Linux RPM or Mac package, it should be
detected automatically. Otherwise, tell scons where you installed MODELLER
using the following argument:
\command{scons modeller=path/to/modeller}

\subsubsection HDF5 HDF5
\anchor HDF5
Much IO support requires \external{http://www.hdf5.org, HDF5}, at least version
1.8. It is available as a prebuilt package on all supported platforms.

\subsubsection CGAL CGAL
\anchor CGAL
A wide variety of geometric computations will be faster, better or more reliable
if \ref cgal "CGAL" is installed. CGAL is available as part of most
Linux distributions and can be built from source on Mac OS or Linux. It
is free for academic use, but commercial use requires a license.

\subsubsection ANN ANN
\anchor ANN
\external{http://www.cs.umd.edu/~mount/ANN, ANN} is a library implementing fast
nearest neighbor searches. Certain data structures will be faster if
it is installed. While compilation of the library from source is quite
straight forward, it is not avaible as a package for common platforms.
In addition, ANN must be built as a shared library rather than a static
library. See the \salilab{imp/wiki/FAQ, FAQ}.

\subsubsection GSL GSL
\anchor GSL
The IMP.gsl module requires \external{http://www.gnu.org/software/gsl/,GSL}. It
is available as a prebuilt package on all supported platforms. Note that
GSL is distributed under the GPL and so cannot be used in C++ applications
with certain other dependencies such as CGAL.






\section next 5. Where to go next

You are now ready to use \imp within Python and C++.

Everyone should read the \ref introduction "Introduction" and developers should
then move on to the \ref devguide "Developer guide".

*/

/**
\page installation Getting started

\imp is available in a variety of different ways. If you are just planning on using
existing \imp code and run on a standard platform, you may be able to install
a pre-built binary. See the \salilab{imp/download.html,download page}.

If you are planning on contributing to \imp, you should download and build the source.
See the next section for more information.

If you are building \imp from source, read the following sections, otherwise skip
to the last one.
 -# \ref userbuild "Building and installing"
 -# \ref devbuild "Building IMP for developers"
 -# \ref prereq "Prerequisites"
 -# \ref next "Where to go next"









\section userbuild 1. Building and installing basics

Building \imp from source is straightforward if the \ref prereq "prerequisites"
are already installed. First, obtain the source code tarball from the
\salilab{imp/download.html,download page}.
code there
-# Extract the tarball
   \command{tar -xvzf imp-1.0.tar.gz}
   This will create a directory called \c imp-1.0 containing all the source.
-# change into that directory and build by doing
   \command{scons prefix=place_to_install_imp all}
-# install \imp by doing
   \command{scons prefix=place_to_install_imp install}

(If you are familiar with \svn, you can also use an SVN client to check out
the same code from our Subversion repository at
http://svn.salilab.org/imp/tags/release-1.0/)

If there are build errors
-# make sure all prerequisites are installed
-# read the scons help (\c scons \c -h) to figure out any more arguments you need to pass to scons in order to make sure it finds needed external libraries.
.
If you cannot figure things out, feel free to post on the \impusers list.

\section config_files 2. Config files

If you are likely to be building \imp repeatedly, it can be useful to
put the arguments to \c scons into a config file. This is a file called \c config.py
located in the top-level \imp directory (the one containing the \c SConstruct file).
For %example one of ours looks like
\include "example_config.py"

For simple setups (such as a linux build with no dependencies installed in odd places) the following would suffice.
\include "example_simple_cofig.py"
When building a module or biological system externally to the main \imp directory (but still using an svn copy of IMP, something like the following will do:
\include "example_external_config.py"

Finally, when building in a complicated environment, such as with the google native client, a config file might look like
\include "example_nacl_config.py"

\section devbuild 3. Building and installing for developers

To get the latest development version of \imp, it is necessary to check it out
from our \impsvn using an \svn client:
   \command{svn co http://svn.salilab.org/imp/trunk imp}
This will create a directory called \c imp containing all the source at the SVN
trunk. We recommend you use use this. Since this is the place that people
commit changes to, one should consult the nightly build logs before updating
to make sure things are working. In addition, consult the \c ChangeLog file
to see what has changed since your last update.
   
When developing code for \imp, it is useful to be able to run it without installing
everything. To aid this, we provide a script located at \c tools/imppy.sh which
runs a command after setting up the environment so that dynamically linked libraries
and python modules can be found. For %example, to run Python such that it can use \imp do
\command{./tools/imppy.sh python}

In addition, we recommend doing out of source builds (building \imp in a directory
other than the one containing the source files). Doing this allows several different
versions of \imp to be built using the same source files. For example, an optimized
one (using \c build='fast') and a debug one (\c build='debug').

You can update your copy of \imp, by typing
\command{svn update}

We recommend that you use something like the following directory structure when working
on a module or biological system:
\dotgraph{\dot
    digraph example {
    node [shape=record\, fontname= Helvetica\, fontsize=10]
      a [label="imp_root"];
      config [label="shared_config.py"];
      imp [label="imp"];
      imp_svn [label="svn"];
      imp_debug [label="release"];
      imp_fast [label="fast"];
      mine [label="my source"];
      my_svn [label="svn"];
      my_module [label="my module"];
      my_app [label="my system"];
      my_debug [label="debug"];
      my_fast [label="fast"];
      a -> imp [arrowhead="open"];
      a -> mine [arrowhead="open"];
      a -> config [arrowhead="open"];
      imp -> imp_svn [arrowhead="open"];
      imp -> imp_fast [arrowhead="open"];
      imp -> imp_debug [arrowhead="open"];
      mine -> my_svn [arrowhead="open"];
      my_svn -> my_module [arrowhead="open"];
      my_svn -> my_app [arrowhead="open"];
      mine -> my_debug [arrowhead="open"];
      mine -> my_fast [arrowhead="open"];
    }
    \enddot
    }
While it takes a bit of work to set up, being able to switch back and forth between fast and
non-fast builds and to build your module without dealing with the \imp setup each time is
worthwhile. To set this up do
\verbatim
mkdir imp
touch shared_config.py
cat "execfile('../../shared_config.py')" > /tmp/use_shared
cd imp
svn co http://svn.salilab.org/imp/trunk/svn
mkdir release
cd release
cat ../svn/doc/example_simple_config.py /tmp/used_shared > config.py
ln -s ../svn/SConstruct
ln -s ../svn/scons_tools
cd ..
mkdir fast
cat ../svn/doc/example_simple_config.py /tmp/used_shared | sed "s#debug#fast#g" > config.py
ln -s ../svn/SConstruct
ln -s ../svn/scons_tools
cd ../..
mkdir mine
svn co http://path.to.my/svn
mkdir debug
cd debug
cat ../../imp/svn/doc/example_external_config.py  /tmp/used_shared | sed "s#path_to_imp_build#$CWD../../svn/debug/build#" > config.py
ln -s ../../imp/svn/SConstruct
ln -s ../../imp/svn/scons_tools
cd ..
mkdir fast
cd fast
cat ../../imp/svn/doc/example_external_config.py  /tmp/used_shared | sed "s#path_to_imp_build#$CWD../../svn/debug/build#" "s#debug#fast#"> config.py
ln -s ../../imp/svn/SConstruct
ln -s ../../imp/svn/scons_tools
\endverbatim
You can can add extra entries to all of the config.pys using the shared_config.py i the root directory.
If you frequently run \imp in the debugger, you should use \c debug instead of \c release.


\note When you upgrade your system (eg get a new version of boost, or install
a prerequisite), scons may not detect the package automatically. To force it
to recheck, add the \c --config=force option when you run scons. In certain
rare cases, scons may get really confused, and you may need
to manually clear out the scons state. To do this, in the source directory do
\command{rm -rf .scon*}


\section prereq 4. Prerequisites
In order to obtain and compile \imp, you will need:

 - scons (0.98 or later)
 - Boost (1.33 or later)
 - Developers will also need a Subversion (svn) client to access the repository

If you wish to build the Python interfaces, you will also need:

 - Python (2.3 or later)
 - SWIG (1.3.40 or later)

If you install headers, libraries or tools anywhere other than the
standard locations (i.e. \c /usr/lib and friends) then you need to
tell \c SCons where to find them. This is done using the
`includepath`, `libpath`, and `path` options (paths are
colon-separated). These can either be passed to scons as command
line arguments or put in the \c config.py file. For example
\command{scons includepath=/usr/local/include:/opt/local/include libpath=/usr/local/lib path=/usr/local/bin}
Tells \imp to search to headers and libraries in the provided locations
in addition to the standard ones.

Notes on how to work around various platform issues can be found at
\wiki{build, the Build Notes page in the wiki}.

\subsection mac Getting prerequisites on a Mac

Mac users must first install the
\external{developer.apple.com/technologies/xcode.html,Apple Developer tools}.
Unfortunately this requires getting a (free) Apple Developer login.

Then mac users should use one of the available collections of Unix tools,
either \external{www.macports.org/, MacPorts} (recommended) or
\external{www.finkproject.org/, Fink}. If you use MacPorts, you must
add \c /opt/local/bin to your path (either by modifying your shell's
config file or by making an \c environment.plist file-see the
\salilab{imp/wiki/FAQ, FAQ}) and then do
\command{sudo port install boost scons swig-python}
to install the needed libraries and tools. Alternatively, you can build the
packages yourself from source code.

\note Mac OS X 10.5 and 10.6 include a 'swig' binary, but it is too old to use
with IMP. If you install SWIG with MacPorts above, you will need to make sure
SCons picks up your SWIG rather than Apple's by setting the `path` option when
running `scons`.

\note Do not install any C++ headers in `/usr/include` on your Mac as
the compiler assumes any such headers are C headers.

\subsection windows Getting prerequisites on Windows

The SCons build system should work on Windows with the command line
Microsoft Visual Studio compiler (`cl`) but it has not yet been
tested; some of the subsidiary scripts may assume a Unix
environment. (In the Sali lab, you can build a Windows version on
`synth` by running `scons` in the usual way, giving the `wine=true`
command line option.)

\subsection linux Getting prerequisites on Linux
All of the prerequisites should be available as pre-built packages for
your Linux distribution of choice.

\subsection optional Optional dependencies

\imp can make use of a variety of external tools to provide more or
better functionality.

\subsubsection doxygen Doxygen and Dot
\anchor doxygen
Building the documentation requires \external{www.doxygen.org/,Doxygen}.
In addition the documentation will look prettier if you have
\external{www.graphviz.org/,graphviz} installed. It is available as
part of most unix tool sets (MacPorts, all linux distributions etc.).

\subsubsection modeller MODELLER
\anchor modeller
If you want to use \imp with MODELLER, you should use version 9v7 or
later and use the following argument to scons
\command{scons modeller=path/to/modeller}
(The Linux Modeller RPM installs in /usr/, while the Mac
installer installs in /Library/modeller9v7/.)

\subsubsection NetCDF NetCDF
\anchor NetCDF
Binary IO (IMP::write_binary_model(), IMP::read_binary_model()) and
related functionality requires \external{www.unidata.ucar.edu/software/netcdf/,NetCDF}.
It is available as a prebuilt package on all supported platforms.

\subsubsection CGAL CGAL
\anchor CGAL
A wide variety geometric computations will be faster, better or more reliable
if \ref cgal "CGAL" is installed. CGAL is available as part of most
linux distributions and can be built from source on Mac OS or Linux. It
is free for academic use, but commercial use requires a license.

\subsubsection ANN ANN
\anchor ANN
\external{www.cs.umd.edu/~mount/ANN, ANN} is a library implementing fast
nearest neighbor searches. Certain data structures will be faster if
it is installed. While compilation of the library from source is quite
straight forward, it is not avaible as a package for common platforms.
In addition, ANN must be built as a shared library rather than a static
library. See the \salilab{imp/wiki/FAQ, FAQ}.

\subsubsection GSL GSL
\anchor GSL
The IMP.gsl module requires \external{www.gnu.org/software/gsl/,GSL}. It
is available as a prebuilt package on all supported platforms. Note that
GSL is distributed under the GPL and so cannot be used in C++ applications
with certain other dependencies such as CGAL.






\section next 5. Where to go next

You are now ready to use \imp within Python and C++.

Everyone should read the \ref introduction "Introduction" and developers should
then move on to the \ref devguide "Developer guide".

*/

Index: kernel/include/PairContainer.h
===================================================================
--- kernel/include/PairContainer.h	(revision 0)
+++ kernel/include/PairContainer.h	(revision 0)
@@ -0,0 +1,101 @@
+/**
+ *  \file PairContainer.h    \brief A container for particle_pairs.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ */
+
+#ifndef IMPCORE_PAIR_CONTAINER_H
+#define IMPCORE_PAIR_CONTAINER_H
+
+#include "config.h"
+#include "internal/IndexingIterator.h"
+#include "internal/container_helpers.h"
+#include "Particle.h"
+#include "base_types.h"
+#include "Pointer.h"
+
+IMP_BEGIN_NAMESPACE
+
+//! A shared container for particle_pairs
+/** Stores a searchable shared collection of particle_pairs.
+    \ingroup restraints
+ */
+class IMPEXPORT PairContainer : public RefCountedObject
+{
+  struct Accessor {
+    typedef Accessor This;
+    typedef ParticlePair result_type;
+    typedef unsigned int argument_type;
+    result_type operator()(argument_type i) const {
+      return o_->get_particle_pair(i);
+    }
+    Accessor(PairContainer *pc): o_(pc){}
+    Accessor(){}
+    IMP_COMPARISONS_1(o_);
+  private:
+    bool is_default() const { return false;}
+    // This should be ref counted, but swig memory management is broken
+    PairContainer* o_;
+  };
+
+public:
+  PairContainer();
+
+  //!
+  /** \note This function may be linear. Be aware of the complexity
+      bounds of your particular container.
+   */
+  virtual bool get_contains_particle_pair(ParticlePair p) const =0;
+  //! return the number of particle_pairs in the container
+  /** \note this isn't always constant time
+   */
+  virtual unsigned int get_number_of_particle_pairs() const =0;
+
+  //! get one particle_pair
+  virtual ParticlePair get_particle_pair(unsigned int i) const=0;
+
+  //! print information about the container
+  virtual void show(std::ostream &out = std::cout) const;
+
+  //! provide information about who implemeneted the container
+  virtual VersionInfo get_version_info() const=0;
+
+  //! An iterator through the contents of the container
+  typedef internal::IndexingIterator<Accessor> ParticlePairIterator;
+  //! begin iterating through the particle_pairs
+  ParticlePairIterator particle_pairs_begin() const {
+    // Since I can't make the count mutable in Object
+    return
+      ParticlePairIterator(Accessor(const_cast<PairContainer*>(this)),
+                        0);
+  }
+  //! iterate through the particle_pairs
+  ParticlePairIterator particle_pairs_end() const {
+    return
+      ParticlePairIterator(Accessor(const_cast<PairContainer*>(this)),
+                        get_number_of_particle_pairs());
+    }
+
+  IMP_REF_COUNTED_DESTRUCTOR(PairContainer)
+};
+
+IMP_OUTPUT_OPERATOR(PairContainer);
+
+//! A collection of containers
+typedef std::vector<PairContainer*> PairContainers;
+//! The index to use when this container is store in another object
+typedef Index<PairContainer> PairContainerIndex;
+
+IMP_END_NAMESPACE
+
+#define IMP_PAIR_CONTAINER(version_info)                      \
+  bool get_contains_particle_pair(ParticlePair p) const;                      \
+  unsigned int get_number_of_particle_pairs() const;                   \
+  ParticlePair get_particle_pair(unsigned int i) const;                       \
+  void show(std::ostream &out= std::cout) const;                   \
+  IMP::VersionInfo get_version_info() const { return version_info; }
+
+#endif  /* IMPCORE_PAIR_CONTAINER_H */
Index: kernel/include/internal/IndexingIterator.h
===================================================================
--- kernel/include/internal/IndexingIterator.h	(revision 1087)
+++ kernel/include/internal/IndexingIterator.h	(working copy)
@@ -5,8 +5,8 @@
  *
  */
 
-#ifndef IMPCORE_INDEXING_ITERATOR_H
-#define IMPCORE_INDEXING_ITERATOR_H
+#ifndef IMP_INDEXING_ITERATOR_H
+#define IMP_INDEXING_ITERATOR_H
 
 #include "../macros.h"
 
@@ -15,7 +15,7 @@
 #include <iterator>
 #include <limits>
 
-IMPCORE_BEGIN_INTERNAL_NAMESPACE
+IMP_BEGIN_INTERNAL_NAMESPACE
 
 template <class Accessor>
 class IndexingIterator {
@@ -118,6 +118,6 @@
 };
 
 
-IMPCORE_END_INTERNAL_NAMESPACE
+IMP_END_INTERNAL_NAMESPACE
 
-#endif  /* IMPCORE_INDEXING_ITERATOR_H */
+#endif  /* IMP_INDEXING_ITERATOR_H */

Property changes on: kernel/include/internal/IndexingIterator.h
___________________________________________________________________
Added: svn:mergeinfo

Index: kernel/include/internal/SConscript
===================================================================
--- kernel/include/internal/SConscript	(revision 1097)
+++ kernel/include/internal/SConscript	(working copy)
@@ -1,7 +1,8 @@
 files = ['AttributeTable.h', 'Vector.h',
          'ref_counting.h', 'ObjectContainer.h',
          'kernel_version_info.h', 'constants.h', 'units.h',
-         'utility.h', 'Unit.h', 'ExponentialNumber.h', 'key_helpers.h']
+         'utility.h', 'Unit.h', 'ExponentialNumber.h', 'key_helpers.h',
+         'IndexingIterator.h', 'container_helpers.h']
 
 files = [File(f) for f in files]
 Return('files')
Index: kernel/include/internal/container_helpers.h
===================================================================
--- kernel/include/internal/container_helpers.h	(revision 1087)
+++ kernel/include/internal/container_helpers.h	(working copy)
@@ -6,17 +6,17 @@
  *
  */
 
-#ifndef IMPCORE_INTERNAL_CONTAINER_HELPERS_H
-#define IMPCORE_INTERNAL_CONTAINER_HELPERS_H
+#ifndef IMP_INTERNAL_CONTAINER_HELPERS_H
+#define IMP_INTERNAL_CONTAINER_HELPERS_H
 
-#include "../macros.h"
-#include <IMP/Particle.h>
-#include <IMP/SingletonScore.h>
-#include <IMP/PairScore.h>
+#include "../base_types.h"
+#include "../Particle.h"
+#include "../SingletonScore.h"
+#include "../PairScore.h"
 
 #include <boost/tuple/tuple.hpp>
 
-IMPCORE_BEGIN_INTERNAL_NAMESPACE
+IMP_BEGIN_INTERNAL_NAMESPACE
 
 template <class P>
 struct ContainerTraits {
@@ -83,6 +83,6 @@
 };*/
 
 
-IMPCORE_END_INTERNAL_NAMESPACE
+IMP_END_INTERNAL_NAMESPACE
 
-#endif /* IMPCORE_INTERNAL_CONTAINER_HELPERS_H */
+#endif /* IMP_INTERNAL_CONTAINER_HELPERS_H */

Property changes on: kernel/include/internal/container_helpers.h
___________________________________________________________________
Added: svn:mergeinfo

Index: kernel/include/SConscript
===================================================================
--- kernel/include/SConscript	(revision 1097)
+++ kernel/include/SConscript	(working copy)
@@ -8,7 +8,8 @@
          'UnaryFunction.h', 'PairScore.h', 'SingletonScore.h', 'macros.h',
          'TripletScore.h', 'exception.h', 'VersionInfo.h',
          'Object.h', 'Pointer.h', 'RefCountedObject.h', 'ParticleRefiner.h',
-         'container_macros.h']
+         'container_macros.h', 'SingletonModifier.h', 'PairModifier.h',
+         'SingletonContainer.h', 'PairContainer.h']
 
 # Subdirectories
 files = [File(f) for f in files] \
Index: kernel/include/SingletonContainer.h
===================================================================
--- kernel/include/SingletonContainer.h	(revision 0)
+++ kernel/include/SingletonContainer.h	(revision 0)
@@ -0,0 +1,101 @@
+/**
+ *  \file SingletonContainer.h    \brief A container for particles.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ */
+
+#ifndef IMPCORE_SINGLETON_CONTAINER_H
+#define IMPCORE_SINGLETON_CONTAINER_H
+
+#include "config.h"
+#include "internal/IndexingIterator.h"
+#include "internal/container_helpers.h"
+#include "Particle.h"
+#include "base_types.h"
+#include "Pointer.h"
+
+IMP_BEGIN_NAMESPACE
+
+//! A shared container for particles
+/** Stores a searchable shared collection of particles.
+    \ingroup restraints
+ */
+class IMPEXPORT SingletonContainer : public RefCountedObject
+{
+  struct Accessor {
+    typedef Accessor This;
+    typedef Particle* result_type;
+    typedef unsigned int argument_type;
+    result_type operator()(argument_type i) const {
+      return o_->get_particle(i);
+    }
+    Accessor(SingletonContainer *pc): o_(pc){}
+    Accessor(){}
+    IMP_COMPARISONS_1(o_);
+  private:
+    bool is_default() const { return false;}
+    // This should be ref counted, but swig memory management is broken
+    SingletonContainer* o_;
+  };
+
+public:
+  SingletonContainer();
+
+  //!
+  /** \note This function may be linear. Be aware of the complexity
+      bounds of your particular container.
+   */
+  virtual bool get_contains_particle(Particle* p) const =0;
+  //! return the number of particles in the container
+  /** \note this isn't always constant time
+   */
+  virtual unsigned int get_number_of_particles() const =0;
+
+  //! get one particle
+  virtual Particle* get_particle(unsigned int i) const=0;
+
+  //! print information about the container
+  virtual void show(std::ostream &out = std::cout) const;
+
+  //! provide information about who implemeneted the container
+  virtual VersionInfo get_version_info() const=0;
+
+  //! An iterator through the contents of the container
+  typedef internal::IndexingIterator<Accessor> ParticleIterator;
+  //! begin iterating through the particles
+  ParticleIterator particles_begin() const {
+    // Since I can't make the count mutable in Object
+    return
+      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
+                        0);
+  }
+  //! iterate through the particles
+  ParticleIterator particles_end() const {
+    return
+      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
+                        get_number_of_particles());
+    }
+
+  IMP_REF_COUNTED_DESTRUCTOR(SingletonContainer)
+};
+
+IMP_OUTPUT_OPERATOR(SingletonContainer);
+
+//! A collection of containers
+typedef std::vector<SingletonContainer*> SingletonContainers;
+//! The index to use when this container is store in another object
+typedef Index<SingletonContainer> SingletonContainerIndex;
+
+IMP_END_NAMESPACE
+
+#define IMP_SINGLETON_CONTAINER(version_info)                      \
+  bool get_contains_particle(Particle* p) const;                      \
+  unsigned int get_number_of_particles() const;                   \
+  Particle* get_particle(unsigned int i) const;                       \
+  void show(std::ostream &out= std::cout) const;                   \
+  IMP::VersionInfo get_version_info() const { return version_info; }
+
+#endif  /* IMPCORE_SINGLETON_CONTAINER_H */
Index: kernel/include/PairModifier.h
===================================================================
--- kernel/include/PairModifier.h	(revision 0)
+++ kernel/include/PairModifier.h	(revision 0)
@@ -0,0 +1,76 @@
+/**
+ *  \file PairModifier.h    \brief A Modifier on ParticlePairs
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ */
+
+#ifndef IMP_PAIR_MODIFIER_H
+#define IMP_PAIR_MODIFIER_H
+
+#include "config.h"
+#include "internal/kernel_version_info.h"
+#include "internal/container_helpers.h"
+#include "PairContainer.h"
+
+#include "base_types.h"
+
+IMP_BEGIN_NAMESPACE
+// to keep swig happy
+class Particle;
+
+//! A base class for modifiers of ParticlePairs
+/** The primary function of such a class is to change
+    the passed particles.
+ */
+class IMPEXPORT PairModifier : public RefCountedObject
+{
+public:
+  PairModifier();
+
+  virtual ~PairModifier();
+
+  /** Apply the function to a single value*/
+  virtual void apply(Particle *a, Particle *b)=0;
+
+  /** Print out information about the function, ending in a newline.*/
+  virtual void show(std::ostream &out = std::cout) const=0;
+
+  /** return information about the authors */
+  virtual VersionInfo get_version_info() const = 0;
+};
+
+IMP_OUTPUT_OPERATOR(PairModifier)
+
+//! Apply the PairModifier to each element of the sequence
+template <class It>
+void apply(PairModifier* f, It b, It e) {
+  for (It c=b; c != e; ++c) {
+    internal::ContainerTraits<ParticlePair>::apply(f, *c);
+  }
+}
+
+//! Apply a PairModifier to each in the ParticlePairs
+IMPEXPORT inline void apply(PairModifier* f,
+                               ParticlePairs &ps) {
+  apply(f, ps.begin(), ps.end());
+}
+
+//! Apply a PairModifier to each in the ParticlePairs
+IMPEXPORT inline void apply(PairModifier* f,
+                                PairContainer *ps) {
+  apply(f, ps->particle_pairs_begin(), ps->particle_pairs_end());
+}
+
+
+IMP_END_NAMESPACE
+
+//! Define the functions needed for a PairModifier
+#define IMP_PAIR_MODIFIER(version) \
+VersionInfo get_version_info() const {return version;}\
+void show(std::ostream &out= std::cout) const;\
+void apply(Particle *a, Particle *b);
+
+#endif  /* IMP_PAIR_MODIFIER_H */
Index: kernel/include/SingletonModifier.h
===================================================================
--- kernel/include/SingletonModifier.h	(revision 0)
+++ kernel/include/SingletonModifier.h	(revision 0)
@@ -0,0 +1,76 @@
+/**
+ *  \file SingletonModifier.h    \brief A Modifier on Particles
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ */
+
+#ifndef IMP_SINGLETON_MODIFIER_H
+#define IMP_SINGLETON_MODIFIER_H
+
+#include "config.h"
+#include "internal/kernel_version_info.h"
+#include "internal/container_helpers.h"
+#include "SingletonContainer.h"
+
+#include "base_types.h"
+
+IMP_BEGIN_NAMESPACE
+// to keep swig happy
+class Particle;
+
+//! A base class for modifiers of Particles
+/** The primary function of such a class is to change
+    the passed particles.
+ */
+class IMPEXPORT SingletonModifier : public RefCountedObject
+{
+public:
+  SingletonModifier();
+
+  virtual ~SingletonModifier();
+
+  /** Apply the function to a single value*/
+  virtual void apply(Particle *a)=0;
+
+  /** Print out information about the function, ending in a newline.*/
+  virtual void show(std::ostream &out = std::cout) const=0;
+
+  /** return information about the authors */
+  virtual VersionInfo get_version_info() const = 0;
+};
+
+IMP_OUTPUT_OPERATOR(SingletonModifier)
+
+//! Apply the SingletonModifier to each element of the sequence
+template <class It>
+void apply(SingletonModifier* f, It b, It e) {
+  for (It c=b; c != e; ++c) {
+    internal::ContainerTraits<Particle>::apply(f, *c);
+  }
+}
+
+//! Apply a SingletonModifier to each in the Particles
+IMPEXPORT inline void apply(SingletonModifier* f,
+                               Particles &ps) {
+  apply(f, ps.begin(), ps.end());
+}
+
+//! Apply a SingletonModifier to each in the Particles
+IMPEXPORT inline void apply(SingletonModifier* f,
+                                SingletonContainer *ps) {
+  apply(f, ps->particles_begin(), ps->particles_end());
+}
+
+
+IMP_END_NAMESPACE
+
+//! Define the functions needed for a SingletonModifier
+#define IMP_SINGLETON_MODIFIER(version) \
+VersionInfo get_version_info() const {return version;}\
+void show(std::ostream &out= std::cout) const;\
+void apply(Particle *a);
+
+#endif  /* IMP_SINGLETON_MODIFIER_H */
Index: kernel/src/PairContainer.cpp
===================================================================
--- kernel/src/PairContainer.cpp	(revision 0)
+++ kernel/src/PairContainer.cpp	(revision 0)
@@ -0,0 +1,25 @@
+/**
+ *  \file PairContainer.cpp   \brief Container for particle_pair.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include "IMP/PairContainer.h"
+
+
+IMP_BEGIN_NAMESPACE
+
+PairContainer::PairContainer(){}
+
+PairContainer::~PairContainer(){}
+
+void PairContainer::show(std::ostream &out) const {
+  out << "PairContainer" << std::endl;
+}
+
+
+IMP_END_NAMESPACE
Index: kernel/src/SingletonContainer.cpp
===================================================================
--- kernel/src/SingletonContainer.cpp	(revision 0)
+++ kernel/src/SingletonContainer.cpp	(revision 0)
@@ -0,0 +1,25 @@
+/**
+ *  \file SingletonContainer.cpp   \brief Container for particle.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include "IMP/SingletonContainer.h"
+
+
+IMP_BEGIN_NAMESPACE
+
+SingletonContainer::SingletonContainer(){}
+
+SingletonContainer::~SingletonContainer(){}
+
+void SingletonContainer::show(std::ostream &out) const {
+  out << "SingletonContainer" << std::endl;
+}
+
+
+IMP_END_NAMESPACE
Index: kernel/src/SConscript
===================================================================
--- kernel/src/SConscript	(revision 1097)
+++ kernel/src/SConscript	(working copy)
@@ -13,7 +13,9 @@
          'OptimizerState.cpp', 'Log.cpp', 'Restraint.cpp', 'Optimizer.cpp',
          'random.cpp', 'Key.cpp', 'exception.cpp', 'ParticleRefiner.cpp',
          'UnaryFunction.cpp', 'PairScore.cpp',
-         'SingletonScore.cpp', 'TripletScore.cpp'
+         'SingletonScore.cpp', 'TripletScore.cpp',
+         'SingletonModifier.cpp', 'PairModifier.cpp',
+         'SingletonContainer.cpp', 'PairContainer.cpp'
         ] + internal_files
 
 # Build the shared library:
Index: kernel/src/PairModifier.cpp
===================================================================
--- kernel/src/PairModifier.cpp	(revision 0)
+++ kernel/src/PairModifier.cpp	(revision 0)
@@ -0,0 +1,20 @@
+/**
+ *  \file PairModifier.cpp   \brief A function on Particles.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include "IMP/PairModifier.h"
+
+IMP_BEGIN_NAMESPACE
+
+PairModifier::PairModifier(){
+}
+
+PairModifier::~PairModifier(){}
+
+IMP_END_NAMESPACE
Index: kernel/src/SingletonModifier.cpp
===================================================================
--- kernel/src/SingletonModifier.cpp	(revision 0)
+++ kernel/src/SingletonModifier.cpp	(revision 0)
@@ -0,0 +1,20 @@
+/**
+ *  \file SingletonModifier.cpp   \brief A function on Particles.
+ *
+ *  This file is generated by a script (core/tools/make-container).
+ *  Do not edit directly.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include "IMP/SingletonModifier.h"
+
+IMP_BEGIN_NAMESPACE
+
+SingletonModifier::SingletonModifier(){
+}
+
+SingletonModifier::~SingletonModifier(){}
+
+IMP_END_NAMESPACE
Index: kernel/pyext/IMP.i
===================================================================
--- kernel/pyext/IMP.i	(revision 1097)
+++ kernel/pyext/IMP.i	(working copy)
@@ -119,6 +119,11 @@
 %feature("director") IMP::TripletScore;
 %feature("director") IMP::Optimizer;
 %feature("director") IMP::ParticleRefiner;
+%feature("director") IMP::SingletonContainer;
+%feature("director") IMP::PairContainer;
+%feature("director") IMP::SingletonModifier;
+%feature("director") IMP::PairModifier;
+    
 
 %include "IMP/base_types.h"
 %include "Vector3D.i"
@@ -140,6 +145,11 @@
 %include "Particle.i"
 %include "IMP/DecoratorBase.h"
 %include "IMP/Optimizer.h"
+%include "IMP/SingletonContainer.h"
+%include "IMP/PairContainer.h"
+%include "IMP/SingletonModifier.h"
+%include "IMP/PairModifier.h"
+    
 
 namespace IMP {
   %template(ParticleIndex) Index<ParticleTag>;
@@ -161,6 +171,10 @@
   %template(Floats) ::std::vector<Float>;
   %template(Strings) ::std::vector<String>;
   %template(Ints) ::std::vector<Int>;
+  %template(SingletonContainers) ::std::vector<SingletonContainer*>;
+  %template(PairContainers) ::std::vector<PairContainer*>;
+  %template(SingletonContainerIndex) ::IMP::Index<SingletonContainer>;
+  %template(PairContainerIndex) ::IMP::Index<PairContainer>;
   /*%template(Vector3D) VectorD<3>;
   %template(random_vector_on_sphere) random_vector_on_sphere<3>;
   %template(random_vector_in_sphere) random_vector_in_sphere<3>;
Index: modules/core/test/containers/test_ParticlePair_state.py
===================================================================
--- modules/core/test/containers/test_ParticlePair_state.py	(revision 1097)
+++ modules/core/test/containers/test_ParticlePair_state.py	(working copy)
@@ -21,9 +21,9 @@
                     [b[1].get_index().get_index(), b[2].get_index().get_index()])
 
 
-class SingletonTestModifier(IMP.core.SingletonModifier):
+class SingletonTestModifier(IMP.SingletonModifier):
     def __init__(self, k):
-        IMP.core.SingletonModifier.__init__(self)
+        IMP.SingletonModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
@@ -32,9 +32,9 @@
         def get_version_info(self):
             return IMP.core.core_version_info
 
-class PairTestModifier(IMP.core.PairModifier):
+class PairTestModifier(IMP.PairModifier):
     def __init__(self, k):
-        IMP.core.PairModifier.__init__(self)
+        IMP.PairModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
Index: modules/core/test/containers/test_Particle_state.py
===================================================================
--- modules/core/test/containers/test_Particle_state.py	(revision 1097)
+++ modules/core/test/containers/test_Particle_state.py	(working copy)
@@ -21,9 +21,9 @@
                     [b[1].get_index().get_index(), b[2].get_index().get_index()])
 
 
-class SingletonTestModifier(IMP.core.SingletonModifier):
+class SingletonTestModifier(IMP.SingletonModifier):
     def __init__(self, k):
-        IMP.core.SingletonModifier.__init__(self)
+        IMP.SingletonModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
@@ -32,9 +32,9 @@
         def get_version_info(self):
             return IMP.core.core_version_info
 
-class PairTestModifier(IMP.core.PairModifier):
+class PairTestModifier(IMP.PairModifier):
     def __init__(self, k):
-        IMP.core.PairModifier.__init__(self)
+        IMP.PairModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
Index: modules/core/tools/container_templates/test_state.py
===================================================================
--- modules/core/tools/container_templates/test_state.py	(revision 1097)
+++ modules/core/tools/container_templates/test_state.py	(working copy)
@@ -21,9 +21,9 @@
                     [b[1].get_index().get_index(), b[2].get_index().get_index()])
 
 
-class SingletonTestModifier(IMP.core.SingletonModifier):
+class SingletonTestModifier(IMP.SingletonModifier):
     def __init__(self, k):
-        IMP.core.SingletonModifier.__init__(self)
+        IMP.SingletonModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
@@ -32,9 +32,9 @@
         def get_version_info(self):
             return IMP.core.core_version_info
 
-class PairTestModifier(IMP.core.PairModifier):
+class PairTestModifier(IMP.PairModifier):
     def __init__(self, k):
-        IMP.core.PairModifier.__init__(self)
+        IMP.PairModifier.__init__(self)
         self.k=k
     def show(self, j):
         print "Test Particle"
Index: modules/core/include/ListPairContainer.h
===================================================================
--- modules/core/include/ListPairContainer.h	(revision 1097)
+++ modules/core/include/ListPairContainer.h	(working copy)
@@ -12,7 +12,7 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include <IMP/core/PairContainer.h>
+#include <IMP/PairContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/CentroidOfRefinedSingletonModifier.h
===================================================================
--- modules/core/include/CentroidOfRefinedSingletonModifier.h	(revision 1097)
+++ modules/core/include/CentroidOfRefinedSingletonModifier.h	(working copy)
@@ -15,7 +15,7 @@
 #include "XYZDecorator.h"
 #include <IMP/ParticleRefiner.h>
 #include <IMP/Pointer.h>
-#include <IMP/core/SingletonModifier.h>
+#include <IMP/SingletonModifier.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
Index: modules/core/include/ClosePairsFinder.h
===================================================================
--- modules/core/include/ClosePairsFinder.h	(revision 1097)
+++ modules/core/include/ClosePairsFinder.h	(working copy)
@@ -13,13 +13,12 @@
 #include "FilteredListPairContainer.h"
 
 #include <IMP/RefCountedObject.h>
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
 // to make SWIG happy
 class FilteredListPairContainer;
-class SingletonContainer;
 
 //! A base class for algorithms to find spatial proximities
 /** In general, the algorithm should make sure it returns all
Index: modules/core/include/DerivativesFromRefinedSingletonModifier.h
===================================================================
--- modules/core/include/DerivativesFromRefinedSingletonModifier.h	(revision 1097)
+++ modules/core/include/DerivativesFromRefinedSingletonModifier.h	(working copy)
@@ -14,7 +14,7 @@
 #include "XYZDecorator.h"
 #include <IMP/ParticleRefiner.h>
 #include <IMP/Pointer.h>
-#include <IMP/core/SingletonModifier.h>
+#include <IMP/SingletonModifier.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
Index: modules/core/include/PairsRestraint.h
===================================================================
--- modules/core/include/PairsRestraint.h	(revision 1097)
+++ modules/core/include/PairsRestraint.h	(working copy)
@@ -14,11 +14,11 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "PairContainer.h"
 
 #include <IMP/Restraint.h>
 #include <IMP/Pointer.h>
 #include <IMP/PairScore.h>
+#include <IMP/PairContainer.h>
 
 #include <iostream>
 
Index: modules/core/include/MinimumPairScoreRestraint.h
===================================================================
--- modules/core/include/MinimumPairScoreRestraint.h	(revision 1097)
+++ modules/core/include/MinimumPairScoreRestraint.h	(working copy)
@@ -13,9 +13,9 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "PairContainer.h"
 #include <IMP/Restraint.h>
 #include <IMP/PairScore.h>
+#include <IMP/PairContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/FilteredListSingletonContainer.h
===================================================================
--- modules/core/include/FilteredListSingletonContainer.h	(revision 1097)
+++ modules/core/include/FilteredListSingletonContainer.h	(working copy)
@@ -13,7 +13,7 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/MaximumPairScoreRestraint.h
===================================================================
--- modules/core/include/MaximumPairScoreRestraint.h	(revision 1097)
+++ modules/core/include/MaximumPairScoreRestraint.h	(working copy)
@@ -13,10 +13,11 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "PairContainer.h"
 #include <IMP/Restraint.h>
 #include <IMP/PairScore.h>
+#include <IMP/PairContainer.h>
 
+
 IMPCORE_BEGIN_NAMESPACE
 
 //! Score based on the maximum over a set of Pairs
Index: modules/core/include/internal/IndexingIterator.h
===================================================================
--- modules/core/include/internal/IndexingIterator.h	(revision 1097)
+++ modules/core/include/internal/IndexingIterator.h	(working copy)
@@ -1,123 +0,0 @@
-/**
- *  \file IndexingIterator.h   \brief A class to represent a voxel grid.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPCORE_INDEXING_ITERATOR_H
-#define IMPCORE_INDEXING_ITERATOR_H
-
-#include "../macros.h"
-
-#include <IMP/RefCountedObject.h>
-
-#include <iterator>
-#include <limits>
-
-IMPCORE_BEGIN_INTERNAL_NAMESPACE
-
-template <class Accessor>
-class IndexingIterator {
-  Accessor a_;
-  unsigned int i_;
-  typedef IndexingIterator<Accessor> This;
-  bool is_default() const {
-    return i_!= std::numeric_limits<unsigned int>::max();
-  }
-public:
-  typedef const typename Accessor::result_type  value_type;
-  typedef unsigned int difference_type;
-  typedef const typename Accessor::result_type reference;
-  typedef const typename Accessor::result_type* pointer;
-  typedef std::random_access_iterator_tag iterator_category;
-
-  IndexingIterator(): i_(std::numeric_limits<unsigned int>::max()){}
-  IndexingIterator(Accessor a): a_(a), i_(0){}
-  IndexingIterator(Accessor a,
-                   unsigned int i): a_(a), i_(i){}
-
-  // check which is which
-  const This& operator++() {
-    ++i_;
-    return *this;
-  }
-
-  // check which is which
-  This operator++(int) {
-    This o= *this;
-    ++i_;
-    return o;
-  }
-
-  This operator+(unsigned int i) const {
-    return This(a_, i_+i);
-  }
-
-  const This& operator+=(unsigned int i) {
-    i_+= i;
-    return *this;
-  }
-
-  unsigned int operator-(const This &o) const {
-    IMP_assert(a_== o.a_, "Don't subtract iterators from different containers");
-    return i_- o.i_;
-  }
-
-  bool operator==(const This &o) const {
-    IMP_assert(a_ == o.a_,
-               "Can only compare iterators from the same container");
-    return (i_== o.i_);
-  }
-
-  bool operator!=(const This &o) const {
-    return (i_!= o.i_);
-  }
-
-  bool operator<(const This &o) const {
-    IMP_assert(a_ == o.a_,
-               "Can only compare iterators from the same container");
-    IMP_assert(!is_default() && !o.is_default(),
-               "Ordering with uninitialized index is undefined");
-    return (i_< o.i_);
-  }
-
-  bool operator>(const This &o) const {
-    IMP_assert(a_ == o.a_,
-               "Can only compare iterators from the same container");
-    IMP_assert(!is_default() && !o.is_default(),
-               "Ordering with uninitialized index is undefined");
-    return (i_> o.i_);
-  }
-
-  bool operator>=(const This &o) const {
-    IMP_assert(a_ == o.a_,
-               "Can only compare iterators from the same container");
-    IMP_assert(!is_default() && !o.is_default(),
-               "Ordering with uninitialized index is undefined");
-    return (i_>= o.i_);
-  }
-
-  bool operator<=(const This &o) const {
-    IMP_assert(a_ == o.a_,
-               "Can only compare iterators from the same container");
-    IMP_assert(!is_default() && !o.is_default(),
-               "Ordering with uninitialized index is undefined");
-    return (i_<= o.i_);
-  }
-
-  reference operator*() const {
-    return a_(i_);
-  }
-
-  pointer operator->() const {
-    static value_type vt;
-    vt= a_(i_);
-    return &vt;
-  }
-};
-
-
-IMPCORE_END_INTERNAL_NAMESPACE
-
-#endif  /* IMPCORE_INDEXING_ITERATOR_H */
Index: modules/core/include/internal/SConscript
===================================================================
--- modules/core/include/internal/SConscript	(revision 1097)
+++ modules/core/include/internal/SConscript	(working copy)
@@ -1,12 +1,10 @@
 files = [
          'ArrayOnAttributesHelper.h',
          'Grid3D.h',
-         'IndexingIterator.h',
          'MinimalSet.h',
          'ParticleGrid.h',
          'bbox_nbl_helpers.h',
          'bond_helpers.h',
-         'container_helpers.h',
          'deprecation.h',
          'evaluate_distance_pair_score.h',
          'graph_base.h',
Index: modules/core/include/internal/container_helpers.h
===================================================================
--- modules/core/include/internal/container_helpers.h	(revision 1097)
+++ modules/core/include/internal/container_helpers.h	(working copy)
@@ -1,88 +0,0 @@
-/**
- *  \file container_helpers.h
- *  \brief Internal helpers for container classes.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPCORE_INTERNAL_CONTAINER_HELPERS_H
-#define IMPCORE_INTERNAL_CONTAINER_HELPERS_H
-
-#include "../macros.h"
-#include <IMP/Particle.h>
-#include <IMP/SingletonScore.h>
-#include <IMP/PairScore.h>
-
-#include <boost/tuple/tuple.hpp>
-
-IMPCORE_BEGIN_INTERNAL_NAMESPACE
-
-template <class P>
-struct ContainerTraits {
-  static const bool is_singleton=false;
-};
-
-template <>
-struct ContainerTraits<Particle> {
-  static const bool is_singleton=true;
-  static Particles create_set(Particle*p) {return Particles();}
-  static Float evaluate(SingletonScore *ss,
-                        Particle *p,
-                        DerivativeAccumulator *ac) {
-    return ss->evaluate(p, ac);
-  }
-  template <class SM>
-  static void apply(SM *ss,
-                    Particle *p) {
-    ss->apply(p);
-  }
-};
-
-template <>
-struct ContainerTraits<ParticlePair> {
-  static const bool is_singleton=false;
-  static Particles create_set(ParticlePair p) {
-    Particles ret;
-    ret.push_back(p.first);
-    ret.push_back(p.second);
-    return ret;
-  }
-  static Float evaluate(PairScore *ss,
-                        ParticlePair p,
-                        DerivativeAccumulator *ac) {
-    return ss->evaluate(p.first, p.second, ac);
-  }
-  template <class PM>
-  static void apply(PM *ss,
-                    const ParticlePair &p) {
-    ss->apply(p.first, p.second);
-  }
-};
-
-/*template <>
-struct ContainerTraits<ParticleTriplet> {
-  static const bool is_singleton=false;
-  static Particles create_set(ParticleTriplet p) {
-    Particles ret;
-    ret.push_back(p.first);
-    ret.push_back(p.second);
-    ret.push_back(p.third);
-    return ret;
-  }
-  static Float evaluate(TripletScore *ss,
-                        ParticleTriplet p,
-                        DerivativeAccumulator *ac) {
-    return ss->evaluate(p.first, p.second, p.third, ac);
-  }
-  static void apply(TripletModifier *ss,
-                     const ParticleTriplet &p) {
-    ss->apply(p.first, p.second, p.third);
-  }
-
-};*/
-
-
-IMPCORE_END_INTERNAL_NAMESPACE
-
-#endif /* IMPCORE_INTERNAL_CONTAINER_HELPERS_H */
Index: modules/core/include/AllPairsPairContainer.h
===================================================================
--- modules/core/include/AllPairsPairContainer.h	(revision 1097)
+++ modules/core/include/AllPairsPairContainer.h	(working copy)
@@ -14,8 +14,8 @@
 #include "config.h"
 
 #include "internal/core_version_info.h"
-#include <IMP/core/PairContainer.h>
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/PairContainer.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/MaximumSingletonScoreRestraint.h
===================================================================
--- modules/core/include/MaximumSingletonScoreRestraint.h	(revision 1097)
+++ modules/core/include/MaximumSingletonScoreRestraint.h	(working copy)
@@ -13,10 +13,11 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "SingletonContainer.h"
 #include <IMP/Restraint.h>
 #include <IMP/SingletonScore.h>
+#include <IMP/SingletonContainer.h>
 
+
 IMPCORE_BEGIN_NAMESPACE
 
 //! Score based on the maximum over a set of Singletons
Index: modules/core/include/ClosePairsScoreState.h
===================================================================
--- modules/core/include/ClosePairsScoreState.h	(revision 1097)
+++ modules/core/include/ClosePairsScoreState.h	(working copy)
@@ -13,7 +13,7 @@
 #include "FilteredListPairContainer.h"
 #include <IMP/ScoreState.h>
 
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/BondPairContainer.h
===================================================================
--- modules/core/include/BondPairContainer.h	(revision 1097)
+++ modules/core/include/BondPairContainer.h	(working copy)
@@ -12,7 +12,7 @@
 #include "bond_decorators.h"
 #include "internal/core_version_info.h"
 
-#include <IMP/core/PairContainer.h>
+#include <IMP/PairContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/SingletonContainer.h
===================================================================
--- modules/core/include/SingletonContainer.h	(revision 1097)
+++ modules/core/include/SingletonContainer.h	(working copy)
@@ -1,101 +0,0 @@
-/**
- *  \file SingletonContainer.h    \brief A container for particles.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_SINGLETON_CONTAINER_H
-#define IMPCORE_SINGLETON_CONTAINER_H
-
-#include "config.h"
-#include "internal/IndexingIterator.h"
-#include "internal/container_helpers.h"
-#include <IMP/Particle.h>
-#include <IMP/base_types.h>
-#include <IMP/Pointer.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! A shared container for particles
-/** Stores a searchable shared collection of particles.
-    \ingroup restraints
- */
-class IMPCOREEXPORT SingletonContainer : public RefCountedObject
-{
-  struct Accessor {
-    typedef Accessor This;
-    typedef Particle* result_type;
-    typedef unsigned int argument_type;
-    result_type operator()(argument_type i) const {
-      return o_->get_particle(i);
-    }
-    Accessor(SingletonContainer *pc): o_(pc){}
-    Accessor(){}
-    IMP_COMPARISONS_1(o_);
-  private:
-    bool is_default() const { return false;}
-    // This should be ref counted, but swig memory management is broken
-    SingletonContainer* o_;
-  };
-
-public:
-  SingletonContainer();
-
-  //!
-  /** \note This function may be linear. Be aware of the complexity
-      bounds of your particular container.
-   */
-  virtual bool get_contains_particle(Particle* p) const =0;
-  //! return the number of particles in the container
-  /** \note this isn't always constant time
-   */
-  virtual unsigned int get_number_of_particles() const =0;
-
-  //! get one particle
-  virtual Particle* get_particle(unsigned int i) const=0;
-
-  //! print information about the container
-  virtual void show(std::ostream &out = std::cout) const;
-
-  //! provide information about who implemeneted the container
-  virtual VersionInfo get_version_info() const=0;
-
-  //! An iterator through the contents of the container
-  typedef internal::IndexingIterator<Accessor> ParticleIterator;
-  //! begin iterating through the particles
-  ParticleIterator particles_begin() const {
-    // Since I can't make the count mutable in Object
-    return
-      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
-                        0);
-  }
-  //! iterate through the particles
-  ParticleIterator particles_end() const {
-    return
-      ParticleIterator(Accessor(const_cast<SingletonContainer*>(this)),
-                        get_number_of_particles());
-    }
-
-  IMP_REF_COUNTED_DESTRUCTOR(SingletonContainer)
-};
-
-IMP_OUTPUT_OPERATOR(SingletonContainer);
-
-//! A collection of containers
-typedef std::vector<SingletonContainer*> SingletonContainers;
-//! The index to use when this container is store in another object
-typedef Index<SingletonContainer> SingletonContainerIndex;
-
-IMPCORE_END_NAMESPACE
-
-#define IMP_SINGLETON_CONTAINER(version_info)                      \
-  bool get_contains_particle(Particle* p) const;                      \
-  unsigned int get_number_of_particles() const;                   \
-  Particle* get_particle(unsigned int i) const;                       \
-  void show(std::ostream &out= std::cout) const;                   \
-  IMP::VersionInfo get_version_info() const { return version_info; }
-
-#endif  /* IMPCORE_SINGLETON_CONTAINER_H */
Index: modules/core/include/CoverRefinedSingletonModifier.h
===================================================================
--- modules/core/include/CoverRefinedSingletonModifier.h	(revision 1097)
+++ modules/core/include/CoverRefinedSingletonModifier.h	(working copy)
@@ -14,8 +14,8 @@
 #include "XYZRDecorator.h"
 #include <IMP/ParticleRefiner.h>
 #include <IMP/Pointer.h>
-#include <IMP/core/SingletonModifier.h>
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonModifier.h>
+#include <IMP/SingletonContainer.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
Index: modules/core/include/PairContainer.h
===================================================================
--- modules/core/include/PairContainer.h	(revision 1097)
+++ modules/core/include/PairContainer.h	(working copy)
@@ -1,101 +0,0 @@
-/**
- *  \file PairContainer.h    \brief A container for particle_pairs.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_PAIR_CONTAINER_H
-#define IMPCORE_PAIR_CONTAINER_H
-
-#include "config.h"
-#include "internal/IndexingIterator.h"
-#include "internal/container_helpers.h"
-#include <IMP/Particle.h>
-#include <IMP/base_types.h>
-#include <IMP/Pointer.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! A shared container for particle_pairs
-/** Stores a searchable shared collection of particle_pairs.
-    \ingroup restraints
- */
-class IMPCOREEXPORT PairContainer : public RefCountedObject
-{
-  struct Accessor {
-    typedef Accessor This;
-    typedef ParticlePair result_type;
-    typedef unsigned int argument_type;
-    result_type operator()(argument_type i) const {
-      return o_->get_particle_pair(i);
-    }
-    Accessor(PairContainer *pc): o_(pc){}
-    Accessor(){}
-    IMP_COMPARISONS_1(o_);
-  private:
-    bool is_default() const { return false;}
-    // This should be ref counted, but swig memory management is broken
-    PairContainer* o_;
-  };
-
-public:
-  PairContainer();
-
-  //!
-  /** \note This function may be linear. Be aware of the complexity
-      bounds of your particular container.
-   */
-  virtual bool get_contains_particle_pair(ParticlePair p) const =0;
-  //! return the number of particle_pairs in the container
-  /** \note this isn't always constant time
-   */
-  virtual unsigned int get_number_of_particle_pairs() const =0;
-
-  //! get one particle_pair
-  virtual ParticlePair get_particle_pair(unsigned int i) const=0;
-
-  //! print information about the container
-  virtual void show(std::ostream &out = std::cout) const;
-
-  //! provide information about who implemeneted the container
-  virtual VersionInfo get_version_info() const=0;
-
-  //! An iterator through the contents of the container
-  typedef internal::IndexingIterator<Accessor> ParticlePairIterator;
-  //! begin iterating through the particle_pairs
-  ParticlePairIterator particle_pairs_begin() const {
-    // Since I can't make the count mutable in Object
-    return
-      ParticlePairIterator(Accessor(const_cast<PairContainer*>(this)),
-                        0);
-  }
-  //! iterate through the particle_pairs
-  ParticlePairIterator particle_pairs_end() const {
-    return
-      ParticlePairIterator(Accessor(const_cast<PairContainer*>(this)),
-                        get_number_of_particle_pairs());
-    }
-
-  IMP_REF_COUNTED_DESTRUCTOR(PairContainer)
-};
-
-IMP_OUTPUT_OPERATOR(PairContainer);
-
-//! A collection of containers
-typedef std::vector<PairContainer*> PairContainers;
-//! The index to use when this container is store in another object
-typedef Index<PairContainer> PairContainerIndex;
-
-IMPCORE_END_NAMESPACE
-
-#define IMP_PAIR_CONTAINER(version_info)                      \
-  bool get_contains_particle_pair(ParticlePair p) const;                      \
-  unsigned int get_number_of_particle_pairs() const;                   \
-  ParticlePair get_particle_pair(unsigned int i) const;                       \
-  void show(std::ostream &out= std::cout) const;                   \
-  IMP::VersionInfo get_version_info() const { return version_info; }
-
-#endif  /* IMPCORE_PAIR_CONTAINER_H */
Index: modules/core/include/CloseBipartitePairsScoreState.h
===================================================================
--- modules/core/include/CloseBipartitePairsScoreState.h	(revision 1097)
+++ modules/core/include/CloseBipartitePairsScoreState.h	(working copy)
@@ -13,7 +13,7 @@
 #include "ClosePairsFinder.h"
 #include "FilteredListPairContainer.h"
 #include <IMP/ScoreState.h>
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
Index: modules/core/include/FilteredListPairContainer.h
===================================================================
--- modules/core/include/FilteredListPairContainer.h	(revision 1097)
+++ modules/core/include/FilteredListPairContainer.h	(working copy)
@@ -13,7 +13,7 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include <IMP/core/PairContainer.h>
+#include <IMP/PairContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/PairsScoreState.h
===================================================================
--- modules/core/include/PairsScoreState.h	(revision 1097)
+++ modules/core/include/PairsScoreState.h	(working copy)
@@ -13,18 +13,18 @@
 #define IMPCORE_PAIRS_SCORE_STATE_H
 
 #include "config.h"
-#include "PairContainer.h"
-#include "PairModifier.h"
 #include "internal/core_version_info.h"
-
+#include <IMP/PairContainer.h>
+#include <IMP/PairModifier.h>
 #include <IMP/ScoreState.h>
 
-IMPCORE_BEGIN_NAMESPACE
-
+IMP_BEGIN_NAMESPACE
 // for swig
 class PairContainer;
 class PairModifier;
+IMP_END_NAMESPACE
 
+IMPCORE_BEGIN_NAMESPACE
 //! Apply a PairFunction to a PairContainer to maintain an invariant
 /** \ingroup restraint
     An example showing a how to use such a score state to maintain a cover
@@ -37,9 +37,11 @@
   Pointer<PairModifier> af_;
   Pointer<PairContainer> c_;
 public:
-  /** \param[in] f The PairModifier to apply to all elements
+  /** \param[in] c The Container to hold the elements to process
+      \param[in] before The PairModifier to apply to all elements
        before evaluate.
-      \param[in] c The Container to hold the elements to process
+      \param[in] after The PairModifier to apply to all elements
+       after evaluate.
    */
   PairsScoreState(PairContainer *c, PairModifier *before,
                        PairModifier *after);
Index: modules/core/include/MaximumChangeScoreState.h
===================================================================
--- modules/core/include/MaximumChangeScoreState.h	(revision 1097)
+++ modules/core/include/MaximumChangeScoreState.h	(working copy)
@@ -10,17 +10,17 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "SingletonContainer.h"
 
 #include <IMP/ScoreState.h>
 #include <IMP/Index.h>
 #include <IMP/Particle.h>
+#include <IMP/SingletonContainer.h>
 
 #include <vector>
 
 IMPCORE_BEGIN_NAMESPACE
 
-//! Keeps track of the Maximumimum change of a set of attributes.
+//! Keeps track of the maximum change of a set of attributes.
 /** The score state maintains a list of particle and a list of
     float attribute keys and keeps track of the Maximumimum amount
     any of these have changed since the last time reset was called.
@@ -54,11 +54,12 @@
   float get_maximum_change() const {
     return maximum_change_;
   }
-
+  //! Change the container to get the particles from
   void set_singleton_container(SingletonContainer *pc) {
     pc_=pc;
     reset();
   }
+  //! Return the container storing the particles
   SingletonContainer *get_singleton_container() const {
     return pc_;
   }
Index: modules/core/include/SingletonsRestraint.h
===================================================================
--- modules/core/include/SingletonsRestraint.h	(revision 1097)
+++ modules/core/include/SingletonsRestraint.h	(working copy)
@@ -14,11 +14,11 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "SingletonContainer.h"
 
 #include <IMP/Restraint.h>
 #include <IMP/Pointer.h>
 #include <IMP/SingletonScore.h>
+#include <IMP/SingletonContainer.h>
 
 #include <iostream>
 
Index: modules/core/include/MinimumSingletonScoreRestraint.h
===================================================================
--- modules/core/include/MinimumSingletonScoreRestraint.h	(revision 1097)
+++ modules/core/include/MinimumSingletonScoreRestraint.h	(working copy)
@@ -13,9 +13,9 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include "SingletonContainer.h"
 #include <IMP/Restraint.h>
 #include <IMP/SingletonScore.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/VRMLLogOptimizerState.h
===================================================================
--- modules/core/include/VRMLLogOptimizerState.h	(revision 1097)
+++ modules/core/include/VRMLLogOptimizerState.h	(working copy)
@@ -11,7 +11,7 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 #include <IMP/base_types.h>
 #include <IMP/OptimizerState.h>
Index: modules/core/include/DerivativesToRefinedSingletonModifier.h
===================================================================
--- modules/core/include/DerivativesToRefinedSingletonModifier.h	(revision 1097)
+++ modules/core/include/DerivativesToRefinedSingletonModifier.h	(working copy)
@@ -14,7 +14,7 @@
 #include "XYZDecorator.h"
 #include <IMP/ParticleRefiner.h>
 #include <IMP/Pointer.h>
-#include <IMP/core/SingletonModifier.h>
+#include <IMP/SingletonModifier.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/PairChainRestraint.h
===================================================================
--- modules/core/include/PairChainRestraint.h	(revision 1097)
+++ modules/core/include/PairChainRestraint.h	(working copy)
@@ -20,7 +20,7 @@
 
 IMPCORE_BEGIN_NAMESPACE
 
-//! Restrain each pair of consecutive particles in each chain.
+//! This class is depreceated, use a ParticlePairsRestraint instead.
 /** \deprecated Use a ParticlePairsRestraint instead.
  */
 class IMPCOREEXPORT PairChainRestraint : public Restraint
Index: modules/core/include/ListSingletonContainer.h
===================================================================
--- modules/core/include/ListSingletonContainer.h	(revision 1097)
+++ modules/core/include/ListSingletonContainer.h	(working copy)
@@ -12,7 +12,7 @@
 
 #include "config.h"
 #include "internal/core_version_info.h"
-#include <IMP/core/SingletonContainer.h>
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/SConscript
===================================================================
--- modules/core/include/SConscript	(revision 1097)
+++ modules/core/include/SConscript	(working copy)
@@ -64,10 +64,8 @@
          'NormalMover.h',
          'OpenCubicSpline.h',
          'PairChainRestraint.h',
-         'PairContainer.h',
          'PairContainerSet.h',
          'PairListRestraint.h',
-         'PairModifier.h',
          'PairsRestraint.h',
          'PairsScoreState.h',
          'ParticleFunction.h',
@@ -75,10 +73,8 @@
          'ResidueDecorator.h',
          'RestraintSet.h',
          'Rotation3D.h',
-         'SingletonContainer.h',
          'SingletonContainerSet.h',
          'SingletonListRestraint.h',
-         'SingletonModifier.h',
          'SingletonsRestraint.h',
          'SingletonsScoreState.h',
          'SphereDistancePairScore.h',
@@ -93,6 +89,7 @@
          'XYZDecorator.h',
          'XYZRDecorator.h',
          'bond_decorators.h',
+         'config.h',
          'deprecation.h',
          'macros.h',
          'model_io.h',
Index: modules/core/include/PairContainerSet.h
===================================================================
--- modules/core/include/PairContainerSet.h	(revision 1097)
+++ modules/core/include/PairContainerSet.h	(working copy)
@@ -12,8 +12,8 @@
 #define IMPCORE_PAIR_CONTAINER_SET_H
 
 #include "config.h"
-#include "PairContainer.h"
 #include "internal/core_version_info.h"
+#include <IMP/PairContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/PairModifier.h
===================================================================
--- modules/core/include/PairModifier.h	(revision 1097)
+++ modules/core/include/PairModifier.h	(working copy)
@@ -1,79 +0,0 @@
-/**
- *  \file PairModifier.h    \brief A Modifier on ParticlePairs
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_PAIR_MODIFIER_H
-#define IMPCORE_PAIR_MODIFIER_H
-
-#include "config.h"
-#include "internal/core_version_info.h"
-#include "internal/container_helpers.h"
-#include "PairContainer.h"
-
-#include <IMP/base_types.h>
-
-IMP_BEGIN_NAMESPACE
-// to keep swig happy
-class Particle;
-IMP_END_NAMESPACE
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! A base class for modifiers of ParticlePairs
-/** The primary function of such a class is to change
-    the passed particles.
- */
-class IMPCOREEXPORT PairModifier : public RefCountedObject
-{
-public:
-  PairModifier();
-
-  virtual ~PairModifier();
-
-  /** Apply the function to a single value*/
-  virtual void apply(Particle *a, Particle *b)=0;
-
-  /** Print out information about the function, ending in a newline.*/
-  virtual void show(std::ostream &out = std::cout) const=0;
-
-  /** return information about the authors */
-  virtual VersionInfo get_version_info() const = 0;
-};
-
-IMP_OUTPUT_OPERATOR(PairModifier)
-
-//! Apply the PairModifier to each element of the sequence
-template <class It>
-void apply(PairModifier* f, It b, It e) {
-  for (It c=b; c != e; ++c) {
-    internal::ContainerTraits<ParticlePair>::apply(f, *c);
-  }
-}
-
-//! Apply a PairModifier to each in the ParticlePairs
-IMPCOREEXPORT inline void apply(PairModifier* f,
-                               ParticlePairs &ps) {
-  apply(f, ps.begin(), ps.end());
-}
-
-//! Apply a PairModifier to each in the ParticlePairs
-IMPCOREEXPORT inline void apply(PairModifier* f,
-                                PairContainer *ps) {
-  apply(f, ps->particle_pairs_begin(), ps->particle_pairs_end());
-}
-
-
-IMPCORE_END_NAMESPACE
-
-//! Define the functions needed for a PairModifier
-#define IMP_PAIR_MODIFIER(version) \
-VersionInfo get_version_info() const {return version;}\
-void show(std::ostream &out= std::cout) const;\
-void apply(Particle *a, Particle *b);
-
-#endif  /* IMPCORE_PAIR_MODIFIER_H */
Index: modules/core/include/SingletonContainerSet.h
===================================================================
--- modules/core/include/SingletonContainerSet.h	(revision 1097)
+++ modules/core/include/SingletonContainerSet.h	(working copy)
@@ -12,8 +12,8 @@
 #define IMPCORE_SINGLETON_CONTAINER_SET_H
 
 #include "config.h"
-#include "SingletonContainer.h"
 #include "internal/core_version_info.h"
+#include <IMP/SingletonContainer.h>
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/include/SingletonModifier.h
===================================================================
--- modules/core/include/SingletonModifier.h	(revision 1097)
+++ modules/core/include/SingletonModifier.h	(working copy)
@@ -1,79 +0,0 @@
-/**
- *  \file SingletonModifier.h    \brief A Modifier on Particles
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_SINGLETON_MODIFIER_H
-#define IMPCORE_SINGLETON_MODIFIER_H
-
-#include "config.h"
-#include "internal/core_version_info.h"
-#include "internal/container_helpers.h"
-#include "SingletonContainer.h"
-
-#include <IMP/base_types.h>
-
-IMP_BEGIN_NAMESPACE
-// to keep swig happy
-class Particle;
-IMP_END_NAMESPACE
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! A base class for modifiers of Particles
-/** The primary function of such a class is to change
-    the passed particles.
- */
-class IMPCOREEXPORT SingletonModifier : public RefCountedObject
-{
-public:
-  SingletonModifier();
-
-  virtual ~SingletonModifier();
-
-  /** Apply the function to a single value*/
-  virtual void apply(Particle *a)=0;
-
-  /** Print out information about the function, ending in a newline.*/
-  virtual void show(std::ostream &out = std::cout) const=0;
-
-  /** return information about the authors */
-  virtual VersionInfo get_version_info() const = 0;
-};
-
-IMP_OUTPUT_OPERATOR(SingletonModifier)
-
-//! Apply the SingletonModifier to each element of the sequence
-template <class It>
-void apply(SingletonModifier* f, It b, It e) {
-  for (It c=b; c != e; ++c) {
-    internal::ContainerTraits<Particle>::apply(f, *c);
-  }
-}
-
-//! Apply a SingletonModifier to each in the Particles
-IMPCOREEXPORT inline void apply(SingletonModifier* f,
-                               Particles &ps) {
-  apply(f, ps.begin(), ps.end());
-}
-
-//! Apply a SingletonModifier to each in the Particles
-IMPCOREEXPORT inline void apply(SingletonModifier* f,
-                                SingletonContainer *ps) {
-  apply(f, ps->particles_begin(), ps->particles_end());
-}
-
-
-IMPCORE_END_NAMESPACE
-
-//! Define the functions needed for a SingletonModifier
-#define IMP_SINGLETON_MODIFIER(version) \
-VersionInfo get_version_info() const {return version;}\
-void show(std::ostream &out= std::cout) const;\
-void apply(Particle *a);
-
-#endif  /* IMPCORE_SINGLETON_MODIFIER_H */
Index: modules/core/include/SingletonsScoreState.h
===================================================================
--- modules/core/include/SingletonsScoreState.h	(revision 1097)
+++ modules/core/include/SingletonsScoreState.h	(working copy)
@@ -13,18 +13,18 @@
 #define IMPCORE_SINGLETONS_SCORE_STATE_H
 
 #include "config.h"
-#include "SingletonContainer.h"
-#include "SingletonModifier.h"
 #include "internal/core_version_info.h"
-
+#include <IMP/SingletonContainer.h>
+#include <IMP/SingletonModifier.h>
 #include <IMP/ScoreState.h>
 
-IMPCORE_BEGIN_NAMESPACE
-
+IMP_BEGIN_NAMESPACE
 // for swig
 class SingletonContainer;
 class SingletonModifier;
+IMP_END_NAMESPACE
 
+IMPCORE_BEGIN_NAMESPACE
 //! Apply a SingletonFunction to a SingletonContainer to maintain an invariant
 /** \ingroup restraint
     An example showing a how to use such a score state to maintain a cover
@@ -37,9 +37,11 @@
   Pointer<SingletonModifier> af_;
   Pointer<SingletonContainer> c_;
 public:
-  /** \param[in] f The SingletonModifier to apply to all elements
+  /** \param[in] c The Container to hold the elements to process
+      \param[in] before The SingletonModifier to apply to all elements
        before evaluate.
-      \param[in] c The Container to hold the elements to process
+      \param[in] after The SingletonModifier to apply to all elements
+       after evaluate.
    */
   SingletonsScoreState(SingletonContainer *c, SingletonModifier *before,
                        SingletonModifier *after);
Index: modules/core/src/SingletonModifier.cpp
===================================================================
--- modules/core/src/SingletonModifier.cpp	(revision 1097)
+++ modules/core/src/SingletonModifier.cpp	(working copy)
@@ -1,20 +0,0 @@
-/**
- *  \file SingletonModifier.cpp   \brief A function on Particles.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include "IMP/core/SingletonModifier.h"
-
-IMPCORE_BEGIN_NAMESPACE
-
-SingletonModifier::SingletonModifier(){
-}
-
-SingletonModifier::~SingletonModifier(){}
-
-IMPCORE_END_NAMESPACE
Index: modules/core/src/PairContainer.cpp
===================================================================
--- modules/core/src/PairContainer.cpp	(revision 1097)
+++ modules/core/src/PairContainer.cpp	(working copy)
@@ -1,25 +0,0 @@
-/**
- *  \file PairContainer.cpp   \brief Container for particle_pair.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include "IMP/core/PairContainer.h"
-
-
-IMPCORE_BEGIN_NAMESPACE
-
-PairContainer::PairContainer(){}
-
-PairContainer::~PairContainer(){}
-
-void PairContainer::show(std::ostream &out) const {
-  out << "PairContainer" << std::endl;
-}
-
-
-IMPCORE_END_NAMESPACE
Index: modules/core/src/MinimumPairScoreRestraint.cpp
===================================================================
--- modules/core/src/MinimumPairScoreRestraint.cpp	(revision 1097)
+++ modules/core/src/MinimumPairScoreRestraint.cpp	(working copy)
@@ -11,7 +11,7 @@
 
 #include "IMP/core/MinimumPairScoreRestraint.h"
 #include "IMP/core/internal/MinimalSet.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
@@ -31,7 +31,7 @@
             << std::distance(b,e) << std::endl);
     MS bestn(n);
     for (It it= b; it != e; ++it) {
-      float score= internal::ContainerTraits<ParticlePair>
+      float score= IMP::internal::ContainerTraits<ParticlePair>
                            ::evaluate(f, *it, NULL);
 
       if (bestn.can_insert(score)) {
@@ -53,7 +53,7 @@
   float score=0;
   for (unsigned int i=0; i< bestn.size(); ++i) {
     if (da) {
-      internal::ContainerTraits<ParticlePair>::evaluate(f_.get(),
+      IMP::internal::ContainerTraits<ParticlePair>::evaluate(f_.get(),
                                                      *bestn[i].second, da);
     }
     score+= bestn[i].first;
@@ -77,7 +77,7 @@
                              c_->particle_pairs_end(), f_.get(), n_);
   ParticlesList ret;
   for (unsigned int i=0; i< bestn.size(); ++i) {
-    Particles c= internal::ContainerTraits<ParticlePair>
+    Particles c= IMP::internal::ContainerTraits<ParticlePair>
                  ::create_set(*bestn[i].second);
     ret.push_back(c);
   }
Index: modules/core/src/MaximumPairScoreRestraint.cpp
===================================================================
--- modules/core/src/MaximumPairScoreRestraint.cpp	(revision 1097)
+++ modules/core/src/MaximumPairScoreRestraint.cpp	(working copy)
@@ -11,7 +11,7 @@
 
 #include "IMP/core/MaximumPairScoreRestraint.h"
 #include "IMP/core/internal/MinimalSet.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
@@ -32,7 +32,7 @@
     MS bestn(n);
     for (It it= b; it != e; ++it) {
       float score
-         = internal::ContainerTraits<ParticlePair>::evaluate(f, *it, NULL);
+      = IMP::internal::ContainerTraits<ParticlePair>::evaluate(f, *it, NULL);
 
       if (bestn.can_insert(score)) {
         bestn.insert(score, it);
@@ -57,7 +57,7 @@
   float score=0;
   for (unsigned int i=0; i< bestn.size(); ++i) {
     if (da) {
-      internal::ContainerTraits<ParticlePair>::evaluate(f_.get(),
+      IMP::internal::ContainerTraits<ParticlePair>::evaluate(f_.get(),
                                                      *bestn[i].second, da);
     }
     score+= bestn[i].first;
@@ -81,7 +81,7 @@
                              c_->particle_pairs_end(), f_.get(), n_);
   ParticlesList ret;
   for (unsigned int i=0; i< bestn.size(); ++i) {
-    Particles c= internal::ContainerTraits<ParticlePair>
+    Particles c= IMP::internal::ContainerTraits<ParticlePair>
                          ::create_set(*bestn[i].second);
     ret.push_back(c);
   }
Index: modules/core/src/MinimumSingletonScoreRestraint.cpp
===================================================================
--- modules/core/src/MinimumSingletonScoreRestraint.cpp	(revision 1097)
+++ modules/core/src/MinimumSingletonScoreRestraint.cpp	(working copy)
@@ -11,7 +11,7 @@
 
 #include "IMP/core/MinimumSingletonScoreRestraint.h"
 #include "IMP/core/internal/MinimalSet.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
@@ -31,7 +31,7 @@
             << std::distance(b,e) << std::endl);
     MS bestn(n);
     for (It it= b; it != e; ++it) {
-      float score= internal::ContainerTraits<Particle>
+      float score= IMP::internal::ContainerTraits<Particle>
                            ::evaluate(f, *it, NULL);
 
       if (bestn.can_insert(score)) {
@@ -53,7 +53,7 @@
   float score=0;
   for (unsigned int i=0; i< bestn.size(); ++i) {
     if (da) {
-      internal::ContainerTraits<Particle>::evaluate(f_.get(),
+      IMP::internal::ContainerTraits<Particle>::evaluate(f_.get(),
                                                      *bestn[i].second, da);
     }
     score+= bestn[i].first;
@@ -77,7 +77,7 @@
                              c_->particles_end(), f_.get(), n_);
   ParticlesList ret;
   for (unsigned int i=0; i< bestn.size(); ++i) {
-    Particles c= internal::ContainerTraits<Particle>
+    Particles c= IMP::internal::ContainerTraits<Particle>
                  ::create_set(*bestn[i].second);
     ret.push_back(c);
   }
Index: modules/core/src/SingletonContainer.cpp
===================================================================
--- modules/core/src/SingletonContainer.cpp	(revision 1097)
+++ modules/core/src/SingletonContainer.cpp	(working copy)
@@ -1,25 +0,0 @@
-/**
- *  \file SingletonContainer.cpp   \brief Container for particle.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include "IMP/core/SingletonContainer.h"
-
-
-IMPCORE_BEGIN_NAMESPACE
-
-SingletonContainer::SingletonContainer(){}
-
-SingletonContainer::~SingletonContainer(){}
-
-void SingletonContainer::show(std::ostream &out) const {
-  out << "SingletonContainer" << std::endl;
-}
-
-
-IMPCORE_END_NAMESPACE
Index: modules/core/src/PairModifier.cpp
===================================================================
--- modules/core/src/PairModifier.cpp	(revision 1097)
+++ modules/core/src/PairModifier.cpp	(working copy)
@@ -1,20 +0,0 @@
-/**
- *  \file PairModifier.cpp   \brief A function on Particles.
- *
- *  This file is generated by a script (core/tools/make-container).
- *  Do not edit directly.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include "IMP/core/PairModifier.h"
-
-IMPCORE_BEGIN_NAMESPACE
-
-PairModifier::PairModifier(){
-}
-
-PairModifier::~PairModifier(){}
-
-IMPCORE_END_NAMESPACE
Index: modules/core/src/SingletonsScoreState.cpp
===================================================================
--- modules/core/src/SingletonsScoreState.cpp	(revision 1097)
+++ modules/core/src/SingletonsScoreState.cpp	(working copy)
@@ -11,7 +11,6 @@
  */
 
 #include "IMP/core/SingletonsScoreState.h"
-#include "IMP/core/internal/container_helpers.h"
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/src/SConscript
===================================================================
--- modules/core/src/SConscript	(revision 1097)
+++ modules/core/src/SConscript	(working copy)
@@ -59,20 +59,16 @@
          'NormalMover.cpp',
          'OpenCubicSpline.cpp',
          'PairChainRestraint.cpp',
-         'PairContainer.cpp',
          'PairContainerSet.cpp',
          'PairListRestraint.cpp',
-         'PairModifier.cpp',
          'PairsRestraint.cpp',
          'PairsScoreState.cpp',
          'QuadraticClosePairsFinder.cpp',
          'ResidueDecorator.cpp',
          'RestraintSet.cpp',
          'Rotation3D.cpp',
-         'SingletonContainer.cpp',
          'SingletonContainerSet.cpp',
          'SingletonListRestraint.cpp',
-         'SingletonModifier.cpp',
          'SingletonsRestraint.cpp',
          'SingletonsScoreState.cpp',
          'SphereDistancePairScore.cpp',
Index: modules/core/src/PairsRestraint.cpp
===================================================================
--- modules/core/src/PairsRestraint.cpp	(revision 1097)
+++ modules/core/src/PairsRestraint.cpp	(working copy)
@@ -10,7 +10,7 @@
  */
 
 #include "IMP/core/PairsRestraint.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 #include "IMP/core/ListPairContainer.h"
 
 #include <IMP/PairScore.h>
@@ -50,7 +50,7 @@
   for (PairContainer::ParticlePairIterator
          it= pc_->particle_pairs_begin();
        it != pc_->particle_pairs_end(); ++it) {
-    score += internal::ContainerTraits<ParticlePair>
+    score += IMP::internal::ContainerTraits<ParticlePair>
       ::evaluate(ss_, *it, accum);
   }
 
@@ -60,12 +60,13 @@
 
 ParticlesList PairsRestraint::get_interacting_particles() const
 {
-  if (!internal::ContainerTraits<ParticlePair>::is_singleton) {
+  if (!IMP::internal::ContainerTraits<ParticlePair>::is_singleton) {
     ParticlesList ret;
     for (PairContainer::ParticlePairIterator it
            = pc_->particle_pairs_begin();
          it != pc_->particle_pairs_end(); ++it) {
-      ret.push_back(internal::ContainerTraits<ParticlePair>::create_set(*it));
+      ret.push_back(IMP::internal
+                    ::ContainerTraits<ParticlePair>::create_set(*it));
     }
     return ret;
   } else {
Index: modules/core/src/PairsScoreState.cpp
===================================================================
--- modules/core/src/PairsScoreState.cpp	(revision 1097)
+++ modules/core/src/PairsScoreState.cpp	(working copy)
@@ -11,7 +11,6 @@
  */
 
 #include "IMP/core/PairsScoreState.h"
-#include "IMP/core/internal/container_helpers.h"
 
 IMPCORE_BEGIN_NAMESPACE
 
Index: modules/core/src/SingletonsRestraint.cpp
===================================================================
--- modules/core/src/SingletonsRestraint.cpp	(revision 1097)
+++ modules/core/src/SingletonsRestraint.cpp	(working copy)
@@ -10,7 +10,7 @@
  */
 
 #include "IMP/core/SingletonsRestraint.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 #include "IMP/core/ListSingletonContainer.h"
 
 #include <IMP/SingletonScore.h>
@@ -50,7 +50,7 @@
   for (SingletonContainer::ParticleIterator
          it= pc_->particles_begin();
        it != pc_->particles_end(); ++it) {
-    score += internal::ContainerTraits<Particle>
+    score += IMP::internal::ContainerTraits<Particle>
       ::evaluate(ss_, *it, accum);
   }
 
@@ -60,12 +60,13 @@
 
 ParticlesList SingletonsRestraint::get_interacting_particles() const
 {
-  if (!internal::ContainerTraits<Particle>::is_singleton) {
+  if (!IMP::internal::ContainerTraits<Particle>::is_singleton) {
     ParticlesList ret;
     for (SingletonContainer::ParticleIterator it
            = pc_->particles_begin();
          it != pc_->particles_end(); ++it) {
-      ret.push_back(internal::ContainerTraits<Particle>::create_set(*it));
+      ret.push_back(IMP::internal
+                    ::ContainerTraits<Particle>::create_set(*it));
     }
     return ret;
   } else {
Index: modules/core/src/MaximumSingletonScoreRestraint.cpp
===================================================================
--- modules/core/src/MaximumSingletonScoreRestraint.cpp	(revision 1097)
+++ modules/core/src/MaximumSingletonScoreRestraint.cpp	(working copy)
@@ -11,7 +11,7 @@
 
 #include "IMP/core/MaximumSingletonScoreRestraint.h"
 #include "IMP/core/internal/MinimalSet.h"
-#include "IMP/core/internal/container_helpers.h"
+#include <IMP/internal/container_helpers.h>
 
 
 IMPCORE_BEGIN_NAMESPACE
@@ -32,7 +32,7 @@
     MS bestn(n);
     for (It it= b; it != e; ++it) {
       float score
-         = internal::ContainerTraits<Particle>::evaluate(f, *it, NULL);
+      = IMP::internal::ContainerTraits<Particle>::evaluate(f, *it, NULL);
 
       if (bestn.can_insert(score)) {
         bestn.insert(score, it);
@@ -57,7 +57,7 @@
   float score=0;
   for (unsigned int i=0; i< bestn.size(); ++i) {
     if (da) {
-      internal::ContainerTraits<Particle>::evaluate(f_.get(),
+      IMP::internal::ContainerTraits<Particle>::evaluate(f_.get(),
                                                      *bestn[i].second, da);
     }
     score+= bestn[i].first;
@@ -81,7 +81,7 @@
                              c_->particles_end(), f_.get(), n_);
   ParticlesList ret;
   for (unsigned int i=0; i< bestn.size(); ++i) {
-    Particles c= internal::ContainerTraits<Particle>
+    Particles c= IMP::internal::ContainerTraits<Particle>
                          ::create_set(*bestn[i].second);
     ret.push_back(c);
   }
Index: modules/core/pyext/core.i
===================================================================
--- modules/core/pyext/core.i	(revision 1097)
+++ modules/core/pyext/core.i	(working copy)
@@ -97,14 +97,7 @@
 }
 
 
-%feature("director") IMP::core::SingletonContainer;
-%feature("director") IMP::core::PairContainer;
 
-// for kernel
-%feature("director") IMP::core::SingletonModifier;
-%feature("director") IMP::core::PairModifier;
-
-
 /* Don't wrap internal classes */
 %ignore IMP::core::internal::ChildArrayTraits;
 
@@ -112,11 +105,6 @@
 %include "IMP/core/ClosePairsFinder.h"
 %include "IMP/core/Mover.h"
 %include "IMP/core/MoverBase.h"
-// should go to kernel
-%include "IMP/core/SingletonContainer.h"
-%include "IMP/core/PairContainer.h"
-%include "IMP/core/SingletonModifier.h"
-%include "IMP/core/PairModifier.h"
 
 %include "IMP/core/XYZDecorator.h"
 %include "IMP/core/BondedListScoreState.h"
@@ -223,11 +211,7 @@
     %template(BondedListIndex) ::IMP::Index<BondedListScoreState>;
     %template(BondDecorators) ::std::vector<BondDecorator>;
     %template(Movers) ::std::vector<Mover*>;
-    %template(SingletonContainers) ::std::vector<SingletonContainer*>;
     %template(XYZDecorators) ::std::vector<XYZDecorator>;
     %template(XYZRDecorators) ::std::vector<XYZRDecorator>;
-    %template(PairContainers) ::std::vector<PairContainer*>;
-    %template(SingletonContainerIndex) ::IMP::Index<SingletonContainer>;
-    %template(PairContainerIndex) ::IMP::Index<PairContainer>;
   }
 }
Index: modules/core/pyext/pair_containers.i
===================================================================
--- modules/core/pyext/pair_containers.i	(revision 1097)
+++ modules/core/pyext/pair_containers.i	(working copy)
@@ -8,11 +8,11 @@
     IMP_OWN_FIRST_SECOND_THIRD_CONSTRUCTOR(PairsScoreState)
     IMP_OWN_FIRST_SECOND_CONSTRUCTOR(MinimumPairScoreRestraint)
     IMP_OWN_FIRST_SECOND_CONSTRUCTOR(MaximumPairScoreRestraint)
-    IMPCORE_CONTAINER_SWIG(FilteredListPairContainer, PairContainer, pair_container)
+    IMP_CONTAINER_SWIG(FilteredListPairContainer, PairContainer, pair_container)
     IMP_SET_OBJECT(PairsRestraint, set_pair_container)
     IMP_SET_OBJECT(PairsScoreState, set_before_evaluate_modifier)
     IMP_SET_OBJECT(PairsScoreState, set_after_evaluate_modifier)
-    IMPCORE_CONTAINER_SWIG(PairContainerSet, PairContainer, pair_container)
+    IMP_CONTAINER_SWIG(PairContainerSet, PairContainer, pair_container)
 
     }
 }
Index: modules/core/pyext/singleton_containers.i
===================================================================
--- modules/core/pyext/singleton_containers.i	(revision 1097)
+++ modules/core/pyext/singleton_containers.i	(working copy)
@@ -8,11 +8,11 @@
     IMP_OWN_FIRST_SECOND_THIRD_CONSTRUCTOR(SingletonsScoreState)
     IMP_OWN_FIRST_SECOND_CONSTRUCTOR(MinimumSingletonScoreRestraint)
     IMP_OWN_FIRST_SECOND_CONSTRUCTOR(MaximumSingletonScoreRestraint)
-    IMPCORE_CONTAINER_SWIG(FilteredListSingletonContainer, SingletonContainer, singleton_container)
+    IMP_CONTAINER_SWIG(FilteredListSingletonContainer, SingletonContainer, singleton_container)
     IMP_SET_OBJECT(SingletonsRestraint, set_singleton_container)
     IMP_SET_OBJECT(SingletonsScoreState, set_before_evaluate_modifier)
     IMP_SET_OBJECT(SingletonsScoreState, set_after_evaluate_modifier)
-    IMPCORE_CONTAINER_SWIG(SingletonContainerSet, SingletonContainer, singleton_container)
+    IMP_CONTAINER_SWIG(SingletonContainerSet, SingletonContainer, singleton_container)
 
     }
 }

Index: kernel/include/utility.h
===================================================================
--- kernel/include/utility.h	(revision 1106)
+++ kernel/include/utility.h	(working copy)
@@ -10,11 +10,16 @@
 
 #include "macros.h"
 
+#include <boost/version.hpp>
+
+#if BOOST_VERSION >= 103500
+#include <boost/math/special_functions/fpclassify.hpp>
+#else
 #ifdef __GNUC__
 #include <cmath>
-#endif
+#endif // __GNUC__
+#endif // BOOST_VERSION
 
-
 IMP_BEGIN_NAMESPACE
 
 //! Compute the square of a number
@@ -29,27 +34,20 @@
 /** With certain compiler settings the compiler can optimize
  out a!=a (and certain intel chips had issues with it too).
  */
-inline bool is_nan(const float& a) {
+template <class T>
+inline bool is_nan(const T& a) {
+#if BOOST_VERSION >= 103500
+  return (boost::math::isnan)(a);
+#else
   // Not all gcc versions include C99 math
 #if defined(_GLIBCXX_USE_C99_MATH) && defined(__GNUC__)
-  return std::isnan(a);
+  return (std::isnan)(a);
 #else
   return a != a;
-#endif
+#endif // C99
+#endif // BOOST_VERSION
 }
 
-//! Return true if a number is NaN
-/** With certain compiler settings the compiler can optimize
- out a!=a (and certain intel chips had issues with it too).
- */
-inline bool is_nan(const double& a) {
-#if defined(_GLIBCXX_USE_C99_MATH) && defined(__GNUC__)
-  return std::isnan(a);
-#else
-  return a != a;
-#endif
-}
-
 IMP_END_NAMESPACE
 
 #endif  /* IMP_UTILITY_H */

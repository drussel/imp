Index: modules/examples/test/run-all-tests.py
===================================================================
--- modules/examples/test/run-all-tests.py	(revision 0)
+++ modules/examples/test/run-all-tests.py	(revision 0)
@@ -0,0 +1,26 @@
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/examples/test/SConscript
===================================================================
--- modules/examples/test/SConscript	(revision 0)
+++ modules/examples/test/SConscript	(revision 0)
@@ -0,0 +1,3 @@
+Import('env')
+
+env.IMPModuleTest("test.passed", "run-all-tests.py")
Index: modules/examples/test/test_python.py
===================================================================
--- modules/examples/test/test_python.py	(revision 0)
+++ modules/examples/test/test_python.py	(revision 0)
@@ -0,0 +1,21 @@
+import unittest
+import IMP
+import IMP.test
+import IMP.examples
+import IMP.examples.randomize
+import IMP.core
+
+
+class GenericTest(IMP.test.TestCase):
+    """Test the python code"""
+
+    def test_python(self):
+        """Checking module python code"""
+        m = IMP.Model()
+        p= IMP.Particle(m)
+        d= IMP.core.XYZDecorator.create(p)
+        IMP.examples.randomize.randomize_particle(p)
+        self.assert_(IMP.examples.get_is_xyz_particle(p))
+
+if __name__ == '__main__':
+    unittest.main()
Index: modules/examples/test/test.passed
===================================================================
--- modules/examples/test/test.passed	(revision 0)
+++ modules/examples/test/test.passed	(revision 0)
@@ -0,0 +1 @@
+PASSED
Index: modules/examples/include/ExampleDecorator.h
===================================================================
--- modules/examples/include/ExampleDecorator.h	(revision 0)
+++ modules/examples/include/ExampleDecorator.h	(revision 0)
@@ -0,0 +1,67 @@
+/**
+ *  \file ExampleDecorator.h     \brief Add a name to a particle.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#ifndef IMPEXAMPLES_EXAMPLE_DECORATOR_H
+#define IMPEXAMPLES_EXAMPLE_DECORATOR_H
+
+#include "config.h"
+
+#include <IMP/Particle.h>
+#include <IMP/Model.h>
+#include <IMP/DecoratorBase.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! A simple decorator which adds a name to a particle.
+/** The source code is as follows:
+    \include Decorator.h
+    \include Decorator.cpp
+*/
+class IMPEXAMPLESEXPORT ExampleDecorator: public DecoratorBase
+{
+  static StringKey get_name_key();
+
+public:
+  //! Create a decorator from a named particle without error checking.
+  ExampleDecorator(Particle *p);
+  //! Create a decorator from a named particle
+  static ExampleDecorator cast(Particle *p) {
+    IMP_check( p->has_attribute(get_name_key()), "Particle " << p->get_index()
+               << " missing required attributes.",
+               InvalidStateException);
+    return ExampleDecorator(p);
+  }
+
+  //! Add a name to the particle
+  static ExampleDecorator create(Particle *p, std::string name) {
+    p->add_attribute(get_name_key(), name);
+    ExampleDecorator ret(p);
+    return ret;
+  }
+
+  //! Set the name of the particle
+  void set_name(std::string name) {
+    get_particle()->set_value(get_name_key(), name);
+  }
+
+  //! Get the name of the particle
+  std::string get_name() const {
+    return get_particle()->get_value(get_name_key());
+  }
+
+  // Print out information about the particle
+  void show(std::ostream &out) const {
+    out << "Particle named " << get_name() << std::endl;
+  }
+};
+
+// Make it so the C++ operator<< can be used.
+IMP_OUTPUT_OPERATOR(ExampleDecorator);
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_DECORATOR_H */
Index: modules/examples/include/ExampleUnaryFunction.h
===================================================================
--- modules/examples/include/ExampleUnaryFunction.h	(revision 0)
+++ modules/examples/include/ExampleUnaryFunction.h	(revision 0)
@@ -0,0 +1,53 @@
+/**
+ *  \file ExampleUnaryFunction.h
+ *  \brief A simple unary function.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+
+#ifndef IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
+#define IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
+
+#include "config.h"
+#include <IMP/UnaryFunction.h>
+#include <IMP/utility.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! A simple unary function
+/** This one happens to be a harmonic.
+    The source code is as follows:
+    \include UnaryFunction.h
+ */
+class ExampleUnaryFunction : public UnaryFunction
+{
+public:
+  /** Create with the given center and spring constant */
+  ExampleUnaryFunction(Float center, Float k) : center_(center), k_(k) {}
+
+  virtual ~ExampleUnaryFunction() {}
+
+  virtual Float evaluate(Float feature) const {
+    return .5*k_*square(feature-center_);
+  }
+
+  virtual FloatPair evaluate_with_derivative(Float feature) const {
+    Float e = (feature - center_);
+    Float deriv = k_ * e;
+    return FloatPair(evaluate(feature), deriv);
+  }
+
+  void show(std::ostream &out=std::cout) const {
+    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
+  }
+
+private:
+  Float center_;
+  Float k_;
+};
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H */
Index: modules/examples/include/SConscript
===================================================================
--- modules/examples/include/SConscript	(revision 0)
+++ modules/examples/include/SConscript	(revision 0)
@@ -0,0 +1,14 @@
+Import('env')
+
+files= []
+
+hs= Glob("*.h")
+shs= Glob("*/*.h")
+for h in hs+shs:
+    s= h.rstr()
+    if not s.startswith(".") and not s.endswith("config.h")\
+      and not s.endswith("examples.h") and not s.endswith("examples_version_info.h"):
+        files.append(s)
+
+# Install the include files:
+env.IMPHeaders(files)
Index: modules/examples/include/ExampleRestraint.h
===================================================================
--- modules/examples/include/ExampleRestraint.h	(revision 0)
+++ modules/examples/include/ExampleRestraint.h	(revision 0)
@@ -0,0 +1,46 @@
+/**
+ *  \file ExampleRestraint.h
+ *  \brief A restraint on a list of particle pairs.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#ifndef IMPEXAMPLES_EXAMPLE_RESTRAINT_H
+#define IMPEXAMPLES_EXAMPLE_RESTRAINT_H
+
+#include "config.h"
+#include "internal/examples_version_info.h"
+#include <IMP/SingletonScore.h>
+#include <IMP/Restraint.h>
+#include <IMP/core/PairContainer.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! Apply a PairScore to a list of particle pairs
+/** This restraint could be used, in conjunction with a
+    ClosePairsScoreState and a SphereDistancePairScore,
+    to prevent particles from interpenetrating.
+
+    The source code is as follows:
+    \include Restraint.h
+    \include Restraint.cpp
+ */
+class IMPEXAMPLESEXPORT ExampleRestraint : public Restraint
+{
+  Pointer<IMP::core::PairContainer> pc_;
+  Pointer<PairScore> f_;
+public:
+  //! Create the restraint.
+  ExampleRestraint(PairScore* score_func,
+                   IMP::core::PairContainer *pc);
+  virtual ~ExampleRestraint() {}
+
+  IMP_RESTRAINT(internal::examples_version_info)
+
+  ParticlesList get_interacting_particles() const;
+};
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_RESTRAINT_H */
Index: modules/examples/doc/examples.dox
===================================================================
--- modules/examples/doc/examples.dox	(revision 0)
+++ modules/examples/doc/examples.dox	(revision 0)
@@ -0,0 +1,11 @@
+/** \namespace IMP::examples
+\brief IMP.examples provides examples showing how to implement various types of objects and functionality. 
+
+<b>Overview:</b> IMP.examples provides examples showing how to implement things.
+
+<b>Authors:</b> Daniel Russel.
+
+<b>Publications:</b> IMP.examples is part of the main \imp distribution.
+
+<b>License:</b> IMP.examples is licensed under the BSD license.
+*/
\ No newline at end of file
Index: modules/examples/src/ExampleDecorator.cpp
===================================================================
--- modules/examples/src/ExampleDecorator.cpp	(revision 0)
+++ modules/examples/src/ExampleDecorator.cpp	(revision 0)
@@ -0,0 +1,22 @@
+/**
+ *  \file ExampleDecorator.cpp   \brief Add a name to a particle.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include <IMP/examples/ExampleDecorator.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+ExampleDecorator::ExampleDecorator(Particle *p): DecoratorBase(p) {
+}
+
+StringKey ExampleDecorator::get_name_key() {
+  /* the compiler will make sure this is initialized the first time the
+   method is called. */
+  static StringKey mykey("my name");
+  return mykey;
+}
+
+IMPEXAMPLES_END_NAMESPACE
Index: modules/examples/src/SConscript
===================================================================
--- modules/examples/src/SConscript	(revision 0)
+++ modules/examples/src/SConscript	(revision 0)
@@ -0,0 +1,12 @@
+Import('env')
+e = env.IMPSharedLibraryEnvironment()
+ns= Glob("*.cpp")+ Glob("*/*.cpp")
+
+files=[]
+for h in ns:
+    s= h.rstr()
+    if not s.startswith(".") and not s.endswith("examples_version_info.cpp"):
+        files.append(s)
+
+# Build and install the shared library:
+e.IMPSharedLibrary(files, install=True)
Index: modules/examples/src/ExampleRestraint.cpp
===================================================================
--- modules/examples/src/ExampleRestraint.cpp	(revision 0)
+++ modules/examples/src/ExampleRestraint.cpp	(revision 0)
@@ -0,0 +1,56 @@
+/**
+ *  \file ExampleRestraint.cpp \brief Restrain a list of particle pairs.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include <IMP/examples/ExampleRestraint.h>
+#include <IMP/log.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+ExampleRestraint::ExampleRestraint(PairScore* score_func,
+                                   IMP::core::PairContainer *pc) : pc_(pc),
+                                          f_(score_func) {}
+
+
+
+Float ExampleRestraint::evaluate(DerivativeAccumulator *accum)
+{
+  Float score=0;
+  for (IMP::core::PairContainer::ParticlePairIterator
+       it= pc_->particle_pairs_begin();
+       it != pc_->particle_pairs_end(); ++it) {
+    score += f_->evaluate(it->first, it->second, accum);
+  }
+
+  return score;
+}
+
+/* Return a list of interacting sets. In this case it is pairs
+   of particles so all the sets are of size 2. */
+ParticlesList ExampleRestraint::get_interacting_particles() const
+{
+  ParticlesList ret;
+  for (IMP::core::PairContainer::ParticlePairIterator it
+       = pc_->particle_pairs_begin();
+       it != pc_->particle_pairs_end(); ++it) {
+    Particles s;
+    s.push_back(it->first);
+    s.push_back(it->second);
+    ret.push_back(s);
+  }
+  return ret;
+}
+
+void ExampleRestraint::show(std::ostream& out) const
+{
+  out << "PairsRestraint with score function ";
+  f_->show(out);
+  out << " and container ";
+  pc_->show(out);
+  out << std::endl;
+}
+
+IMPEXAMPLES_END_NAMESPACE
Index: modules/examples/SConscript
===================================================================
--- modules/examples/SConscript	(revision 0)
+++ modules/examples/SConscript	(revision 0)
@@ -0,0 +1,12 @@
+Import('env')
+Export('env')
+
+env.Append(LIBS=['imp_core'])
+env.validate()
+
+# Subdirectories:
+SConscript('src/SConscript')
+SConscript('include/SConscript')
+SConscript('pyext/SConscript')
+SConscript('test/SConscript')
+SConscript('bin/SConscript')
Index: modules/examples/bin/test.cpp
===================================================================
--- modules/examples/bin/test.cpp	(revision 0)
+++ modules/examples/bin/test.cpp	(revision 0)
@@ -0,0 +1,22 @@
+#include <IMP.h>
+#include <IMP/core.h>
+#include <IMP/examples/MyRestraint.h>
+
+using namespace IMP;
+int main(){
+  set_log_level(VERBOSE);
+  Pointer<Model> m(new Model());
+  Particle* p0= new Particle(m);
+  core::XYZDecorator d0= core::XYZDecorator::create(p0);
+  Particle* p1= new Particle(m);
+  core::XYZDecorator d1= core::XYZDecorator::create(p1);
+  core::DistancePairScore *dps
+    = new core::DistancePairScore(new core::Linear(0,1));
+  examples::MyRestraint *r= new examples::MyRestraint(dps, p0, p1);
+  d0.set_coordinates(Vector3D(0,0,0));
+  d1.set_coordinates(Vector3D(0,0,1));
+ 	
+  m->add_restraint(r);
+  IMP_assert(std::abs(m->evaluate(false) -1) < .01, "Out of range");
+  return 0;
+}
Index: modules/examples/bin/SConscript
===================================================================
--- modules/examples/bin/SConscript	(revision 0)
+++ modules/examples/bin/SConscript	(revision 0)
@@ -0,0 +1,14 @@
+import os
+import os.path
+
+Import('env')
+penv = env.Clone()
+penv.Prepend(LIBS=["imp_examples"])
+
+fs = Glob("*.cpp")
+
+all=[]
+for f in fs:
+    all.append(penv.Program(f.rstr()))
+
+Return('all')
Index: modules/examples/pyext/examples.i
===================================================================
--- modules/examples/pyext/examples.i	(revision 0)
+++ modules/examples/pyext/examples.i	(revision 0)
@@ -0,0 +1,37 @@
+%module(directors="1") "IMP.examples"
+
+%{
+#include "IMP.h"
+#include "IMP/examples.h"
+%}
+
+
+%include "kernel/pyext/IMP_macros.i"
+%include "kernel/pyext/IMP_exceptions.i"
+
+%include "examples_config.i"
+
+%include "std_vector.i"
+%include "std_string.i"
+%include "std_except.i"
+
+%pythoncode %{
+import IMP.core
+def get_is_xyz_particle(p):
+    """Return True if the particle is an IMP.core.XYZDecorator particle"""
+    return IMP.core.XYZDecorator.is_instance_of(p)
+%}
+
+/* Get definitions of kernel base classes (but do not wrap) */
+%import "kernel/pyext/IMP.i"
+
+namespace IMP {
+namespace examples {
+IMP_OWN_FIRST_SECOND_CONSTRUCTOR(Restraint)
+}
+}
+
+/* Wrap our own classes */
+%include "IMP/examples/ExampleRestraint.h"
+%include "IMP/examples/ExampleDecorator.h"
+%include "IMP/examples/ExampleUnaryFunction.h"
Index: modules/examples/pyext/SConscript
===================================================================
--- modules/examples/pyext/SConscript	(revision 0)
+++ modules/examples/pyext/SConscript	(revision 0)
@@ -0,0 +1,10 @@
+Import('env')
+
+e = env.IMPPythonExtensionEnvironment()
+
+e.IMPPythonExtension('examples.i')
+
+files = (Glob('examples/*.py'))
+
+# Install the Python files:
+env.IMPPython(files)
Index: modules/examples/pyext/examples/randomize.py
===================================================================
--- modules/examples/pyext/examples/randomize.py	(revision 0)
+++ modules/examples/pyext/examples/randomize.py	(revision 0)
@@ -0,0 +1,5 @@
+import IMP.core
+
+def randomize_particle(p):
+    d= IMP.core.XYZDecorator.cast(p)
+    d.set_coordinates(IMP.random_vector_in_unit_box())
Index: modules/examples/README
===================================================================
--- modules/examples/README	(revision 0)
+++ modules/examples/README	(revision 0)
@@ -0,0 +1,5 @@
+This is a basic module. Put your header files in a subdirectory of "include"
+your shared implementation in a subdirectory of "src" and any python
+implementation files in "pyext/examples". Any ".cpp" file in "bin"
+will be built into an executable linked against the library created from
+"src".
\ No newline at end of file
Index: modules/SConscript
===================================================================
--- modules/SConscript	(revision 1186)
+++ modules/SConscript	(working copy)
@@ -20,3 +20,6 @@
 
 env.IMPModule('search', author='Daniel Russel', version='SVN',
               description='Build search structures over particles.')
+
+env.IMPModule('examples', author='somebody', version='SVN',
+              description='A private module.')
\ No newline at end of file
Index: examples/implementation/unary_function.readme
===================================================================
--- examples/implementation/unary_function.readme	(revision 1186)
+++ examples/implementation/unary_function.readme	(working copy)
@@ -1,2 +0,0 @@
-Implementing a UnaryFunction is simply the matter of writing code to compute
-the function and its derivative.
\ No newline at end of file
Index: examples/implementation/decorator.cpp
===================================================================
--- examples/implementation/decorator.cpp	(revision 1186)
+++ examples/implementation/decorator.cpp	(working copy)
@@ -1,88 +0,0 @@
-/**
- *  \file MyDecorator.h     \brief Add a name to a particle.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPMODULENAME_MY_DECORATOR_H
-#define IMPMODULENAME_MY_DECORATOR_H
-
-#include "config.h"
-
-#include <IMP/Particle.h>
-#include <IMP/Model.h>
-#include <IMP/DecoratorBase.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-//! A simple decorator which adds a name to a particle.
-/** */
-class IMPCOREEXPORT MyDecorator: public DecoratorBase
-{
-  static StringKey get_name_key();
-
-public:
-  //! Create a decorator from a named particle without error checking.
-  MyDecorator(Particle *p);
-  //! Create a decorator from a named particle
-  static MyDecorator cast(Particle *p) {
-    IMP_assert( p->has_attribute(get_name_key()), "Particle " << p->get_index()
-               << " missing required attributes.",
-               InvalidStateException);
-    return MyDecorator(p);
-  }
-
-  //! Add a name to the particle
-  static MyDecorator create(Particle *p, std::string name) {
-    p->add_attribute(get_name_key(), name);
-    MyDecorator ret(p);
-    return ret;
-  }
-
-  //! Set the name of the particle
-  void set_name(std::string name) {
-    get_particle()->set_attribute(get_name_key(), name);
-  }
-
-  //! Get the name of the particle
-  void get_name(std::string name) {
-    get_particle()->get_attribute(get_name_key());
-  }
-
-  // Print out information about the particle
-  void show(std::ostream &out) const {
-    out << "Particle named " << get_name() << std::endl;
-  }
-};
-
-// Make it so the C++ operator<< can be used.
-IMP_OUTPUT_OPERATOR(MyDecorator);
-
-IMPMODULENAME_END_NAMESPACE
-
-#endif  /* IMPMODULENAME_MY_DECORATOR_H */
-
-
-/**
- *  \file MyDecorator.cpp   \brief Add a name to a particle.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include <IMP/modulename/MyDecorator.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-MyDecorator::MyDecorator(Particle *p): DecoratorBase(p) {
-}
-
-StringKey MyDecorator::get_name_key() {
-  /* the compiler will make sure this is initialized the first time the
-   method is called. */
-  static StringKey mykey("my name");
-  return mykey;
-}
-
-IMPCORE_END_NAMESPACE
Index: examples/implementation/unary_function.cpp
===================================================================
--- examples/implementation/unary_function.cpp	(revision 1186)
+++ examples/implementation/unary_function.cpp	(working copy)
@@ -1,46 +0,0 @@
-/**
- *  \file Harmonic.h    \brief Harmonic function.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_HARMONIC_H
-#define IMPCORE_HARMONIC_H
-
-#include "config.h"
-#include <IMP/UnaryFunction.h>
-#include <IMP/utility.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! Harmonic function (symmetric about the mean)
-class Harmonic : public UnaryFunction
-{
-public:
-  /** Create with the given center and spring constant */
-  Harmonic(Float center, Float k) : center_(center), k_(k) {}
-
-  virtual ~Harmonic() {}
-
-  virtual Float evaluate(Float feature) const {
-    return .5*k*square(feature-center_);
-  }
-
-  virtual FloatPair evaluate_with_derivative(Float feature) const {
-    Float e = (feature - center_);
-    Float deriv = k_ * e;
-    return FloatPair(evaluate(feature), deriv);
-  }
-
-  void show(std::ostream &out=std::cout) const {
-    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
-  }
-
-private:
-  Float center_;
-  Float k_;
-};
-
-IMPCORE_END_NAMESPACE
-
-#endif  /* IMPCORE_HARMONIC_H */
Index: examples/implementation/restraint.readme
===================================================================
--- examples/implementation/restraint.readme	(revision 1186)
+++ examples/implementation/restraint.readme	(working copy)
@@ -1 +0,0 @@
-Implement a simple restraint which applies a PairScore to each ParticlePair in a ParticleContainer.
\ No newline at end of file
Index: examples/implementation/restraint.cpp
===================================================================
--- examples/implementation/restraint.cpp	(revision 1186)
+++ examples/implementation/restraint.cpp	(working copy)
@@ -1,95 +0,0 @@
-/**
- *  \file MyRestraint.h   \brief A restraint on a list of particle pairs.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPMODULENAME_MY_RESTRAINT_H
-#define IMPMODULENAME_MY_RESTRAINT_H
-
-#include "config.h"
-#include "internal/modulename_version_info.h"
-#include <IMP/SingletonScore.h>
-#include <IMP/Restraint.h>
-#include <IMP/PairContainer.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-//! Apply a PairScore to a list of particle pairs
-/**
- */
-class IMPMODULENAMEEXPORT MyRestraint : public Restraint
-{
-  Pointer<PairContainer> pc_;
-  Pointer<PairScore> f_;
-public:
-  //! Create the restraint.
-  MyRestraint(PairScore* score_func,
-              PairContainer *pc);
-  virtual ~MyRestraint() {}
-
-  IMP_RESTRAINT(internal::modulename_version_info)
-
-  ParticlesList get_interacting_particles() const;
-};
-
-IMPMODULENAME_END_NAMESPACE
-
-#endif  /* IMPCORE_DISTANCE_RESTRAINT_H */
-
-/**
- *  \file MyRestraint.cpp \brief Restrain a list of particle pairs.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include <IMP/modulename/MyRestraint.h>
-#include <IMP/log.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-MyRestraint::MyRestraint(PairScore* score_func,
-                         PairContainer *pc) : pc_(pc),
-                                           f_(score_func) {}
-
-PairsRestraint::~PairsRestraint() {}
-
-Float PairsRestraint::evaluate(DerivativeAccumulator *accum)
-{
-  Float score=0;
-  for (PairContainer::ParticlePairIterator
-       it= pc_->particle_pairs_begin();
-       it != pc_->particle_pairs_end(); ++it) {
-    score += f_->evaluate(it->first, it->second, accum);
-  }
-
-  return score;
-}
-
-// the interacting sets are pairs
-ParticlesList PairsRestraint::get_interacting_particles() const
-{
-  ParticlesList ret;
-  for (PairContainer::ParticlePairIterator it
-       = pc_->particle_pairs_begin();
-       it != pc_->particle_pairs_end(); ++it) {
-    Particles s;
-    s.push_back(it->first);
-    s.push_back(it->second);
-    ret.push_back(s);
-  }
-  return ret;
-}
-
-void PairsRestraint::show(std::ostream& out) const
-{
-  out << "ContainerRestraint with score function ";
-  ss_->show(out);
-  out << " and container ";
-  pc_->show(out);
-  out << std::endl;
-}
-
-IMPMODULENAME_END_NAMESPACE
Index: examples/implementation/README
===================================================================
--- examples/implementation/README	(revision 1186)
+++ examples/implementation/README	(working copy)
@@ -1,2 +0,0 @@
-These C++ examples show how to implement instances of Restraints, ScoreStates, Decorators
-and other basic types that should not be implemented in python.
\ No newline at end of file
Index: examples/implementation/decorator.readme
===================================================================
--- examples/implementation/decorator.readme	(revision 1186)
+++ examples/implementation/decorator.readme	(working copy)
@@ -1 +0,0 @@
-This decorator allows you to add and control a name in a Particle.
\ No newline at end of file
Index: examples/SConscript
===================================================================
--- examples/SConscript	(revision 1186)
+++ examples/SConscript	(working copy)
@@ -7,24 +7,28 @@
 example_py = [x for x in Glob("*.py") + Glob("*/*.py") \
               if 'fragments' not in x.path]
 
+example_cpp = [x for x in Glob("*.cpp") + Glob("*/*.cpp") \
+              if 'fragments' not in x.path]
+
+
 e = env.Clone()
 
 # Custom builder to run unit tests:
 def builder_unit_test(target, source, env):
     bin = source[0].abspath
     for src in source[1:]:
-        (dir, script) = os.path.split(src.abspath)
-        app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
-        if env.Execute(app) != 0:
-            print "examples FAILED"
-            return 1
-    file(str(target[0]), 'w').write('PASSED\n')
+            (dir, script) = os.path.split(src.abspath)
+            app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
+            if env.Execute(app) != 0:
+                print "examples FAILED"
+                return 1
+            file(str(target[0]), 'w').write('PASSED\n')
 
 e.Append(BUILDERS = {'Test': Builder(action=builder_unit_test,
                                      source_scanner=pyscanner.PythonScanner)})
 
 # Test all scripts:
-test = e.Test("examples.passed", bin + example_py)
+test = e.Test("examples.passed", bin + example_py+example_cpp)
 e.Alias("test", test)
 e.AlwaysBuild("examples.passed")
 
Index: examples/README
===================================================================
--- examples/README	(revision 1186)
+++ examples/README	(working copy)
@@ -2,4 +2,4 @@
 - \ref simple_examples "Simple examples", which demonstrate a single class or decorator
 - \ref using_experimental_data "Experimental examples" which demonstrate a variety of classes working together to go from experimental data to a structure
 - \ref fragments "Fragments" which are little bits of code that illustrate using a particular piece of \imp but can't be run on their own.
-- \ref implementation "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp.
\ No newline at end of file
+- "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp. These can be found in the IMP::examples module.
\ No newline at end of file

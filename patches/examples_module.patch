Index: kernel/test/run-all-tests.py
===================================================================
--- kernel/test/run-all-tests.py	(revision 1186)
+++ kernel/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: kernel/include/UnaryFunction.h
===================================================================
--- kernel/include/UnaryFunction.h	(revision 1186)
+++ kernel/include/UnaryFunction.h	(working copy)
@@ -19,6 +19,9 @@
 //! Abstract single variable functor class for score functions.
 /** These functors take a single feature value, and return a corresponding
     score (and optionally also the first derivative).
+
+    See the IMP::examples::UnaryFunction example for how to implement a simple
+    unary function.
  */
 class IMPEXPORT UnaryFunction : public RefCountedObject
 {
Index: kernel/include/Restraint.h
===================================================================
--- kernel/include/Restraint.h	(revision 1186)
+++ kernel/include/Restraint.h	(working copy)
@@ -54,7 +54,8 @@
     to make. To disable this warning for a particular restraint, call
     set_was_owned(true).
 
-    See the \ref restraint example for how to implement a simple restraint.
+    See the IMP::examples::Restraint example for how to implement a simple
+    restraint.
  */
 class IMPEXPORT Restraint : public RefCountedObject
 {
Index: kernel/include/DecoratorBase.h
===================================================================
--- kernel/include/DecoratorBase.h	(revision 1186)
+++ kernel/include/DecoratorBase.h	(working copy)
@@ -29,6 +29,9 @@
 
     \note Remember that attribute keys should always be created lazily
     (at the time of the first use), and not be created as static variables.
+
+    See the IMP::examples::Decorator example for how to implement a simple
+    decorator.
 */
 class DecoratorBase
 {
Index: kernel/doc/api.dox
===================================================================
--- kernel/doc/api.dox	(revision 1186)
+++ kernel/doc/api.dox	(working copy)
@@ -12,7 +12,7 @@
     - \ref deprecation "Deprecated Functionality"
 
     Then look through the examples which can be found at:
-    - \ref Examples "Examples"
+    - \ref examples "Examples"
 
     There are a variety of useful base classes which are used to provide
     most functionality. They are:
Index: kernel/doc/decorators.dox
===================================================================
--- kernel/doc/decorators.dox	(revision 1186)
+++ kernel/doc/decorators.dox	(working copy)
@@ -41,7 +41,7 @@
 d.get_foo_key()
 \endverbatim
 
-See the \ref decorator example for how to implement a simple
+See the IMP::examples::Decorator example for how to implement a simple
 decorator.
  */
 
Index: tools/make-module
===================================================================
--- tools/make-module	(revision 0)
+++ tools/make-module	(revision 0)
@@ -0,0 +1,53 @@
+#!/usr/bin/python
+
+"""Add a new module to IMP.
+"""
+
+import os
+import sys
+import getopt
+import shutil
+import re
+
+
+def fix_string(input, modname):
+    return input.replace("modulename", modname)\
+        .replace("MODULENAME", modname.upper())\
+        .replace('.hpp', '.h')\
+        .replace('.cc', '.cpp')
+
+def copy_dir(source, dest, modname):
+    for x in os.listdir(source):
+        fx= fix_string(x, modname)
+        xspath= os.path.join(source, x)
+        xdpath= os.path.join(dest, fx)
+        print "handling "+ xspath +"->"+xdpath
+        if os.path.isdir(xspath):
+            os.mkdir(xdpath)
+            copy_dir(xspath, xdpath, modname)
+        else:
+            input= file(xspath, 'r').read()
+            output= fix_string(input, modname)
+            file(xdpath, 'w').write(output)
+def main():
+    if len(sys.argv) != 2:
+        print("Usage: ./kernel/doc/bin/make-module module_name")
+        return
+    modname= sys.argv[1]
+    modpath=os.path.join("modules", modname)
+    if os.path.isdir(modpath):
+        print "Module already exists"
+        return
+    print "Creating a new module " + modname
+    os.mkdir(modpath)
+    copy_dir("kernel/doc/module_template", modpath, modname)
+    os.symlink(os.path.join("..", "..", "..", "tools", "run_all_tests.py"),
+               os.path.join(modpath, "test", "run_all_tests.py"))
+    sc= file("modules/SConscript", "a")
+    sc.write(fix_string("""
+env.IMPModule('modulename', author='somebody', version='SVN',
+              description='A private module.')""", modname))
+
+
+if __name__ == '__main__':
+    main()

Property changes on: tools/make-module
___________________________________________________________________
Added: svn:executable
   + *

Index: tools/make_examples.py
===================================================================
--- tools/make_examples.py	(revision 1186)
+++ tools/make_examples.py	(working copy)
@@ -38,6 +38,7 @@
         else: wname=name
         outfile.write("\page "+wname+ " " + nice_name(wname) +"\n\n")
         outfile.write(descr+"\n\n")
+
         # find subpages
         for dp in tree:
             pth = dp[0].path
Index: imp.xcodeproj/project.pbxproj
===================================================================
--- imp.xcodeproj/project.pbxproj	(revision 1186)
+++ imp.xcodeproj/project.pbxproj	(working copy)
@@ -7,6 +7,56 @@
 	objects = {
 
 /* Begin PBXFileReference section */
+		93058A0F0F16B5D700ED1094 /* truncated_harmonic.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = truncated_harmonic.h; sourceTree = "<group>"; };
+		93058A120F16D25900ED1094 /* TruncatedHarmonic.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TruncatedHarmonic.h; sourceTree = "<group>"; };
+		93058A180F16D50F00ED1094 /* test_truncated_harmonic.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = test_truncated_harmonic.py; sourceTree = "<group>"; };
+		93058A1D0F16DE2500ED1094 /* navigating_a_protein.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = navigating_a_protein.py; sourceTree = "<group>"; };
+		93058A1E0F16DE2500ED1094 /* navigating_a_protein.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = navigating_a_protein.readme; sourceTree = "<group>"; };
+		931959990F0AE5910077D3C7 /* PairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PairContainer.h; sourceTree = "<group>"; };
+		9319599A0F0AE5910077D3C7 /* PairModifier.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PairModifier.h; sourceTree = "<group>"; };
+		9319599B0F0AE5910077D3C7 /* SingletonModifier.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SingletonModifier.h; sourceTree = "<group>"; };
+		9319599C0F0AE5B70077D3C7 /* PairContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PairContainer.cpp; sourceTree = "<group>"; };
+		9319599D0F0AE5B70077D3C7 /* PairModifier.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PairModifier.cpp; sourceTree = "<group>"; };
+		9319599E0F0AE5B70077D3C7 /* SingletonContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SingletonContainer.cpp; sourceTree = "<group>"; };
+		931FDDCE0F013D1C005F4E51 /* chain.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = chain.py; sourceTree = "<group>"; };
+		931FDDCF0F013D1C005F4E51 /* chain.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = chain.readme; sourceTree = "<group>"; };
+		931FDDD10F013D1C005F4E51 /* basic_optimization.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = basic_optimization.py; sourceTree = "<group>"; };
+		931FDDD20F013D1C005F4E51 /* basic_optimization.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = basic_optimization.readme; sourceTree = "<group>"; };
+		931FDDD30F013D1C005F4E51 /* excluded_volume.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = excluded_volume.py; sourceTree = "<group>"; };
+		931FDDD40F013D1C005F4E51 /* excluded_volume.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = excluded_volume.readme; sourceTree = "<group>"; };
+		931FDDD50F013D1C005F4E51 /* load_protein_restrain_bonds.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = load_protein_restrain_bonds.py; sourceTree = "<group>"; };
+		931FDDD60F013D1C005F4E51 /* load_protein_restrain_bonds.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = load_protein_restrain_bonds.readme; sourceTree = "<group>"; };
+		931FDDD70F013D1C005F4E51 /* pair_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = pair_restraint.py; sourceTree = "<group>"; };
+		931FDDD80F013D1C005F4E51 /* pair_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = pair_restraint.readme; sourceTree = "<group>"; };
+		931FDDD90F013D1C005F4E51 /* read_write.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = read_write.py; sourceTree = "<group>"; };
+		931FDDDA0F013D1C005F4E51 /* read_write.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = read_write.readme; sourceTree = "<group>"; };
+		931FDDDB0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		931FDDDC0F013D1C005F4E51 /* setup.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = setup.py; sourceTree = "<group>"; };
+		931FDDDD0F013D1C005F4E51 /* setup.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = setup.readme; sourceTree = "<group>"; };
+		931FDDDE0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		931FDDDF0F013D1C005F4E51 /* SConscript */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = SConscript; sourceTree = "<group>"; };
+		931FDDE10F013D1C005F4E51 /* bipartite_nonbonded_interactions.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = bipartite_nonbonded_interactions.py; sourceTree = "<group>"; };
+		931FDDE20F013D1C005F4E51 /* bipartite_nonbonded_interactions.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = bipartite_nonbonded_interactions.readme; sourceTree = "<group>"; };
+		931FDDE30F013D1C005F4E51 /* conditional_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = conditional_restraint.py; sourceTree = "<group>"; };
+		931FDDE40F013D1C005F4E51 /* conditional_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = conditional_restraint.readme; sourceTree = "<group>"; };
+		931FDDE50F013D1C005F4E51 /* connectivity_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = connectivity_restraint.py; sourceTree = "<group>"; };
+		931FDDE60F013D1C005F4E51 /* connectivity_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = connectivity_restraint.readme; sourceTree = "<group>"; };
+		931FDDE70F013D1C005F4E51 /* cover_particles.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = cover_particles.py; sourceTree = "<group>"; };
+		931FDDE80F013D1C005F4E51 /* cover_particles.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = cover_particles.readme; sourceTree = "<group>"; };
+		931FDDE90F013D1C005F4E51 /* molecular_hierarchy.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = molecular_hierarchy.py; sourceTree = "<group>"; };
+		931FDDEA0F013D1C005F4E51 /* molecular_hierarchy.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = molecular_hierarchy.readme; sourceTree = "<group>"; };
+		931FDDEB0F013D1C005F4E51 /* nonbonded_interactions.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = nonbonded_interactions.py; sourceTree = "<group>"; };
+		931FDDEC0F013D1C005F4E51 /* nonbonded_interactions.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = nonbonded_interactions.readme; sourceTree = "<group>"; };
+		931FDDED0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		931FDDEE0F013D1C005F4E51 /* restrain_diameter.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = restrain_diameter.py; sourceTree = "<group>"; };
+		931FDDEF0F013D1C005F4E51 /* restrain_diameter.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = restrain_diameter.readme; sourceTree = "<group>"; };
+		931FDDF00F013D1C005F4E51 /* single_protein.pdb */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = single_protein.pdb; sourceTree = "<group>"; };
+		931FDDF10F013D1C005F4E51 /* xyzdecorator.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = xyzdecorator.py; sourceTree = "<group>"; };
+		931FDDF20F013D1C005F4E51 /* xyzdecorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = xyzdecorator.readme; sourceTree = "<group>"; };
+		931FDDF30F013D1C005F4E51 /* xyzrdecorator.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = xyzrdecorator.py; sourceTree = "<group>"; };
+		931FDDF40F013D1C005F4E51 /* xyzrdecorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = xyzrdecorator.readme; sourceTree = "<group>"; };
+		931FDDF60F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		931FDE1E0F019265005F4E51 /* RangeSearchScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RangeSearchScoreState.h; sourceTree = "<group>"; };
 		935E0D610EFDAACD00CF1201 /* core.dox */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = core.dox; sourceTree = "<group>"; };
 		935E0D630EFDAACD00CF1201 /* AllNonbondedListScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AllNonbondedListScoreState.h; sourceTree = "<group>"; };
 		935E0D640EFDAACD00CF1201 /* AllPairsPairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AllPairsPairContainer.h; sourceTree = "<group>"; };
@@ -71,7 +121,6 @@
 		935E0DA00EFDAACD00CF1201 /* ListPairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ListPairContainer.h; sourceTree = "<group>"; };
 		935E0DA10EFDAACD00CF1201 /* ListSingletonContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ListSingletonContainer.h; sourceTree = "<group>"; };
 		935E0DA20EFDAACD00CF1201 /* macros.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = macros.h; sourceTree = "<group>"; };
-		935E0DA30EFDAACD00CF1201 /* Matrix3D.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Matrix3D.h; sourceTree = "<group>"; };
 		935E0DA40EFDAACD00CF1201 /* MaxChangeScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaxChangeScoreState.h; sourceTree = "<group>"; };
 		935E0DA50EFDAACD00CF1201 /* MaximumChangeScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaximumChangeScoreState.h; sourceTree = "<group>"; };
 		935E0DA60EFDAACD00CF1201 /* MaximumPairScoreRestraint.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaximumPairScoreRestraint.h; sourceTree = "<group>"; };
@@ -172,7 +221,6 @@
 		935E0E080EFDAACE00CF1201 /* SConscript */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = SConscript; sourceTree = "<group>"; };
 		935E0E090EFDAACE00CF1201 /* ListPairContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListPairContainer.cpp; sourceTree = "<group>"; };
 		935E0E0A0EFDAACE00CF1201 /* ListSingletonContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListSingletonContainer.cpp; sourceTree = "<group>"; };
-		935E0E0B0EFDAACE00CF1201 /* Matrix3D.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Matrix3D.cpp; sourceTree = "<group>"; };
 		935E0E0C0EFDAACE00CF1201 /* MaxChangeScoreState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaxChangeScoreState.cpp; sourceTree = "<group>"; };
 		935E0E0D0EFDAACE00CF1201 /* MaximumChangeScoreState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaximumChangeScoreState.cpp; sourceTree = "<group>"; };
 		935E0E0E0EFDAACE00CF1201 /* MaximumPairScoreRestraint.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaximumPairScoreRestraint.cpp; sourceTree = "<group>"; };
@@ -677,12 +725,21 @@
 		935E10720EFDAAD000CF1201 /* symlinks.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = symlinks.py; sourceTree = "<group>"; };
 		935E10730EFDAAD000CF1201 /* symlinks.pyc */ = {isa = PBXFileReference; lastKnownFileType = file; path = symlinks.pyc; sourceTree = "<group>"; };
 		935E10740EFDAAD000CF1201 /* valgrind-python.supp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "valgrind-python.supp"; sourceTree = "<group>"; };
+		937CBE5D0F07CEBD00A5C07E /* custom_hierarchy.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = custom_hierarchy.py; sourceTree = "<group>"; };
+		937CBE5E0F07CEBD00A5C07E /* custom_hierarchy.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = custom_hierarchy.readme; sourceTree = "<group>"; };
+		937CBE610F07D52400A5C07E /* log_internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = log_internal.h; sourceTree = "<group>"; };
+		937CBE6D0F07F77F00A5C07E /* decorator.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = decorator.cpp; sourceTree = "<group>"; };
+		937CBE6E0F07F77F00A5C07E /* decorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = decorator.readme; sourceTree = "<group>"; };
+		937CBE6F0F07F77F00A5C07E /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
+		937CBE700F07F77F00A5C07E /* restraint.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = restraint.cpp; sourceTree = "<group>"; };
+		937CBE710F07F77F00A5C07E /* restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = restraint.readme; sourceTree = "<group>"; };
 /* End PBXFileReference section */
 
 /* Begin PBXGroup section */
 		08FB7794FE84155DC02AAC07 /* xcode */ = {
 			isa = PBXGroup;
 			children = (
+				931FDDCB0F013CE4005F4E51 /* doc */,
 				935E0D5E0EFDAACD00CF1201 /* modules */,
 				935E0FA00EFDAACF00CF1201 /* bin */,
 				935E0FA30EFDAACF00CF1201 /* kernel */,
@@ -691,6 +748,89 @@
 			name = xcode;
 			sourceTree = "<group>";
 		};
+		931FDDCB0F013CE4005F4E51 /* doc */ = {
+			isa = PBXGroup;
+			children = (
+				931FDDCD0F013D1B005F4E51 /* examples */,
+			);
+			name = doc;
+			sourceTree = "<group>";
+		};
+		931FDDCD0F013D1B005F4E51 /* examples */ = {
+			isa = PBXGroup;
+			children = (
+				937CBE6C0F07F77F00A5C07E /* implementation */,
+				931FDDCE0F013D1C005F4E51 /* chain.py */,
+				931FDDCF0F013D1C005F4E51 /* chain.readme */,
+				931FDDD00F013D1C005F4E51 /* fragments */,
+				931FDDDE0F013D1C005F4E51 /* README */,
+				931FDDDF0F013D1C005F4E51 /* SConscript */,
+				931FDDE00F013D1C005F4E51 /* simple_examples */,
+				931FDDF50F013D1C005F4E51 /* using_experimental_data */,
+			);
+			name = examples;
+			path = doc/examples;
+			sourceTree = "<group>";
+		};
+		931FDDD00F013D1C005F4E51 /* fragments */ = {
+			isa = PBXGroup;
+			children = (
+				93058A1D0F16DE2500ED1094 /* navigating_a_protein.py */,
+				93058A1E0F16DE2500ED1094 /* navigating_a_protein.readme */,
+				937CBE5D0F07CEBD00A5C07E /* custom_hierarchy.py */,
+				937CBE5E0F07CEBD00A5C07E /* custom_hierarchy.readme */,
+				931FDDD10F013D1C005F4E51 /* basic_optimization.py */,
+				931FDDD20F013D1C005F4E51 /* basic_optimization.readme */,
+				931FDDD30F013D1C005F4E51 /* excluded_volume.py */,
+				931FDDD40F013D1C005F4E51 /* excluded_volume.readme */,
+				931FDDD50F013D1C005F4E51 /* load_protein_restrain_bonds.py */,
+				931FDDD60F013D1C005F4E51 /* load_protein_restrain_bonds.readme */,
+				931FDDD70F013D1C005F4E51 /* pair_restraint.py */,
+				931FDDD80F013D1C005F4E51 /* pair_restraint.readme */,
+				931FDDD90F013D1C005F4E51 /* read_write.py */,
+				931FDDDA0F013D1C005F4E51 /* read_write.readme */,
+				931FDDDB0F013D1C005F4E51 /* README */,
+				931FDDDC0F013D1C005F4E51 /* setup.py */,
+				931FDDDD0F013D1C005F4E51 /* setup.readme */,
+			);
+			path = fragments;
+			sourceTree = "<group>";
+		};
+		931FDDE00F013D1C005F4E51 /* simple_examples */ = {
+			isa = PBXGroup;
+			children = (
+				931FDDE10F013D1C005F4E51 /* bipartite_nonbonded_interactions.py */,
+				931FDDE20F013D1C005F4E51 /* bipartite_nonbonded_interactions.readme */,
+				931FDDE30F013D1C005F4E51 /* conditional_restraint.py */,
+				931FDDE40F013D1C005F4E51 /* conditional_restraint.readme */,
+				931FDDE50F013D1C005F4E51 /* connectivity_restraint.py */,
+				931FDDE60F013D1C005F4E51 /* connectivity_restraint.readme */,
+				931FDDE70F013D1C005F4E51 /* cover_particles.py */,
+				931FDDE80F013D1C005F4E51 /* cover_particles.readme */,
+				931FDDE90F013D1C005F4E51 /* molecular_hierarchy.py */,
+				931FDDEA0F013D1C005F4E51 /* molecular_hierarchy.readme */,
+				931FDDEB0F013D1C005F4E51 /* nonbonded_interactions.py */,
+				931FDDEC0F013D1C005F4E51 /* nonbonded_interactions.readme */,
+				931FDDED0F013D1C005F4E51 /* README */,
+				931FDDEE0F013D1C005F4E51 /* restrain_diameter.py */,
+				931FDDEF0F013D1C005F4E51 /* restrain_diameter.readme */,
+				931FDDF00F013D1C005F4E51 /* single_protein.pdb */,
+				931FDDF10F013D1C005F4E51 /* xyzdecorator.py */,
+				931FDDF20F013D1C005F4E51 /* xyzdecorator.readme */,
+				931FDDF30F013D1C005F4E51 /* xyzrdecorator.py */,
+				931FDDF40F013D1C005F4E51 /* xyzrdecorator.readme */,
+			);
+			path = simple_examples;
+			sourceTree = "<group>";
+		};
+		931FDDF50F013D1C005F4E51 /* using_experimental_data */ = {
+			isa = PBXGroup;
+			children = (
+				931FDDF60F013D1C005F4E51 /* README */,
+			);
+			path = using_experimental_data;
+			sourceTree = "<group>";
+		};
 		935E0D5E0EFDAACD00CF1201 /* modules */ = {
 			isa = PBXGroup;
 			children = (
@@ -731,6 +871,7 @@
 		935E0D620EFDAACD00CF1201 /* include */ = {
 			isa = PBXGroup;
 			children = (
+				93058A120F16D25900ED1094 /* TruncatedHarmonic.h */,
 				935E0D630EFDAACD00CF1201 /* AllNonbondedListScoreState.h */,
 				935E0D640EFDAACD00CF1201 /* AllPairsPairContainer.h */,
 				935E0D650EFDAACD00CF1201 /* AngleRestraint.h */,
@@ -781,7 +922,6 @@
 				935E0DA00EFDAACD00CF1201 /* ListPairContainer.h */,
 				935E0DA10EFDAACD00CF1201 /* ListSingletonContainer.h */,
 				935E0DA20EFDAACD00CF1201 /* macros.h */,
-				935E0DA30EFDAACD00CF1201 /* Matrix3D.h */,
 				935E0DA40EFDAACD00CF1201 /* MaxChangeScoreState.h */,
 				935E0DA50EFDAACD00CF1201 /* MaximumChangeScoreState.h */,
 				935E0DA60EFDAACD00CF1201 /* MaximumPairScoreRestraint.h */,
@@ -837,6 +977,7 @@
 		935E0D900EFDAACD00CF1201 /* internal */ = {
 			isa = PBXGroup;
 			children = (
+				93058A0F0F16B5D700ED1094 /* truncated_harmonic.h */,
 				935E0D910EFDAACD00CF1201 /* ArrayOnAttributesHelper.h */,
 				935E0D920EFDAACD00CF1201 /* bbox_nbl_helpers.h */,
 				935E0D930EFDAACD00CF1201 /* bond_helpers.h */,
@@ -912,7 +1053,6 @@
 				935E0E030EFDAACE00CF1201 /* internal */,
 				935E0E090EFDAACE00CF1201 /* ListPairContainer.cpp */,
 				935E0E0A0EFDAACE00CF1201 /* ListSingletonContainer.cpp */,
-				935E0E0B0EFDAACE00CF1201 /* Matrix3D.cpp */,
 				935E0E0C0EFDAACE00CF1201 /* MaxChangeScoreState.cpp */,
 				935E0E0D0EFDAACE00CF1201 /* MaximumChangeScoreState.cpp */,
 				935E0E0E0EFDAACE00CF1201 /* MaximumPairScoreRestraint.cpp */,
@@ -1157,6 +1297,7 @@
 		935E0EA00EFDAACE00CF1201 /* unary_functions */ = {
 			isa = PBXGroup;
 			children = (
+				93058A180F16D50F00ED1094 /* test_truncated_harmonic.py */,
 				935E0EA10EFDAACE00CF1201 /* test_cosine.py */,
 				935E0EA20EFDAACE00CF1201 /* test_cosine.pyc */,
 				935E0EA30EFDAACE00CF1201 /* test_harmonic.py */,
@@ -1690,6 +1831,7 @@
 				935E0F750EFDAACF00CF1201 /* IntAttributeMapScoreState.h */,
 				935E0F760EFDAACF00CF1201 /* internal */,
 				935E0F790EFDAACF00CF1201 /* SConscript */,
+				931FDE1E0F019265005F4E51 /* RangeSearchScoreState.h */,
 			);
 			path = include;
 			sourceTree = "<group>";
@@ -2001,6 +2143,9 @@
 		935E0FF30EFDAACF00CF1201 /* include */ = {
 			isa = PBXGroup;
 			children = (
+				931959990F0AE5910077D3C7 /* PairContainer.h */,
+				9319599A0F0AE5910077D3C7 /* PairModifier.h */,
+				9319599B0F0AE5910077D3C7 /* SingletonModifier.h */,
 				935E0FF40EFDAACF00CF1201 /* base_types.h */,
 				935E0FF50EFDAACF00CF1201 /* config.h */,
 				935E0FF60EFDAACF00CF1201 /* container_macros.h */,
@@ -2051,6 +2196,7 @@
 				935E10050EFDAACF00CF1201 /* units.h */,
 				935E10060EFDAACF00CF1201 /* utility.h */,
 				935E10070EFDAACF00CF1201 /* Vector.h */,
+				937CBE610F07D52400A5C07E /* log_internal.h */,
 			);
 			path = internal;
 			sourceTree = "<group>";
@@ -2084,6 +2230,9 @@
 		935E102D0EFDAACF00CF1201 /* src */ = {
 			isa = PBXGroup;
 			children = (
+				9319599C0F0AE5B70077D3C7 /* PairContainer.cpp */,
+				9319599D0F0AE5B70077D3C7 /* PairModifier.cpp */,
+				9319599E0F0AE5B70077D3C7 /* SingletonContainer.cpp */,
 				935E102E0EFDAACF00CF1201 /* base_types.cpp */,
 				935E102F0EFDAACF00CF1201 /* exception.cpp */,
 				935E10300EFDAACF00CF1201 /* internal */,
@@ -2197,6 +2346,18 @@
 			path = subversion;
 			sourceTree = "<group>";
 		};
+		937CBE6C0F07F77F00A5C07E /* implementation */ = {
+			isa = PBXGroup;
+			children = (
+				937CBE6D0F07F77F00A5C07E /* decorator.cpp */,
+				937CBE6E0F07F77F00A5C07E /* decorator.readme */,
+				937CBE6F0F07F77F00A5C07E /* README */,
+				937CBE700F07F77F00A5C07E /* restraint.cpp */,
+				937CBE710F07F77F00A5C07E /* restraint.readme */,
+			);
+			path = implementation;
+			sourceTree = "<group>";
+		};
 /* End PBXGroup section */
 
 /* Begin PBXLegacyTarget section */
@@ -2215,7 +2376,7 @@
 		};
 		9311D7EA0ECCDC1600EEFF45 /* test */ = {
 			isa = PBXLegacyTarget;
-			buildArgumentsString = "$(ACTION) -j 2 test";
+			buildArgumentsString = "$(ACTION) -j 2 test examples";
 			buildConfigurationList = 9311D7EB0ECCDC1600EEFF45 /* Build configuration list for PBXLegacyTarget "test" */;
 			buildPhases = (
 			);
@@ -2373,7 +2534,7 @@
 				GCC_OPTIMIZATION_LEVEL = 0;
 				OTHER_CFLAGS = "";
 				OTHER_LDFLAGS = "";
-				PRODUCT_NAME = test;
+				PRODUCT_NAME = "test doc/examples";
 			};
 			name = Debug;
 		};
Index: doc/doxygen/doxygen.conf.in
===================================================================
--- doc/doxygen/doxygen.conf.in	(revision 1186)
+++ doc/doxygen/doxygen.conf.in	(working copy)
@@ -560,6 +560,7 @@
 # with spaces.
 
 INPUT                  = ../../build/include \
+                         ../../modules/examples/src \
                          ../../modules/@ALL_MODULES@/doc \
                          ../../kernel/doc \
                          .
@@ -630,7 +631,9 @@
 # directories that contain example code fragments that are included (see 
 # the \include command).
 
-EXAMPLE_PATH           = ../../examples
+EXAMPLE_PATH           = ../../examples \
+                         ../../modules/examples/include \
+                         ../../modules/examples/src
 
 # If the value of the EXAMPLE_PATH tag contains directories, you can use the 
 # EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
@@ -638,6 +641,7 @@
 # blank all files are included.
 
 EXAMPLE_PATTERNS       = *.py \
+                         *.h \
                          *.cpp
 
 # If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
@@ -698,7 +702,7 @@
 # doxygen to hide any special comment blocks from generated source code 
 # fragments. Normal C and C++ comments will always remain visible.
 
-STRIP_CODE_COMMENTS    = YES
+STRIP_CODE_COMMENTS    = NO
 
 # If the REFERENCED_BY_RELATION tag is set to YES 
 # then for each documented function all documented 
Index: patches/examples_module.patch
===================================================================
--- patches/examples_module.patch	(revision 1191)
+++ patches/examples_module.patch	(working copy)
@@ -1,8 +1,10 @@
-Index: modules/examples/test/run-all-tests.py
+Index: kernel/test/run-all-tests.py
 ===================================================================
---- modules/examples/test/run-all-tests.py	(revision 0)
-+++ modules/examples/test/run-all-tests.py	(revision 0)
-@@ -0,0 +1,26 @@
+--- kernel/test/run-all-tests.py	(revision 1186)
++++ kernel/test/run-all-tests.py	(working copy)
+@@ -1 +1,26 @@
+-link ../../tools/run-all-tests.py
+\ No newline at end of file
 +import unittest, sys, os, re
 +
 +def regressionTest():
@@ -29,844 +31,489 @@
 +
 +if __name__ == "__main__":
 +    unittest.main(defaultTest="regressionTest")
-Index: modules/examples/test/SConscript
+Index: kernel/include/UnaryFunction.h
 ===================================================================
---- modules/examples/test/SConscript	(revision 0)
-+++ modules/examples/test/SConscript	(revision 0)
-@@ -0,0 +1,3 @@
-+Import('env')
+--- kernel/include/UnaryFunction.h	(revision 1186)
++++ kernel/include/UnaryFunction.h	(working copy)
+@@ -19,6 +19,9 @@
+ //! Abstract single variable functor class for score functions.
+ /** These functors take a single feature value, and return a corresponding
+     score (and optionally also the first derivative).
 +
-+env.IMPModuleTest("test.passed", "run-all-tests.py")
-Index: modules/examples/test/test_python.py
++    See the IMP::examples::UnaryFunction example for how to implement a simple
++    unary function.
+  */
+ class IMPEXPORT UnaryFunction : public RefCountedObject
+ {
+Index: kernel/include/Restraint.h
 ===================================================================
---- modules/examples/test/test_python.py	(revision 0)
-+++ modules/examples/test/test_python.py	(revision 0)
-@@ -0,0 +1,21 @@
-+import unittest
-+import IMP
-+import IMP.test
-+import IMP.examples
-+import IMP.examples.randomize
-+import IMP.core
+--- kernel/include/Restraint.h	(revision 1186)
++++ kernel/include/Restraint.h	(working copy)
+@@ -54,7 +54,8 @@
+     to make. To disable this warning for a particular restraint, call
+     set_was_owned(true).
+ 
+-    See the \ref restraint example for how to implement a simple restraint.
++    See the IMP::examples::Restraint example for how to implement a simple
++    restraint.
+  */
+ class IMPEXPORT Restraint : public RefCountedObject
+ {
+Index: kernel/include/DecoratorBase.h
+===================================================================
+--- kernel/include/DecoratorBase.h	(revision 1186)
++++ kernel/include/DecoratorBase.h	(working copy)
+@@ -29,6 +29,9 @@
+ 
+     \note Remember that attribute keys should always be created lazily
+     (at the time of the first use), and not be created as static variables.
 +
-+
-+class GenericTest(IMP.test.TestCase):
-+    """Test the python code"""
-+
-+    def test_python(self):
-+        """Checking module python code"""
-+        m = IMP.Model()
-+        p= IMP.Particle(m)
-+        d= IMP.core.XYZDecorator.create(p)
-+        IMP.examples.randomize.randomize_particle(p)
-+        self.assert_(IMP.examples.get_is_xyz_particle(p))
-+
-+if __name__ == '__main__':
-+    unittest.main()
-Index: modules/examples/test/test.passed
++    See the IMP::examples::Decorator example for how to implement a simple
++    decorator.
+ */
+ class DecoratorBase
+ {
+Index: kernel/doc/api.dox
 ===================================================================
---- modules/examples/test/test.passed	(revision 0)
-+++ modules/examples/test/test.passed	(revision 0)
-@@ -0,0 +1 @@
-+PASSED
-Index: modules/examples/include/ExampleDecorator.h
+--- kernel/doc/api.dox	(revision 1186)
++++ kernel/doc/api.dox	(working copy)
+@@ -12,7 +12,7 @@
+     - \ref deprecation "Deprecated Functionality"
+ 
+     Then look through the examples which can be found at:
+-    - \ref Examples "Examples"
++    - \ref examples "Examples"
+ 
+     There are a variety of useful base classes which are used to provide
+     most functionality. They are:
+Index: kernel/doc/decorators.dox
 ===================================================================
---- modules/examples/include/ExampleDecorator.h	(revision 0)
-+++ modules/examples/include/ExampleDecorator.h	(revision 0)
-@@ -0,0 +1,67 @@
-+/**
-+ *  \file ExampleDecorator.h     \brief Add a name to a particle.
-+ *
-+ *  Copyright 2007-8 Sali Lab. All rights reserved.
-+ *
-+ */
-+
-+#ifndef IMPEXAMPLES_EXAMPLE_DECORATOR_H
-+#define IMPEXAMPLES_EXAMPLE_DECORATOR_H
-+
-+#include "config.h"
-+
-+#include <IMP/Particle.h>
-+#include <IMP/Model.h>
-+#include <IMP/DecoratorBase.h>
-+
-+IMPEXAMPLES_BEGIN_NAMESPACE
-+
-+//! A simple decorator which adds a name to a particle.
-+/** The source code is as follows:
-+    \include Decorator.h
-+    \include Decorator.cpp
-+*/
-+class IMPEXAMPLESEXPORT ExampleDecorator: public DecoratorBase
-+{
-+  static StringKey get_name_key();
-+
-+public:
-+  //! Create a decorator from a named particle without error checking.
-+  ExampleDecorator(Particle *p);
-+  //! Create a decorator from a named particle
-+  static ExampleDecorator cast(Particle *p) {
-+    IMP_check( p->has_attribute(get_name_key()), "Particle " << p->get_index()
-+               << " missing required attributes.",
-+               InvalidStateException);
-+    return ExampleDecorator(p);
-+  }
-+
-+  //! Add a name to the particle
-+  static ExampleDecorator create(Particle *p, std::string name) {
-+    p->add_attribute(get_name_key(), name);
-+    ExampleDecorator ret(p);
-+    return ret;
-+  }
-+
-+  //! Set the name of the particle
-+  void set_name(std::string name) {
-+    get_particle()->set_value(get_name_key(), name);
-+  }
-+
-+  //! Get the name of the particle
-+  std::string get_name() const {
-+    return get_particle()->get_value(get_name_key());
-+  }
-+
-+  // Print out information about the particle
-+  void show(std::ostream &out) const {
-+    out << "Particle named " << get_name() << std::endl;
-+  }
-+};
-+
-+// Make it so the C++ operator<< can be used.
-+IMP_OUTPUT_OPERATOR(ExampleDecorator);
-+
-+IMPEXAMPLES_END_NAMESPACE
-+
-+#endif  /* IMPEXAMPLES_EXAMPLE_DECORATOR_H */
-Index: modules/examples/include/ExampleUnaryFunction.h
+--- kernel/doc/decorators.dox	(revision 1186)
++++ kernel/doc/decorators.dox	(working copy)
+@@ -41,7 +41,7 @@
+ d.get_foo_key()
+ \endverbatim
+ 
+-See the \ref decorator example for how to implement a simple
++See the IMP::examples::Decorator example for how to implement a simple
+ decorator.
+  */
+ 
+Index: tools/make-module
 ===================================================================
---- modules/examples/include/ExampleUnaryFunction.h	(revision 0)
-+++ modules/examples/include/ExampleUnaryFunction.h	(revision 0)
+--- tools/make-module	(revision 0)
++++ tools/make-module	(revision 0)
 @@ -0,0 +1,53 @@
-+/**
-+ *  \file ExampleUnaryFunction.h
-+ *  \brief A simple unary function.
-+ *
-+ *  Copyright 2007-8 Sali Lab. All rights reserved.
-+ *
-+ */
++#!/usr/bin/python
 +
++"""Add a new module to IMP.
++"""
 +
-+#ifndef IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
-+#define IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
-+
-+#include "config.h"
-+#include <IMP/UnaryFunction.h>
-+#include <IMP/utility.h>
-+
-+IMPEXAMPLES_BEGIN_NAMESPACE
-+
-+//! A simple unary function
-+/** This one happens to be a harmonic.
-+    The source code is as follows:
-+    \include UnaryFunction.h
-+ */
-+class ExampleUnaryFunction : public UnaryFunction
-+{
-+public:
-+  /** Create with the given center and spring constant */
-+  ExampleUnaryFunction(Float center, Float k) : center_(center), k_(k) {}
-+
-+  virtual ~ExampleUnaryFunction() {}
-+
-+  virtual Float evaluate(Float feature) const {
-+    return .5*k_*square(feature-center_);
-+  }
-+
-+  virtual FloatPair evaluate_with_derivative(Float feature) const {
-+    Float e = (feature - center_);
-+    Float deriv = k_ * e;
-+    return FloatPair(evaluate(feature), deriv);
-+  }
-+
-+  void show(std::ostream &out=std::cout) const {
-+    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
-+  }
-+
-+private:
-+  Float center_;
-+  Float k_;
-+};
-+
-+IMPEXAMPLES_END_NAMESPACE
-+
-+#endif  /* IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H */
-Index: modules/examples/include/SConscript
-===================================================================
---- modules/examples/include/SConscript	(revision 0)
-+++ modules/examples/include/SConscript	(revision 0)
-@@ -0,0 +1,14 @@
-+Import('env')
-+
-+files= []
-+
-+hs= Glob("*.h")
-+shs= Glob("*/*.h")
-+for h in hs+shs:
-+    s= h.rstr()
-+    if not s.startswith(".") and not s.endswith("config.h")\
-+      and not s.endswith("examples.h") and not s.endswith("examples_version_info.h"):
-+        files.append(s)
-+
-+# Install the include files:
-+env.IMPHeaders(files)
-Index: modules/examples/include/ExampleRestraint.h
-===================================================================
---- modules/examples/include/ExampleRestraint.h	(revision 0)
-+++ modules/examples/include/ExampleRestraint.h	(revision 0)
-@@ -0,0 +1,46 @@
-+/**
-+ *  \file ExampleRestraint.h
-+ *  \brief A restraint on a list of particle pairs.
-+ *
-+ *  Copyright 2007-8 Sali Lab. All rights reserved.
-+ *
-+ */
-+
-+#ifndef IMPEXAMPLES_EXAMPLE_RESTRAINT_H
-+#define IMPEXAMPLES_EXAMPLE_RESTRAINT_H
-+
-+#include "config.h"
-+#include "internal/examples_version_info.h"
-+#include <IMP/SingletonScore.h>
-+#include <IMP/Restraint.h>
-+#include <IMP/core/PairContainer.h>
-+
-+IMPEXAMPLES_BEGIN_NAMESPACE
-+
-+//! Apply a PairScore to a list of particle pairs
-+/** This restraint could be used, in conjunction with a
-+    ClosePairsScoreState and a SphereDistancePairScore,
-+    to prevent particles from interpenetrating.
-+
-+    The source code is as follows:
-+    \include Restraint.h
-+    \include Restraint.cpp
-+ */
-+class IMPEXAMPLESEXPORT ExampleRestraint : public Restraint
-+{
-+  Pointer<IMP::core::PairContainer> pc_;
-+  Pointer<PairScore> f_;
-+public:
-+  //! Create the restraint.
-+  ExampleRestraint(PairScore* score_func,
-+                   IMP::core::PairContainer *pc);
-+  virtual ~ExampleRestraint() {}
-+
-+  IMP_RESTRAINT(internal::examples_version_info)
-+
-+  ParticlesList get_interacting_particles() const;
-+};
-+
-+IMPEXAMPLES_END_NAMESPACE
-+
-+#endif  /* IMPEXAMPLES_EXAMPLE_RESTRAINT_H */
-Index: modules/examples/doc/examples.dox
-===================================================================
---- modules/examples/doc/examples.dox	(revision 0)
-+++ modules/examples/doc/examples.dox	(revision 0)
-@@ -0,0 +1,11 @@
-+/** \namespace IMP::examples
-+\brief IMP.examples provides examples showing how to implement various types of objects and functionality. 
-+
-+<b>Overview:</b> IMP.examples provides examples showing how to implement things.
-+
-+<b>Authors:</b> Daniel Russel.
-+
-+<b>Publications:</b> IMP.examples is part of the main \imp distribution.
-+
-+<b>License:</b> IMP.examples is licensed under the BSD license.
-+*/
-\ No newline at end of file
-Index: modules/examples/src/ExampleDecorator.cpp
-===================================================================
---- modules/examples/src/ExampleDecorator.cpp	(revision 0)
-+++ modules/examples/src/ExampleDecorator.cpp	(revision 0)
-@@ -0,0 +1,22 @@
-+/**
-+ *  \file ExampleDecorator.cpp   \brief Add a name to a particle.
-+ *
-+ *  Copyright 2007-8 Sali Lab. All rights reserved.
-+ *
-+ */
-+
-+#include <IMP/examples/ExampleDecorator.h>
-+
-+IMPEXAMPLES_BEGIN_NAMESPACE
-+
-+ExampleDecorator::ExampleDecorator(Particle *p): DecoratorBase(p) {
-+}
-+
-+StringKey ExampleDecorator::get_name_key() {
-+  /* the compiler will make sure this is initialized the first time the
-+   method is called. */
-+  static StringKey mykey("my name");
-+  return mykey;
-+}
-+
-+IMPEXAMPLES_END_NAMESPACE
-Index: modules/examples/src/SConscript
-===================================================================
---- modules/examples/src/SConscript	(revision 0)
-+++ modules/examples/src/SConscript	(revision 0)
-@@ -0,0 +1,12 @@
-+Import('env')
-+e = env.IMPSharedLibraryEnvironment()
-+ns= Glob("*.cpp")+ Glob("*/*.cpp")
-+
-+files=[]
-+for h in ns:
-+    s= h.rstr()
-+    if not s.startswith(".") and not s.endswith("examples_version_info.cpp"):
-+        files.append(s)
-+
-+# Build and install the shared library:
-+e.IMPSharedLibrary(files, install=True)
-Index: modules/examples/src/ExampleRestraint.cpp
-===================================================================
---- modules/examples/src/ExampleRestraint.cpp	(revision 0)
-+++ modules/examples/src/ExampleRestraint.cpp	(revision 0)
-@@ -0,0 +1,56 @@
-+/**
-+ *  \file ExampleRestraint.cpp \brief Restrain a list of particle pairs.
-+ *
-+ *  Copyright 2007-8 Sali Lab. All rights reserved.
-+ *
-+ */
-+
-+#include <IMP/examples/ExampleRestraint.h>
-+#include <IMP/log.h>
-+
-+IMPEXAMPLES_BEGIN_NAMESPACE
-+
-+ExampleRestraint::ExampleRestraint(PairScore* score_func,
-+                                   IMP::core::PairContainer *pc) : pc_(pc),
-+                                          f_(score_func) {}
-+
-+
-+
-+Float ExampleRestraint::evaluate(DerivativeAccumulator *accum)
-+{
-+  Float score=0;
-+  for (IMP::core::PairContainer::ParticlePairIterator
-+       it= pc_->particle_pairs_begin();
-+       it != pc_->particle_pairs_end(); ++it) {
-+    score += f_->evaluate(it->first, it->second, accum);
-+  }
-+
-+  return score;
-+}
-+
-+/* Return a list of interacting sets. In this case it is pairs
-+   of particles so all the sets are of size 2. */
-+ParticlesList ExampleRestraint::get_interacting_particles() const
-+{
-+  ParticlesList ret;
-+  for (IMP::core::PairContainer::ParticlePairIterator it
-+       = pc_->particle_pairs_begin();
-+       it != pc_->particle_pairs_end(); ++it) {
-+    Particles s;
-+    s.push_back(it->first);
-+    s.push_back(it->second);
-+    ret.push_back(s);
-+  }
-+  return ret;
-+}
-+
-+void ExampleRestraint::show(std::ostream& out) const
-+{
-+  out << "PairsRestraint with score function ";
-+  f_->show(out);
-+  out << " and container ";
-+  pc_->show(out);
-+  out << std::endl;
-+}
-+
-+IMPEXAMPLES_END_NAMESPACE
-Index: modules/examples/SConscript
-===================================================================
---- modules/examples/SConscript	(revision 0)
-+++ modules/examples/SConscript	(revision 0)
-@@ -0,0 +1,12 @@
-+Import('env')
-+Export('env')
-+
-+env.Append(LIBS=['imp_core'])
-+env.validate()
-+
-+# Subdirectories:
-+SConscript('src/SConscript')
-+SConscript('include/SConscript')
-+SConscript('pyext/SConscript')
-+SConscript('test/SConscript')
-+SConscript('bin/SConscript')
-Index: modules/examples/bin/test.cpp
-===================================================================
---- modules/examples/bin/test.cpp	(revision 0)
-+++ modules/examples/bin/test.cpp	(revision 0)
-@@ -0,0 +1,22 @@
-+#include <IMP.h>
-+#include <IMP/core.h>
-+#include <IMP/examples/MyRestraint.h>
-+
-+using namespace IMP;
-+int main(){
-+  set_log_level(VERBOSE);
-+  Pointer<Model> m(new Model());
-+  Particle* p0= new Particle(m);
-+  core::XYZDecorator d0= core::XYZDecorator::create(p0);
-+  Particle* p1= new Particle(m);
-+  core::XYZDecorator d1= core::XYZDecorator::create(p1);
-+  core::DistancePairScore *dps
-+    = new core::DistancePairScore(new core::Linear(0,1));
-+  examples::MyRestraint *r= new examples::MyRestraint(dps, p0, p1);
-+  d0.set_coordinates(Vector3D(0,0,0));
-+  d1.set_coordinates(Vector3D(0,0,1));
-+ 	
-+  m->add_restraint(r);
-+  IMP_assert(std::abs(m->evaluate(false) -1) < .01, "Out of range");
-+  return 0;
-+}
-Index: modules/examples/bin/SConscript
-===================================================================
---- modules/examples/bin/SConscript	(revision 0)
-+++ modules/examples/bin/SConscript	(revision 0)
-@@ -0,0 +1,14 @@
 +import os
-+import os.path
++import sys
++import getopt
++import shutil
++import re
 +
-+Import('env')
-+penv = env.Clone()
-+penv.Prepend(LIBS=["imp_examples"])
 +
-+fs = Glob("*.cpp")
++def fix_string(input, modname):
++    return input.replace("modulename", modname)\
++        .replace("MODULENAME", modname.upper())\
++        .replace('.hpp', '.h')\
++        .replace('.cc', '.cpp')
 +
-+all=[]
-+for f in fs:
-+    all.append(penv.Program(f.rstr()))
++def copy_dir(source, dest, modname):
++    for x in os.listdir(source):
++        fx= fix_string(x, modname)
++        xspath= os.path.join(source, x)
++        xdpath= os.path.join(dest, fx)
++        print "handling "+ xspath +"->"+xdpath
++        if os.path.isdir(xspath):
++            os.mkdir(xdpath)
++            copy_dir(xspath, xdpath, modname)
++        else:
++            input= file(xspath, 'r').read()
++            output= fix_string(input, modname)
++            file(xdpath, 'w').write(output)
++def main():
++    if len(sys.argv) != 2:
++        print("Usage: ./kernel/doc/bin/make-module module_name")
++        return
++    modname= sys.argv[1]
++    modpath=os.path.join("modules", modname)
++    if os.path.isdir(modpath):
++        print "Module already exists"
++        return
++    print "Creating a new module " + modname
++    os.mkdir(modpath)
++    copy_dir("kernel/doc/module_template", modpath, modname)
++    os.symlink(os.path.join("..", "..", "..", "tools", "run_all_tests.py"),
++               os.path.join(modpath, "test", "run_all_tests.py"))
++    sc= file("modules/SConscript", "a")
++    sc.write(fix_string("""
++env.IMPModule('modulename', author='somebody', version='SVN',
++              description='A private module.')""", modname))
 +
-+Return('all')
-Index: modules/examples/pyext/examples.i
-===================================================================
---- modules/examples/pyext/examples.i	(revision 0)
-+++ modules/examples/pyext/examples.i	(revision 0)
-@@ -0,0 +1,37 @@
-+%module(directors="1") "IMP.examples"
 +
-+%{
-+#include "IMP.h"
-+#include "IMP/examples.h"
-+%}
-+
-+
-+%include "kernel/pyext/IMP_macros.i"
-+%include "kernel/pyext/IMP_exceptions.i"
-+
-+%include "examples_config.i"
-+
-+%include "std_vector.i"
-+%include "std_string.i"
-+%include "std_except.i"
-+
-+%pythoncode %{
-+import IMP.core
-+def get_is_xyz_particle(p):
-+    """Return True if the particle is an IMP.core.XYZDecorator particle"""
-+    return IMP.core.XYZDecorator.is_instance_of(p)
-+%}
-+
-+/* Get definitions of kernel base classes (but do not wrap) */
-+%import "kernel/pyext/IMP.i"
-+
-+namespace IMP {
-+namespace examples {
-+IMP_OWN_FIRST_SECOND_CONSTRUCTOR(Restraint)
-+}
-+}
-+
-+/* Wrap our own classes */
-+%include "IMP/examples/ExampleRestraint.h"
-+%include "IMP/examples/ExampleDecorator.h"
-+%include "IMP/examples/ExampleUnaryFunction.h"
-Index: modules/examples/pyext/SConscript
++if __name__ == '__main__':
++    main()
+
+Property changes on: tools/make-module
+___________________________________________________________________
+Added: svn:executable
+   + *
+
+Index: tools/make_examples.py
 ===================================================================
---- modules/examples/pyext/SConscript	(revision 0)
-+++ modules/examples/pyext/SConscript	(revision 0)
-@@ -0,0 +1,10 @@
-+Import('env')
+--- tools/make_examples.py	(revision 1186)
++++ tools/make_examples.py	(working copy)
+@@ -38,6 +38,7 @@
+         else: wname=name
+         outfile.write("\page "+wname+ " " + nice_name(wname) +"\n\n")
+         outfile.write(descr+"\n\n")
 +
-+e = env.IMPPythonExtensionEnvironment()
-+
-+e.IMPPythonExtension('examples.i')
-+
-+files = (Glob('examples/*.py'))
-+
-+# Install the Python files:
-+env.IMPPython(files)
-Index: modules/examples/pyext/examples/randomize.py
+         # find subpages
+         for dp in tree:
+             pth = dp[0].path
+Index: imp.xcodeproj/project.pbxproj
 ===================================================================
---- modules/examples/pyext/examples/randomize.py	(revision 0)
-+++ modules/examples/pyext/examples/randomize.py	(revision 0)
-@@ -0,0 +1,5 @@
-+import IMP.core
-+
-+def randomize_particle(p):
-+    d= IMP.core.XYZDecorator.cast(p)
-+    d.set_coordinates(IMP.random_vector_in_unit_box())
-Index: modules/examples/README
-===================================================================
---- modules/examples/README	(revision 0)
-+++ modules/examples/README	(revision 0)
-@@ -0,0 +1,5 @@
-+This is a basic module. Put your header files in a subdirectory of "include"
-+your shared implementation in a subdirectory of "src" and any python
-+implementation files in "pyext/examples". Any ".cpp" file in "bin"
-+will be built into an executable linked against the library created from
-+"src".
-\ No newline at end of file
-Index: modules/SConscript
-===================================================================
---- modules/SConscript	(revision 1186)
-+++ modules/SConscript	(working copy)
-@@ -20,3 +20,6 @@
+--- imp.xcodeproj/project.pbxproj	(revision 1186)
++++ imp.xcodeproj/project.pbxproj	(working copy)
+@@ -7,6 +7,56 @@
+ 	objects = {
  
- env.IMPModule('search', author='Daniel Russel', version='SVN',
-               description='Build search structures over particles.')
-+
-+env.IMPModule('examples', author='somebody', version='SVN',
-+              description='A private module.')
-\ No newline at end of file
-Index: examples/implementation/unary_function.readme
+ /* Begin PBXFileReference section */
++		93058A0F0F16B5D700ED1094 /* truncated_harmonic.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = truncated_harmonic.h; sourceTree = "<group>"; };
++		93058A120F16D25900ED1094 /* TruncatedHarmonic.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TruncatedHarmonic.h; sourceTree = "<group>"; };
++		93058A180F16D50F00ED1094 /* test_truncated_harmonic.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = test_truncated_harmonic.py; sourceTree = "<group>"; };
++		93058A1D0F16DE2500ED1094 /* navigating_a_protein.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = navigating_a_protein.py; sourceTree = "<group>"; };
++		93058A1E0F16DE2500ED1094 /* navigating_a_protein.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = navigating_a_protein.readme; sourceTree = "<group>"; };
++		931959990F0AE5910077D3C7 /* PairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PairContainer.h; sourceTree = "<group>"; };
++		9319599A0F0AE5910077D3C7 /* PairModifier.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PairModifier.h; sourceTree = "<group>"; };
++		9319599B0F0AE5910077D3C7 /* SingletonModifier.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SingletonModifier.h; sourceTree = "<group>"; };
++		9319599C0F0AE5B70077D3C7 /* PairContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PairContainer.cpp; sourceTree = "<group>"; };
++		9319599D0F0AE5B70077D3C7 /* PairModifier.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = PairModifier.cpp; sourceTree = "<group>"; };
++		9319599E0F0AE5B70077D3C7 /* SingletonContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SingletonContainer.cpp; sourceTree = "<group>"; };
++		931FDDCE0F013D1C005F4E51 /* chain.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = chain.py; sourceTree = "<group>"; };
++		931FDDCF0F013D1C005F4E51 /* chain.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = chain.readme; sourceTree = "<group>"; };
++		931FDDD10F013D1C005F4E51 /* basic_optimization.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = basic_optimization.py; sourceTree = "<group>"; };
++		931FDDD20F013D1C005F4E51 /* basic_optimization.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = basic_optimization.readme; sourceTree = "<group>"; };
++		931FDDD30F013D1C005F4E51 /* excluded_volume.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = excluded_volume.py; sourceTree = "<group>"; };
++		931FDDD40F013D1C005F4E51 /* excluded_volume.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = excluded_volume.readme; sourceTree = "<group>"; };
++		931FDDD50F013D1C005F4E51 /* load_protein_restrain_bonds.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = load_protein_restrain_bonds.py; sourceTree = "<group>"; };
++		931FDDD60F013D1C005F4E51 /* load_protein_restrain_bonds.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = load_protein_restrain_bonds.readme; sourceTree = "<group>"; };
++		931FDDD70F013D1C005F4E51 /* pair_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = pair_restraint.py; sourceTree = "<group>"; };
++		931FDDD80F013D1C005F4E51 /* pair_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = pair_restraint.readme; sourceTree = "<group>"; };
++		931FDDD90F013D1C005F4E51 /* read_write.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = read_write.py; sourceTree = "<group>"; };
++		931FDDDA0F013D1C005F4E51 /* read_write.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = read_write.readme; sourceTree = "<group>"; };
++		931FDDDB0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
++		931FDDDC0F013D1C005F4E51 /* setup.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = setup.py; sourceTree = "<group>"; };
++		931FDDDD0F013D1C005F4E51 /* setup.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = setup.readme; sourceTree = "<group>"; };
++		931FDDDE0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
++		931FDDDF0F013D1C005F4E51 /* SConscript */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = SConscript; sourceTree = "<group>"; };
++		931FDDE10F013D1C005F4E51 /* bipartite_nonbonded_interactions.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = bipartite_nonbonded_interactions.py; sourceTree = "<group>"; };
++		931FDDE20F013D1C005F4E51 /* bipartite_nonbonded_interactions.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = bipartite_nonbonded_interactions.readme; sourceTree = "<group>"; };
++		931FDDE30F013D1C005F4E51 /* conditional_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = conditional_restraint.py; sourceTree = "<group>"; };
++		931FDDE40F013D1C005F4E51 /* conditional_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = conditional_restraint.readme; sourceTree = "<group>"; };
++		931FDDE50F013D1C005F4E51 /* connectivity_restraint.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = connectivity_restraint.py; sourceTree = "<group>"; };
++		931FDDE60F013D1C005F4E51 /* connectivity_restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = connectivity_restraint.readme; sourceTree = "<group>"; };
++		931FDDE70F013D1C005F4E51 /* cover_particles.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = cover_particles.py; sourceTree = "<group>"; };
++		931FDDE80F013D1C005F4E51 /* cover_particles.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = cover_particles.readme; sourceTree = "<group>"; };
++		931FDDE90F013D1C005F4E51 /* molecular_hierarchy.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = molecular_hierarchy.py; sourceTree = "<group>"; };
++		931FDDEA0F013D1C005F4E51 /* molecular_hierarchy.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = molecular_hierarchy.readme; sourceTree = "<group>"; };
++		931FDDEB0F013D1C005F4E51 /* nonbonded_interactions.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = nonbonded_interactions.py; sourceTree = "<group>"; };
++		931FDDEC0F013D1C005F4E51 /* nonbonded_interactions.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = nonbonded_interactions.readme; sourceTree = "<group>"; };
++		931FDDED0F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
++		931FDDEE0F013D1C005F4E51 /* restrain_diameter.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = restrain_diameter.py; sourceTree = "<group>"; };
++		931FDDEF0F013D1C005F4E51 /* restrain_diameter.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = restrain_diameter.readme; sourceTree = "<group>"; };
++		931FDDF00F013D1C005F4E51 /* single_protein.pdb */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = single_protein.pdb; sourceTree = "<group>"; };
++		931FDDF10F013D1C005F4E51 /* xyzdecorator.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = xyzdecorator.py; sourceTree = "<group>"; };
++		931FDDF20F013D1C005F4E51 /* xyzdecorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = xyzdecorator.readme; sourceTree = "<group>"; };
++		931FDDF30F013D1C005F4E51 /* xyzrdecorator.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = xyzrdecorator.py; sourceTree = "<group>"; };
++		931FDDF40F013D1C005F4E51 /* xyzrdecorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = xyzrdecorator.readme; sourceTree = "<group>"; };
++		931FDDF60F013D1C005F4E51 /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
++		931FDE1E0F019265005F4E51 /* RangeSearchScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RangeSearchScoreState.h; sourceTree = "<group>"; };
+ 		935E0D610EFDAACD00CF1201 /* core.dox */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = core.dox; sourceTree = "<group>"; };
+ 		935E0D630EFDAACD00CF1201 /* AllNonbondedListScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AllNonbondedListScoreState.h; sourceTree = "<group>"; };
+ 		935E0D640EFDAACD00CF1201 /* AllPairsPairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AllPairsPairContainer.h; sourceTree = "<group>"; };
+@@ -71,7 +121,6 @@
+ 		935E0DA00EFDAACD00CF1201 /* ListPairContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ListPairContainer.h; sourceTree = "<group>"; };
+ 		935E0DA10EFDAACD00CF1201 /* ListSingletonContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ListSingletonContainer.h; sourceTree = "<group>"; };
+ 		935E0DA20EFDAACD00CF1201 /* macros.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = macros.h; sourceTree = "<group>"; };
+-		935E0DA30EFDAACD00CF1201 /* Matrix3D.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Matrix3D.h; sourceTree = "<group>"; };
+ 		935E0DA40EFDAACD00CF1201 /* MaxChangeScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaxChangeScoreState.h; sourceTree = "<group>"; };
+ 		935E0DA50EFDAACD00CF1201 /* MaximumChangeScoreState.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaximumChangeScoreState.h; sourceTree = "<group>"; };
+ 		935E0DA60EFDAACD00CF1201 /* MaximumPairScoreRestraint.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MaximumPairScoreRestraint.h; sourceTree = "<group>"; };
+@@ -172,7 +221,6 @@
+ 		935E0E080EFDAACE00CF1201 /* SConscript */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = SConscript; sourceTree = "<group>"; };
+ 		935E0E090EFDAACE00CF1201 /* ListPairContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListPairContainer.cpp; sourceTree = "<group>"; };
+ 		935E0E0A0EFDAACE00CF1201 /* ListSingletonContainer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ListSingletonContainer.cpp; sourceTree = "<group>"; };
+-		935E0E0B0EFDAACE00CF1201 /* Matrix3D.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Matrix3D.cpp; sourceTree = "<group>"; };
+ 		935E0E0C0EFDAACE00CF1201 /* MaxChangeScoreState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaxChangeScoreState.cpp; sourceTree = "<group>"; };
+ 		935E0E0D0EFDAACE00CF1201 /* MaximumChangeScoreState.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaximumChangeScoreState.cpp; sourceTree = "<group>"; };
+ 		935E0E0E0EFDAACE00CF1201 /* MaximumPairScoreRestraint.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MaximumPairScoreRestraint.cpp; sourceTree = "<group>"; };
+@@ -677,12 +725,21 @@
+ 		935E10720EFDAAD000CF1201 /* symlinks.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = symlinks.py; sourceTree = "<group>"; };
+ 		935E10730EFDAAD000CF1201 /* symlinks.pyc */ = {isa = PBXFileReference; lastKnownFileType = file; path = symlinks.pyc; sourceTree = "<group>"; };
+ 		935E10740EFDAAD000CF1201 /* valgrind-python.supp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "valgrind-python.supp"; sourceTree = "<group>"; };
++		937CBE5D0F07CEBD00A5C07E /* custom_hierarchy.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = custom_hierarchy.py; sourceTree = "<group>"; };
++		937CBE5E0F07CEBD00A5C07E /* custom_hierarchy.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = custom_hierarchy.readme; sourceTree = "<group>"; };
++		937CBE610F07D52400A5C07E /* log_internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = log_internal.h; sourceTree = "<group>"; };
++		937CBE6D0F07F77F00A5C07E /* decorator.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = decorator.cpp; sourceTree = "<group>"; };
++		937CBE6E0F07F77F00A5C07E /* decorator.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = decorator.readme; sourceTree = "<group>"; };
++		937CBE6F0F07F77F00A5C07E /* README */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = README; sourceTree = "<group>"; };
++		937CBE700F07F77F00A5C07E /* restraint.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = restraint.cpp; sourceTree = "<group>"; };
++		937CBE710F07F77F00A5C07E /* restraint.readme */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = restraint.readme; sourceTree = "<group>"; };
+ /* End PBXFileReference section */
+ 
+ /* Begin PBXGroup section */
+ 		08FB7794FE84155DC02AAC07 /* xcode */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				931FDDCB0F013CE4005F4E51 /* doc */,
+ 				935E0D5E0EFDAACD00CF1201 /* modules */,
+ 				935E0FA00EFDAACF00CF1201 /* bin */,
+ 				935E0FA30EFDAACF00CF1201 /* kernel */,
+@@ -691,6 +748,89 @@
+ 			name = xcode;
+ 			sourceTree = "<group>";
+ 		};
++		931FDDCB0F013CE4005F4E51 /* doc */ = {
++			isa = PBXGroup;
++			children = (
++				931FDDCD0F013D1B005F4E51 /* examples */,
++			);
++			name = doc;
++			sourceTree = "<group>";
++		};
++		931FDDCD0F013D1B005F4E51 /* examples */ = {
++			isa = PBXGroup;
++			children = (
++				937CBE6C0F07F77F00A5C07E /* implementation */,
++				931FDDCE0F013D1C005F4E51 /* chain.py */,
++				931FDDCF0F013D1C005F4E51 /* chain.readme */,
++				931FDDD00F013D1C005F4E51 /* fragments */,
++				931FDDDE0F013D1C005F4E51 /* README */,
++				931FDDDF0F013D1C005F4E51 /* SConscript */,
++				931FDDE00F013D1C005F4E51 /* simple_examples */,
++				931FDDF50F013D1C005F4E51 /* using_experimental_data */,
++			);
++			name = examples;
++			path = doc/examples;
++			sourceTree = "<group>";
++		};
++		931FDDD00F013D1C005F4E51 /* fragments */ = {
++			isa = PBXGroup;
++			children = (
++				93058A1D0F16DE2500ED1094 /* navigating_a_protein.py */,
++				93058A1E0F16DE2500ED1094 /* navigating_a_protein.readme */,
++				937CBE5D0F07CEBD00A5C07E /* custom_hierarchy.py */,
++				937CBE5E0F07CEBD00A5C07E /* custom_hierarchy.readme */,
++				931FDDD10F013D1C005F4E51 /* basic_optimization.py */,
++				931FDDD20F013D1C005F4E51 /* basic_optimization.readme */,
++				931FDDD30F013D1C005F4E51 /* excluded_volume.py */,
++				931FDDD40F013D1C005F4E51 /* excluded_volume.readme */,
++				931FDDD50F013D1C005F4E51 /* load_protein_restrain_bonds.py */,
++				931FDDD60F013D1C005F4E51 /* load_protein_restrain_bonds.readme */,
++				931FDDD70F013D1C005F4E51 /* pair_restraint.py */,
++				931FDDD80F013D1C005F4E51 /* pair_restraint.readme */,
++				931FDDD90F013D1C005F4E51 /* read_write.py */,
++				931FDDDA0F013D1C005F4E51 /* read_write.readme */,
++				931FDDDB0F013D1C005F4E51 /* README */,
++				931FDDDC0F013D1C005F4E51 /* setup.py */,
++				931FDDDD0F013D1C005F4E51 /* setup.readme */,
++			);
++			path = fragments;
++			sourceTree = "<group>";
++		};
++		931FDDE00F013D1C005F4E51 /* simple_examples */ = {
++			isa = PBXGroup;
++			children = (
++				931FDDE10F013D1C005F4E51 /* bipartite_nonbonded_interactions.py */,
++				931FDDE20F013D1C005F4E51 /* bipartite_nonbonded_interactions.readme */,
++				931FDDE30F013D1C005F4E51 /* conditional_restraint.py */,
++				931FDDE40F013D1C005F4E51 /* conditional_restraint.readme */,
++				931FDDE50F013D1C005F4E51 /* connectivity_restraint.py */,
++				931FDDE60F013D1C005F4E51 /* connectivity_restraint.readme */,
++				931FDDE70F013D1C005F4E51 /* cover_particles.py */,
++				931FDDE80F013D1C005F4E51 /* cover_particles.readme */,
++				931FDDE90F013D1C005F4E51 /* molecular_hierarchy.py */,
++				931FDDEA0F013D1C005F4E51 /* molecular_hierarchy.readme */,
++				931FDDEB0F013D1C005F4E51 /* nonbonded_interactions.py */,
++				931FDDEC0F013D1C005F4E51 /* nonbonded_interactions.readme */,
++				931FDDED0F013D1C005F4E51 /* README */,
++				931FDDEE0F013D1C005F4E51 /* restrain_diameter.py */,
++				931FDDEF0F013D1C005F4E51 /* restrain_diameter.readme */,
++				931FDDF00F013D1C005F4E51 /* single_protein.pdb */,
++				931FDDF10F013D1C005F4E51 /* xyzdecorator.py */,
++				931FDDF20F013D1C005F4E51 /* xyzdecorator.readme */,
++				931FDDF30F013D1C005F4E51 /* xyzrdecorator.py */,
++				931FDDF40F013D1C005F4E51 /* xyzrdecorator.readme */,
++			);
++			path = simple_examples;
++			sourceTree = "<group>";
++		};
++		931FDDF50F013D1C005F4E51 /* using_experimental_data */ = {
++			isa = PBXGroup;
++			children = (
++				931FDDF60F013D1C005F4E51 /* README */,
++			);
++			path = using_experimental_data;
++			sourceTree = "<group>";
++		};
+ 		935E0D5E0EFDAACD00CF1201 /* modules */ = {
+ 			isa = PBXGroup;
+ 			children = (
+@@ -731,6 +871,7 @@
+ 		935E0D620EFDAACD00CF1201 /* include */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				93058A120F16D25900ED1094 /* TruncatedHarmonic.h */,
+ 				935E0D630EFDAACD00CF1201 /* AllNonbondedListScoreState.h */,
+ 				935E0D640EFDAACD00CF1201 /* AllPairsPairContainer.h */,
+ 				935E0D650EFDAACD00CF1201 /* AngleRestraint.h */,
+@@ -781,7 +922,6 @@
+ 				935E0DA00EFDAACD00CF1201 /* ListPairContainer.h */,
+ 				935E0DA10EFDAACD00CF1201 /* ListSingletonContainer.h */,
+ 				935E0DA20EFDAACD00CF1201 /* macros.h */,
+-				935E0DA30EFDAACD00CF1201 /* Matrix3D.h */,
+ 				935E0DA40EFDAACD00CF1201 /* MaxChangeScoreState.h */,
+ 				935E0DA50EFDAACD00CF1201 /* MaximumChangeScoreState.h */,
+ 				935E0DA60EFDAACD00CF1201 /* MaximumPairScoreRestraint.h */,
+@@ -837,6 +977,7 @@
+ 		935E0D900EFDAACD00CF1201 /* internal */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				93058A0F0F16B5D700ED1094 /* truncated_harmonic.h */,
+ 				935E0D910EFDAACD00CF1201 /* ArrayOnAttributesHelper.h */,
+ 				935E0D920EFDAACD00CF1201 /* bbox_nbl_helpers.h */,
+ 				935E0D930EFDAACD00CF1201 /* bond_helpers.h */,
+@@ -912,7 +1053,6 @@
+ 				935E0E030EFDAACE00CF1201 /* internal */,
+ 				935E0E090EFDAACE00CF1201 /* ListPairContainer.cpp */,
+ 				935E0E0A0EFDAACE00CF1201 /* ListSingletonContainer.cpp */,
+-				935E0E0B0EFDAACE00CF1201 /* Matrix3D.cpp */,
+ 				935E0E0C0EFDAACE00CF1201 /* MaxChangeScoreState.cpp */,
+ 				935E0E0D0EFDAACE00CF1201 /* MaximumChangeScoreState.cpp */,
+ 				935E0E0E0EFDAACE00CF1201 /* MaximumPairScoreRestraint.cpp */,
+@@ -1157,6 +1297,7 @@
+ 		935E0EA00EFDAACE00CF1201 /* unary_functions */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				93058A180F16D50F00ED1094 /* test_truncated_harmonic.py */,
+ 				935E0EA10EFDAACE00CF1201 /* test_cosine.py */,
+ 				935E0EA20EFDAACE00CF1201 /* test_cosine.pyc */,
+ 				935E0EA30EFDAACE00CF1201 /* test_harmonic.py */,
+@@ -1690,6 +1831,7 @@
+ 				935E0F750EFDAACF00CF1201 /* IntAttributeMapScoreState.h */,
+ 				935E0F760EFDAACF00CF1201 /* internal */,
+ 				935E0F790EFDAACF00CF1201 /* SConscript */,
++				931FDE1E0F019265005F4E51 /* RangeSearchScoreState.h */,
+ 			);
+ 			path = include;
+ 			sourceTree = "<group>";
+@@ -2001,6 +2143,9 @@
+ 		935E0FF30EFDAACF00CF1201 /* include */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				931959990F0AE5910077D3C7 /* PairContainer.h */,
++				9319599A0F0AE5910077D3C7 /* PairModifier.h */,
++				9319599B0F0AE5910077D3C7 /* SingletonModifier.h */,
+ 				935E0FF40EFDAACF00CF1201 /* base_types.h */,
+ 				935E0FF50EFDAACF00CF1201 /* config.h */,
+ 				935E0FF60EFDAACF00CF1201 /* container_macros.h */,
+@@ -2051,6 +2196,7 @@
+ 				935E10050EFDAACF00CF1201 /* units.h */,
+ 				935E10060EFDAACF00CF1201 /* utility.h */,
+ 				935E10070EFDAACF00CF1201 /* Vector.h */,
++				937CBE610F07D52400A5C07E /* log_internal.h */,
+ 			);
+ 			path = internal;
+ 			sourceTree = "<group>";
+@@ -2084,6 +2230,9 @@
+ 		935E102D0EFDAACF00CF1201 /* src */ = {
+ 			isa = PBXGroup;
+ 			children = (
++				9319599C0F0AE5B70077D3C7 /* PairContainer.cpp */,
++				9319599D0F0AE5B70077D3C7 /* PairModifier.cpp */,
++				9319599E0F0AE5B70077D3C7 /* SingletonContainer.cpp */,
+ 				935E102E0EFDAACF00CF1201 /* base_types.cpp */,
+ 				935E102F0EFDAACF00CF1201 /* exception.cpp */,
+ 				935E10300EFDAACF00CF1201 /* internal */,
+@@ -2197,6 +2346,18 @@
+ 			path = subversion;
+ 			sourceTree = "<group>";
+ 		};
++		937CBE6C0F07F77F00A5C07E /* implementation */ = {
++			isa = PBXGroup;
++			children = (
++				937CBE6D0F07F77F00A5C07E /* decorator.cpp */,
++				937CBE6E0F07F77F00A5C07E /* decorator.readme */,
++				937CBE6F0F07F77F00A5C07E /* README */,
++				937CBE700F07F77F00A5C07E /* restraint.cpp */,
++				937CBE710F07F77F00A5C07E /* restraint.readme */,
++			);
++			path = implementation;
++			sourceTree = "<group>";
++		};
+ /* End PBXGroup section */
+ 
+ /* Begin PBXLegacyTarget section */
+@@ -2215,7 +2376,7 @@
+ 		};
+ 		9311D7EA0ECCDC1600EEFF45 /* test */ = {
+ 			isa = PBXLegacyTarget;
+-			buildArgumentsString = "$(ACTION) -j 2 test";
++			buildArgumentsString = "$(ACTION) -j 2 test examples";
+ 			buildConfigurationList = 9311D7EB0ECCDC1600EEFF45 /* Build configuration list for PBXLegacyTarget "test" */;
+ 			buildPhases = (
+ 			);
+@@ -2373,7 +2534,7 @@
+ 				GCC_OPTIMIZATION_LEVEL = 0;
+ 				OTHER_CFLAGS = "";
+ 				OTHER_LDFLAGS = "";
+-				PRODUCT_NAME = test;
++				PRODUCT_NAME = "test doc/examples";
+ 			};
+ 			name = Debug;
+ 		};
+Index: doc/doxygen/doxygen.conf.in
 ===================================================================
---- examples/implementation/unary_function.readme	(revision 1186)
-+++ examples/implementation/unary_function.readme	(working copy)
-@@ -1,2 +0,0 @@
--Implementing a UnaryFunction is simply the matter of writing code to compute
--the function and its derivative.
-\ No newline at end of file
-Index: examples/implementation/decorator.cpp
-===================================================================
---- examples/implementation/decorator.cpp	(revision 1186)
-+++ examples/implementation/decorator.cpp	(working copy)
-@@ -1,88 +0,0 @@
--/**
-- *  \file MyDecorator.h     \brief Add a name to a particle.
-- *
-- *  Copyright 2007-8 Sali Lab. All rights reserved.
-- *
-- */
--
--#ifndef IMPMODULENAME_MY_DECORATOR_H
--#define IMPMODULENAME_MY_DECORATOR_H
--
--#include "config.h"
--
--#include <IMP/Particle.h>
--#include <IMP/Model.h>
--#include <IMP/DecoratorBase.h>
--
--IMPMODULENAME_BEGIN_NAMESPACE
--
--//! A simple decorator which adds a name to a particle.
--/** */
--class IMPCOREEXPORT MyDecorator: public DecoratorBase
--{
--  static StringKey get_name_key();
--
--public:
--  //! Create a decorator from a named particle without error checking.
--  MyDecorator(Particle *p);
--  //! Create a decorator from a named particle
--  static MyDecorator cast(Particle *p) {
--    IMP_assert( p->has_attribute(get_name_key()), "Particle " << p->get_index()
--               << " missing required attributes.",
--               InvalidStateException);
--    return MyDecorator(p);
--  }
--
--  //! Add a name to the particle
--  static MyDecorator create(Particle *p, std::string name) {
--    p->add_attribute(get_name_key(), name);
--    MyDecorator ret(p);
--    return ret;
--  }
--
--  //! Set the name of the particle
--  void set_name(std::string name) {
--    get_particle()->set_attribute(get_name_key(), name);
--  }
--
--  //! Get the name of the particle
--  void get_name(std::string name) {
--    get_particle()->get_attribute(get_name_key());
--  }
--
--  // Print out information about the particle
--  void show(std::ostream &out) const {
--    out << "Particle named " << get_name() << std::endl;
--  }
--};
--
--// Make it so the C++ operator<< can be used.
--IMP_OUTPUT_OPERATOR(MyDecorator);
--
--IMPMODULENAME_END_NAMESPACE
--
--#endif  /* IMPMODULENAME_MY_DECORATOR_H */
--
--
--/**
-- *  \file MyDecorator.cpp   \brief Add a name to a particle.
-- *
-- *  Copyright 2007-8 Sali Lab. All rights reserved.
-- *
-- */
--
--#include <IMP/modulename/MyDecorator.h>
--
--IMPCORE_BEGIN_NAMESPACE
--
--MyDecorator::MyDecorator(Particle *p): DecoratorBase(p) {
--}
--
--StringKey MyDecorator::get_name_key() {
--  /* the compiler will make sure this is initialized the first time the
--   method is called. */
--  static StringKey mykey("my name");
--  return mykey;
--}
--
--IMPCORE_END_NAMESPACE
-Index: examples/implementation/unary_function.cpp
-===================================================================
---- examples/implementation/unary_function.cpp	(revision 1186)
-+++ examples/implementation/unary_function.cpp	(working copy)
-@@ -1,46 +0,0 @@
--/**
-- *  \file Harmonic.h    \brief Harmonic function.
-- *
-- *  Copyright 2007-8 Sali Lab. All rights reserved.
-- */
--
--#ifndef IMPCORE_HARMONIC_H
--#define IMPCORE_HARMONIC_H
--
--#include "config.h"
--#include <IMP/UnaryFunction.h>
--#include <IMP/utility.h>
--
--IMPCORE_BEGIN_NAMESPACE
--
--//! Harmonic function (symmetric about the mean)
--class Harmonic : public UnaryFunction
--{
--public:
--  /** Create with the given center and spring constant */
--  Harmonic(Float center, Float k) : center_(center), k_(k) {}
--
--  virtual ~Harmonic() {}
--
--  virtual Float evaluate(Float feature) const {
--    return .5*k*square(feature-center_);
--  }
--
--  virtual FloatPair evaluate_with_derivative(Float feature) const {
--    Float e = (feature - center_);
--    Float deriv = k_ * e;
--    return FloatPair(evaluate(feature), deriv);
--  }
--
--  void show(std::ostream &out=std::cout) const {
--    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
--  }
--
--private:
--  Float center_;
--  Float k_;
--};
--
--IMPCORE_END_NAMESPACE
--
--#endif  /* IMPCORE_HARMONIC_H */
-Index: examples/implementation/restraint.readme
-===================================================================
---- examples/implementation/restraint.readme	(revision 1186)
-+++ examples/implementation/restraint.readme	(working copy)
-@@ -1 +0,0 @@
--Implement a simple restraint which applies a PairScore to each ParticlePair in a ParticleContainer.
-\ No newline at end of file
-Index: examples/implementation/restraint.cpp
-===================================================================
---- examples/implementation/restraint.cpp	(revision 1186)
-+++ examples/implementation/restraint.cpp	(working copy)
-@@ -1,95 +0,0 @@
--/**
-- *  \file MyRestraint.h   \brief A restraint on a list of particle pairs.
-- *
-- *  Copyright 2007-8 Sali Lab. All rights reserved.
-- *
-- */
--
--#ifndef IMPMODULENAME_MY_RESTRAINT_H
--#define IMPMODULENAME_MY_RESTRAINT_H
--
--#include "config.h"
--#include "internal/modulename_version_info.h"
--#include <IMP/SingletonScore.h>
--#include <IMP/Restraint.h>
--#include <IMP/PairContainer.h>
--
--IMPMODULENAME_BEGIN_NAMESPACE
--
--//! Apply a PairScore to a list of particle pairs
--/**
-- */
--class IMPMODULENAMEEXPORT MyRestraint : public Restraint
--{
--  Pointer<PairContainer> pc_;
--  Pointer<PairScore> f_;
--public:
--  //! Create the restraint.
--  MyRestraint(PairScore* score_func,
--              PairContainer *pc);
--  virtual ~MyRestraint() {}
--
--  IMP_RESTRAINT(internal::modulename_version_info)
--
--  ParticlesList get_interacting_particles() const;
--};
--
--IMPMODULENAME_END_NAMESPACE
--
--#endif  /* IMPCORE_DISTANCE_RESTRAINT_H */
--
--/**
-- *  \file MyRestraint.cpp \brief Restrain a list of particle pairs.
-- *
-- *  Copyright 2007-8 Sali Lab. All rights reserved.
-- *
-- */
--
--#include <IMP/modulename/MyRestraint.h>
--#include <IMP/log.h>
--
--IMPMODULENAME_BEGIN_NAMESPACE
--
--MyRestraint::MyRestraint(PairScore* score_func,
--                         PairContainer *pc) : pc_(pc),
--                                           f_(score_func) {}
--
--PairsRestraint::~PairsRestraint() {}
--
--Float PairsRestraint::evaluate(DerivativeAccumulator *accum)
--{
--  Float score=0;
--  for (PairContainer::ParticlePairIterator
--       it= pc_->particle_pairs_begin();
--       it != pc_->particle_pairs_end(); ++it) {
--    score += f_->evaluate(it->first, it->second, accum);
--  }
--
--  return score;
--}
--
--// the interacting sets are pairs
--ParticlesList PairsRestraint::get_interacting_particles() const
--{
--  ParticlesList ret;
--  for (PairContainer::ParticlePairIterator it
--       = pc_->particle_pairs_begin();
--       it != pc_->particle_pairs_end(); ++it) {
--    Particles s;
--    s.push_back(it->first);
--    s.push_back(it->second);
--    ret.push_back(s);
--  }
--  return ret;
--}
--
--void PairsRestraint::show(std::ostream& out) const
--{
--  out << "ContainerRestraint with score function ";
--  ss_->show(out);
--  out << " and container ";
--  pc_->show(out);
--  out << std::endl;
--}
--
--IMPMODULENAME_END_NAMESPACE
-Index: examples/implementation/README
-===================================================================
---- examples/implementation/README	(revision 1186)
-+++ examples/implementation/README	(working copy)
-@@ -1,2 +0,0 @@
--These C++ examples show how to implement instances of Restraints, ScoreStates, Decorators
--and other basic types that should not be implemented in python.
-\ No newline at end of file
-Index: examples/implementation/decorator.readme
-===================================================================
---- examples/implementation/decorator.readme	(revision 1186)
-+++ examples/implementation/decorator.readme	(working copy)
-@@ -1 +0,0 @@
--This decorator allows you to add and control a name in a Particle.
-\ No newline at end of file
-Index: examples/SConscript
-===================================================================
---- examples/SConscript	(revision 1186)
-+++ examples/SConscript	(working copy)
-@@ -7,24 +7,28 @@
- example_py = [x for x in Glob("*.py") + Glob("*/*.py") \
-               if 'fragments' not in x.path]
+--- doc/doxygen/doxygen.conf.in	(revision 1186)
++++ doc/doxygen/doxygen.conf.in	(working copy)
+@@ -560,6 +560,7 @@
+ # with spaces.
  
-+example_cpp = [x for x in Glob("*.cpp") + Glob("*/*.cpp") \
-+              if 'fragments' not in x.path]
-+
-+
- e = env.Clone()
+ INPUT                  = ../../build/include \
++                         ../../modules/examples/src \
+                          ../../modules/@ALL_MODULES@/doc \
+                          ../../kernel/doc \
+                          .
+@@ -630,7 +631,9 @@
+ # directories that contain example code fragments that are included (see 
+ # the \include command).
  
- # Custom builder to run unit tests:
- def builder_unit_test(target, source, env):
-     bin = source[0].abspath
-     for src in source[1:]:
--        (dir, script) = os.path.split(src.abspath)
--        app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
--        if env.Execute(app) != 0:
--            print "examples FAILED"
--            return 1
--    file(str(target[0]), 'w').write('PASSED\n')
-+            (dir, script) = os.path.split(src.abspath)
-+            app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
-+            if env.Execute(app) != 0:
-+                print "examples FAILED"
-+                return 1
-+            file(str(target[0]), 'w').write('PASSED\n')
+-EXAMPLE_PATH           = ../../examples
++EXAMPLE_PATH           = ../../examples \
++                         ../../modules/examples/include \
++                         ../../modules/examples/src
  
- e.Append(BUILDERS = {'Test': Builder(action=builder_unit_test,
-                                      source_scanner=pyscanner.PythonScanner)})
+ # If the value of the EXAMPLE_PATH tag contains directories, you can use the 
+ # EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
+@@ -638,6 +641,7 @@
+ # blank all files are included.
  
- # Test all scripts:
--test = e.Test("examples.passed", bin + example_py)
-+test = e.Test("examples.passed", bin + example_py+example_cpp)
- e.Alias("test", test)
- e.AlwaysBuild("examples.passed")
+ EXAMPLE_PATTERNS       = *.py \
++                         *.h \
+                          *.cpp
  
-Index: examples/README
-===================================================================
---- examples/README	(revision 1186)
-+++ examples/README	(working copy)
-@@ -2,4 +2,4 @@
- - \ref simple_examples "Simple examples", which demonstrate a single class or decorator
- - \ref using_experimental_data "Experimental examples" which demonstrate a variety of classes working together to go from experimental data to a structure
- - \ref fragments "Fragments" which are little bits of code that illustrate using a particular piece of \imp but can't be run on their own.
--- \ref implementation "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp.
-\ No newline at end of file
-+- "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp. These can be found in the IMP::examples module.
-\ No newline at end of file
+ # If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
+@@ -698,7 +702,7 @@
+ # doxygen to hide any special comment blocks from generated source code 
+ # fragments. Normal C and C++ comments will always remain visible.
+ 
+-STRIP_CODE_COMMENTS    = YES
++STRIP_CODE_COMMENTS    = NO
+ 
+ # If the REFERENCED_BY_RELATION tag is set to YES 
+ # then for each documented function all documented 
Index: bin/SConscript
===================================================================
--- bin/SConscript	(revision 1186)
+++ bin/SConscript	(working copy)
@@ -29,4 +29,7 @@
                       env.Value(env['MODELLER_MODPY']),
                       env.Value(env['PATHSEP']),
                       env.Value(env['PATHSEP'].join(env['lib']))])
+
+env.AlwaysBuild("imppy.sh")
+
 Return('bin')
Index: modules/em/test/run-all-tests.py
===================================================================
--- modules/em/test/run-all-tests.py	(revision 1186)
+++ modules/em/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/em/include/EMFitRestraint.h
===================================================================
--- modules/em/include/EMFitRestraint.h	(revision 1186)
+++ modules/em/include/EMFitRestraint.h	(working copy)
@@ -53,7 +53,6 @@
   IMP_RESTRAINT(internal::em_version_info)
 
 private:
-
   DensityMap *target_dens_map_;
   SampledDensityMap *model_dens_map_;
   // reference to the IMP environment
Index: modules/modeller/test/run-all-tests.py
===================================================================
--- modules/modeller/test/run-all-tests.py	(revision 1186)
+++ modules/modeller/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/domino/test/run-all-tests.py
===================================================================
--- modules/domino/test/run-all-tests.py	(revision 1186)
+++ modules/domino/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/SConscript
===================================================================
--- modules/SConscript	(revision 1186)
+++ modules/SConscript	(working copy)
@@ -20,3 +20,6 @@
 
 env.IMPModule('search', author='Daniel Russel', version='SVN',
               description='Build search structures over particles.')
+
+env.IMPModule('examples', author='somebody', version='SVN',
+              description='A private module.')
\ No newline at end of file
Index: modules/core/test/run-all-tests.py
===================================================================
--- modules/core/test/run-all-tests.py	(revision 1186)
+++ modules/core/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/misc/test/run-all-tests.py
===================================================================
--- modules/misc/test/run-all-tests.py	(revision 1186)
+++ modules/misc/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/saxs/test/run-all-tests.py
===================================================================
--- modules/saxs/test/run-all-tests.py	(revision 1186)
+++ modules/saxs/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/examples/test/run-all-tests.py
===================================================================
--- modules/examples/test/run-all-tests.py	(revision 0)
+++ modules/examples/test/run-all-tests.py	(revision 0)
@@ -0,0 +1,26 @@
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/examples/test/SConscript
===================================================================
--- modules/examples/test/SConscript	(revision 0)
+++ modules/examples/test/SConscript	(revision 0)
@@ -0,0 +1,3 @@
+Import('env')
+
+env.IMPModuleTest("test.passed", "run-all-tests.py")
Index: modules/examples/test/test_python.py
===================================================================
--- modules/examples/test/test_python.py	(revision 0)
+++ modules/examples/test/test_python.py	(revision 0)
@@ -0,0 +1,21 @@
+import unittest
+import IMP
+import IMP.test
+import IMP.examples
+import IMP.examples.randomize
+import IMP.core
+
+
+class GenericTest(IMP.test.TestCase):
+    """Test the python code"""
+
+    def test_python(self):
+        """Checking module python code"""
+        m = IMP.Model()
+        p= IMP.Particle(m)
+        d= IMP.core.XYZDecorator.create(p)
+        IMP.examples.randomize.randomize_particle(p)
+        self.assert_(IMP.examples.get_is_xyz_particle(p))
+
+if __name__ == '__main__':
+    unittest.main()
Index: modules/examples/test/test.passed
===================================================================
--- modules/examples/test/test.passed	(revision 0)
+++ modules/examples/test/test.passed	(revision 0)
@@ -0,0 +1 @@
+PASSED
Index: modules/examples/include/ExampleDecorator.h
===================================================================
--- modules/examples/include/ExampleDecorator.h	(revision 0)
+++ modules/examples/include/ExampleDecorator.h	(revision 0)
@@ -0,0 +1,67 @@
+/**
+ *  \file ExampleDecorator.h     \brief Add a name to a particle.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#ifndef IMPEXAMPLES_EXAMPLE_DECORATOR_H
+#define IMPEXAMPLES_EXAMPLE_DECORATOR_H
+
+#include "config.h"
+
+#include <IMP/Particle.h>
+#include <IMP/Model.h>
+#include <IMP/DecoratorBase.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! A simple decorator which adds a name to a particle.
+/** The source code is as follows:
+    \include ExampleDecorator.h
+    \include ExampleDecorator.cpp
+*/
+class IMPEXAMPLESEXPORT ExampleDecorator: public DecoratorBase
+{
+  static StringKey get_name_key();
+
+public:
+  //! Create a decorator from a named particle without error checking.
+  ExampleDecorator(Particle *p);
+  //! Create a decorator from a named particle
+  static ExampleDecorator cast(Particle *p) {
+    IMP_check( p->has_attribute(get_name_key()), "Particle " << p->get_index()
+               << " missing required attributes.",
+               InvalidStateException);
+    return ExampleDecorator(p);
+  }
+
+  //! Add a name to the particle
+  static ExampleDecorator create(Particle *p, std::string name) {
+    p->add_attribute(get_name_key(), name);
+    ExampleDecorator ret(p);
+    return ret;
+  }
+
+  //! Set the name of the particle
+  void set_name(std::string name) {
+    get_particle()->set_value(get_name_key(), name);
+  }
+
+  //! Get the name of the particle
+  std::string get_name() const {
+    return get_particle()->get_value(get_name_key());
+  }
+
+  // Print out information about the particle
+  void show(std::ostream &out) const {
+    out << "Particle named " << get_name() << std::endl;
+  }
+};
+
+// Make it so the C++ operator<< can be used.
+IMP_OUTPUT_OPERATOR(ExampleDecorator);
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_DECORATOR_H */
Index: modules/examples/include/ExampleUnaryFunction.h
===================================================================
--- modules/examples/include/ExampleUnaryFunction.h	(revision 0)
+++ modules/examples/include/ExampleUnaryFunction.h	(revision 0)
@@ -0,0 +1,53 @@
+/**
+ *  \file ExampleUnaryFunction.h
+ *  \brief A simple unary function.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+
+#ifndef IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
+#define IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H
+
+#include "config.h"
+#include <IMP/UnaryFunction.h>
+#include <IMP/utility.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! A simple unary function
+/** This one happens to be a harmonic.
+    The source code is as follows:
+    \include ExampleUnaryFunction.h
+ */
+class ExampleUnaryFunction : public UnaryFunction
+{
+public:
+  /** Create with the given center and spring constant */
+  ExampleUnaryFunction(Float center, Float k) : center_(center), k_(k) {}
+
+  virtual ~ExampleUnaryFunction() {}
+
+  virtual Float evaluate(Float feature) const {
+    return .5*k_*square(feature-center_);
+  }
+
+  virtual FloatPair evaluate_with_derivative(Float feature) const {
+    Float e = (feature - center_);
+    Float deriv = k_ * e;
+    return FloatPair(evaluate(feature), deriv);
+  }
+
+  void show(std::ostream &out=std::cout) const {
+    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
+  }
+
+private:
+  Float center_;
+  Float k_;
+};
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_UNARY_FUNCTION_H */
Index: modules/examples/include/SConscript
===================================================================
--- modules/examples/include/SConscript	(revision 0)
+++ modules/examples/include/SConscript	(revision 0)
@@ -0,0 +1,14 @@
+Import('env')
+
+files= []
+
+hs= Glob("*.h")
+shs= Glob("*/*.h")
+for h in hs+shs:
+    s= h.rstr()
+    if not s.startswith(".") and not s.endswith("config.h")\
+      and not s.endswith("examples.h") and not s.endswith("examples_version_info.h"):
+        files.append(s)
+
+# Install the include files:
+env.IMPHeaders(files)
Index: modules/examples/include/ExampleRestraint.h
===================================================================
--- modules/examples/include/ExampleRestraint.h	(revision 0)
+++ modules/examples/include/ExampleRestraint.h	(revision 0)
@@ -0,0 +1,46 @@
+/**
+ *  \file ExampleRestraint.h
+ *  \brief A restraint on a list of particle pairs.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#ifndef IMPEXAMPLES_EXAMPLE_RESTRAINT_H
+#define IMPEXAMPLES_EXAMPLE_RESTRAINT_H
+
+#include "config.h"
+#include "internal/examples_version_info.h"
+#include <IMP/SingletonScore.h>
+#include <IMP/Restraint.h>
+#include <IMP/core/PairContainer.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+//! Apply a PairScore to a list of particle pairs
+/** This restraint could be used, in conjunction with a
+    ClosePairsScoreState and a SphereDistancePairScore,
+    to prevent particles from interpenetrating.
+
+    The source code is as follows:
+    \include ExampleRestraint.h
+    \include ExampleRestraint.cpp
+ */
+class IMPEXAMPLESEXPORT ExampleRestraint : public Restraint
+{
+  Pointer<IMP::core::PairContainer> pc_;
+  Pointer<PairScore> f_;
+public:
+  //! Create the restraint.
+  ExampleRestraint(PairScore* score_func,
+                   IMP::core::PairContainer *pc);
+  virtual ~ExampleRestraint() {}
+
+  IMP_RESTRAINT(internal::examples_version_info)
+
+  ParticlesList get_interacting_particles() const;
+};
+
+IMPEXAMPLES_END_NAMESPACE
+
+#endif  /* IMPEXAMPLES_EXAMPLE_RESTRAINT_H */
Index: modules/examples/doc/examples.dox
===================================================================
--- modules/examples/doc/examples.dox	(revision 0)
+++ modules/examples/doc/examples.dox	(revision 0)
@@ -0,0 +1,11 @@
+/** \namespace IMP::examples
+\brief IMP.examples provides examples showing how to implement various types of objects and functionality. 
+
+<b>Overview:</b> IMP.examples provides examples showing how to implement things.
+
+<b>Authors:</b> Daniel Russel.
+
+<b>Publications:</b> IMP.examples is part of the main \imp distribution.
+
+<b>License:</b> IMP.examples is licensed under the BSD license.
+*/
\ No newline at end of file
Index: modules/examples/src/ExampleDecorator.cpp
===================================================================
--- modules/examples/src/ExampleDecorator.cpp	(revision 0)
+++ modules/examples/src/ExampleDecorator.cpp	(revision 0)
@@ -0,0 +1,22 @@
+/**
+ *  \file ExampleDecorator.cpp   \brief Add a name to a particle.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include <IMP/examples/ExampleDecorator.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+ExampleDecorator::ExampleDecorator(Particle *p): DecoratorBase(p) {
+}
+
+StringKey ExampleDecorator::get_name_key() {
+  /* the compiler will make sure this is initialized the first time the
+   method is called. */
+  static StringKey mykey("my name");
+  return mykey;
+}
+
+IMPEXAMPLES_END_NAMESPACE
Index: modules/examples/src/SConscript
===================================================================
--- modules/examples/src/SConscript	(revision 0)
+++ modules/examples/src/SConscript	(revision 0)
@@ -0,0 +1,12 @@
+Import('env')
+e = env.IMPSharedLibraryEnvironment()
+ns= Glob("*.cpp")+ Glob("*/*.cpp")
+
+files=[]
+for h in ns:
+    s= h.rstr()
+    if not s.startswith(".") and not s.endswith("examples_version_info.cpp"):
+        files.append(s)
+
+# Build and install the shared library:
+e.IMPSharedLibrary(files, install=True)
Index: modules/examples/src/ExampleRestraint.cpp
===================================================================
--- modules/examples/src/ExampleRestraint.cpp	(revision 0)
+++ modules/examples/src/ExampleRestraint.cpp	(revision 0)
@@ -0,0 +1,56 @@
+/**
+ *  \file ExampleRestraint.cpp \brief Restrain a list of particle pairs.
+ *
+ *  Copyright 2007-8 Sali Lab. All rights reserved.
+ *
+ */
+
+#include <IMP/examples/ExampleRestraint.h>
+#include <IMP/log.h>
+
+IMPEXAMPLES_BEGIN_NAMESPACE
+
+ExampleRestraint::ExampleRestraint(PairScore* score_func,
+                                   IMP::core::PairContainer *pc) : pc_(pc),
+                                          f_(score_func) {}
+
+
+
+Float ExampleRestraint::evaluate(DerivativeAccumulator *accum)
+{
+  Float score=0;
+  for (IMP::core::PairContainer::ParticlePairIterator
+       it= pc_->particle_pairs_begin();
+       it != pc_->particle_pairs_end(); ++it) {
+    score += f_->evaluate(it->first, it->second, accum);
+  }
+
+  return score;
+}
+
+/* Return a list of interacting sets. In this case it is pairs
+   of particles so all the sets are of size 2. */
+ParticlesList ExampleRestraint::get_interacting_particles() const
+{
+  ParticlesList ret;
+  for (IMP::core::PairContainer::ParticlePairIterator it
+       = pc_->particle_pairs_begin();
+       it != pc_->particle_pairs_end(); ++it) {
+    Particles s;
+    s.push_back(it->first);
+    s.push_back(it->second);
+    ret.push_back(s);
+  }
+  return ret;
+}
+
+void ExampleRestraint::show(std::ostream& out) const
+{
+  out << "PairsRestraint with score function ";
+  f_->show(out);
+  out << " and container ";
+  pc_->show(out);
+  out << std::endl;
+}
+
+IMPEXAMPLES_END_NAMESPACE
Index: modules/examples/SConscript
===================================================================
--- modules/examples/SConscript	(revision 0)
+++ modules/examples/SConscript	(revision 0)
@@ -0,0 +1,12 @@
+Import('env')
+Export('env')
+
+env.Append(LIBS=['imp_core'])
+env.validate()
+
+# Subdirectories:
+SConscript('src/SConscript')
+SConscript('include/SConscript')
+SConscript('pyext/SConscript')
+SConscript('test/SConscript')
+SConscript('bin/SConscript')
Index: modules/examples/bin/test.cpp
===================================================================
--- modules/examples/bin/test.cpp	(revision 0)
+++ modules/examples/bin/test.cpp	(revision 0)
@@ -0,0 +1,22 @@
+#include <IMP.h>
+#include <IMP/core.h>
+#include <IMP/examples/MyRestraint.h>
+
+using namespace IMP;
+int main(){
+  set_log_level(VERBOSE);
+  Pointer<Model> m(new Model());
+  Particle* p0= new Particle(m);
+  core::XYZDecorator d0= core::XYZDecorator::create(p0);
+  Particle* p1= new Particle(m);
+  core::XYZDecorator d1= core::XYZDecorator::create(p1);
+  core::DistancePairScore *dps
+    = new core::DistancePairScore(new core::Linear(0,1));
+  examples::MyRestraint *r= new examples::MyRestraint(dps, p0, p1);
+  d0.set_coordinates(Vector3D(0,0,0));
+  d1.set_coordinates(Vector3D(0,0,1));
+ 	
+  m->add_restraint(r);
+  IMP_assert(std::abs(m->evaluate(false) -1) < .01, "Out of range");
+  return 0;
+}
Index: modules/examples/bin/SConscript
===================================================================
--- modules/examples/bin/SConscript	(revision 0)
+++ modules/examples/bin/SConscript	(revision 0)
@@ -0,0 +1,14 @@
+import os
+import os.path
+
+Import('env')
+penv = env.Clone()
+penv.Prepend(LIBS=["imp_examples"])
+
+fs = Glob("*.cpp")
+
+all=[]
+for f in fs:
+    all.append(penv.Program(f.rstr()))
+
+Return('all')
Index: modules/examples/pyext/examples.i
===================================================================
--- modules/examples/pyext/examples.i	(revision 0)
+++ modules/examples/pyext/examples.i	(revision 0)
@@ -0,0 +1,37 @@
+%module(directors="1") "IMP.examples"
+
+%{
+#include "IMP.h"
+#include "IMP/examples.h"
+%}
+
+
+%include "kernel/pyext/IMP_macros.i"
+%include "kernel/pyext/IMP_exceptions.i"
+
+%include "examples_config.i"
+
+%include "std_vector.i"
+%include "std_string.i"
+%include "std_except.i"
+
+%pythoncode %{
+import IMP.core
+def get_is_xyz_particle(p):
+    """Return True if the particle is an IMP.core.XYZDecorator particle"""
+    return IMP.core.XYZDecorator.is_instance_of(p)
+%}
+
+/* Get definitions of kernel base classes (but do not wrap) */
+%import "kernel/pyext/IMP.i"
+
+namespace IMP {
+namespace examples {
+IMP_OWN_FIRST_SECOND_CONSTRUCTOR(Restraint)
+}
+}
+
+/* Wrap our own classes */
+%include "IMP/examples/ExampleRestraint.h"
+%include "IMP/examples/ExampleDecorator.h"
+%include "IMP/examples/ExampleUnaryFunction.h"
Index: modules/examples/pyext/SConscript
===================================================================
--- modules/examples/pyext/SConscript	(revision 0)
+++ modules/examples/pyext/SConscript	(revision 0)
@@ -0,0 +1,10 @@
+Import('env')
+
+e = env.IMPPythonExtensionEnvironment()
+
+e.IMPPythonExtension('examples.i')
+
+files = (Glob('examples/*.py'))
+
+# Install the Python files:
+env.IMPPython(files)
Index: modules/examples/pyext/examples/randomize.py
===================================================================
--- modules/examples/pyext/examples/randomize.py	(revision 0)
+++ modules/examples/pyext/examples/randomize.py	(revision 0)
@@ -0,0 +1,5 @@
+import IMP.core
+
+def randomize_particle(p):
+    d= IMP.core.XYZDecorator.cast(p)
+    d.set_coordinates(IMP.random_vector_in_unit_box())
Index: modules/examples/README
===================================================================
--- modules/examples/README	(revision 0)
+++ modules/examples/README	(revision 0)
@@ -0,0 +1,5 @@
+This is a basic module. Put your header files in a subdirectory of "include"
+your shared implementation in a subdirectory of "src" and any python
+implementation files in "pyext/examples". Any ".cpp" file in "bin"
+will be built into an executable linked against the library created from
+"src".
\ No newline at end of file
Index: examples/implementation/unary_function.readme
===================================================================
--- examples/implementation/unary_function.readme	(revision 1186)
+++ examples/implementation/unary_function.readme	(working copy)
@@ -1,2 +0,0 @@
-Implementing a UnaryFunction is simply the matter of writing code to compute
-the function and its derivative.
\ No newline at end of file
Index: examples/implementation/decorator.cpp
===================================================================
--- examples/implementation/decorator.cpp	(revision 1186)
+++ examples/implementation/decorator.cpp	(working copy)
@@ -1,88 +0,0 @@
-/**
- *  \file MyDecorator.h     \brief Add a name to a particle.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPMODULENAME_MY_DECORATOR_H
-#define IMPMODULENAME_MY_DECORATOR_H
-
-#include "config.h"
-
-#include <IMP/Particle.h>
-#include <IMP/Model.h>
-#include <IMP/DecoratorBase.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-//! A simple decorator which adds a name to a particle.
-/** */
-class IMPCOREEXPORT MyDecorator: public DecoratorBase
-{
-  static StringKey get_name_key();
-
-public:
-  //! Create a decorator from a named particle without error checking.
-  MyDecorator(Particle *p);
-  //! Create a decorator from a named particle
-  static MyDecorator cast(Particle *p) {
-    IMP_assert( p->has_attribute(get_name_key()), "Particle " << p->get_index()
-               << " missing required attributes.",
-               InvalidStateException);
-    return MyDecorator(p);
-  }
-
-  //! Add a name to the particle
-  static MyDecorator create(Particle *p, std::string name) {
-    p->add_attribute(get_name_key(), name);
-    MyDecorator ret(p);
-    return ret;
-  }
-
-  //! Set the name of the particle
-  void set_name(std::string name) {
-    get_particle()->set_attribute(get_name_key(), name);
-  }
-
-  //! Get the name of the particle
-  void get_name(std::string name) {
-    get_particle()->get_attribute(get_name_key());
-  }
-
-  // Print out information about the particle
-  void show(std::ostream &out) const {
-    out << "Particle named " << get_name() << std::endl;
-  }
-};
-
-// Make it so the C++ operator<< can be used.
-IMP_OUTPUT_OPERATOR(MyDecorator);
-
-IMPMODULENAME_END_NAMESPACE
-
-#endif  /* IMPMODULENAME_MY_DECORATOR_H */
-
-
-/**
- *  \file MyDecorator.cpp   \brief Add a name to a particle.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include <IMP/modulename/MyDecorator.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-MyDecorator::MyDecorator(Particle *p): DecoratorBase(p) {
-}
-
-StringKey MyDecorator::get_name_key() {
-  /* the compiler will make sure this is initialized the first time the
-   method is called. */
-  static StringKey mykey("my name");
-  return mykey;
-}
-
-IMPCORE_END_NAMESPACE
Index: examples/implementation/unary_function.cpp
===================================================================
--- examples/implementation/unary_function.cpp	(revision 1186)
+++ examples/implementation/unary_function.cpp	(working copy)
@@ -1,46 +0,0 @@
-/**
- *  \file Harmonic.h    \brief Harmonic function.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- */
-
-#ifndef IMPCORE_HARMONIC_H
-#define IMPCORE_HARMONIC_H
-
-#include "config.h"
-#include <IMP/UnaryFunction.h>
-#include <IMP/utility.h>
-
-IMPCORE_BEGIN_NAMESPACE
-
-//! Harmonic function (symmetric about the mean)
-class Harmonic : public UnaryFunction
-{
-public:
-  /** Create with the given center and spring constant */
-  Harmonic(Float center, Float k) : center_(center), k_(k) {}
-
-  virtual ~Harmonic() {}
-
-  virtual Float evaluate(Float feature) const {
-    return .5*k*square(feature-center_);
-  }
-
-  virtual FloatPair evaluate_with_derivative(Float feature) const {
-    Float e = (feature - center_);
-    Float deriv = k_ * e;
-    return FloatPair(evaluate(feature), deriv);
-  }
-
-  void show(std::ostream &out=std::cout) const {
-    out << "Harmonic: " << center_ << " and " << k_ << std::endl;
-  }
-
-private:
-  Float center_;
-  Float k_;
-};
-
-IMPCORE_END_NAMESPACE
-
-#endif  /* IMPCORE_HARMONIC_H */
Index: examples/implementation/restraint.readme
===================================================================
--- examples/implementation/restraint.readme	(revision 1186)
+++ examples/implementation/restraint.readme	(working copy)
@@ -1 +0,0 @@
-Implement a simple restraint which applies a PairScore to each ParticlePair in a ParticleContainer.
\ No newline at end of file
Index: examples/implementation/restraint.cpp
===================================================================
--- examples/implementation/restraint.cpp	(revision 1186)
+++ examples/implementation/restraint.cpp	(working copy)
@@ -1,95 +0,0 @@
-/**
- *  \file MyRestraint.h   \brief A restraint on a list of particle pairs.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#ifndef IMPMODULENAME_MY_RESTRAINT_H
-#define IMPMODULENAME_MY_RESTRAINT_H
-
-#include "config.h"
-#include "internal/modulename_version_info.h"
-#include <IMP/SingletonScore.h>
-#include <IMP/Restraint.h>
-#include <IMP/PairContainer.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-//! Apply a PairScore to a list of particle pairs
-/**
- */
-class IMPMODULENAMEEXPORT MyRestraint : public Restraint
-{
-  Pointer<PairContainer> pc_;
-  Pointer<PairScore> f_;
-public:
-  //! Create the restraint.
-  MyRestraint(PairScore* score_func,
-              PairContainer *pc);
-  virtual ~MyRestraint() {}
-
-  IMP_RESTRAINT(internal::modulename_version_info)
-
-  ParticlesList get_interacting_particles() const;
-};
-
-IMPMODULENAME_END_NAMESPACE
-
-#endif  /* IMPCORE_DISTANCE_RESTRAINT_H */
-
-/**
- *  \file MyRestraint.cpp \brief Restrain a list of particle pairs.
- *
- *  Copyright 2007-8 Sali Lab. All rights reserved.
- *
- */
-
-#include <IMP/modulename/MyRestraint.h>
-#include <IMP/log.h>
-
-IMPMODULENAME_BEGIN_NAMESPACE
-
-MyRestraint::MyRestraint(PairScore* score_func,
-                         PairContainer *pc) : pc_(pc),
-                                           f_(score_func) {}
-
-PairsRestraint::~PairsRestraint() {}
-
-Float PairsRestraint::evaluate(DerivativeAccumulator *accum)
-{
-  Float score=0;
-  for (PairContainer::ParticlePairIterator
-       it= pc_->particle_pairs_begin();
-       it != pc_->particle_pairs_end(); ++it) {
-    score += f_->evaluate(it->first, it->second, accum);
-  }
-
-  return score;
-}
-
-// the interacting sets are pairs
-ParticlesList PairsRestraint::get_interacting_particles() const
-{
-  ParticlesList ret;
-  for (PairContainer::ParticlePairIterator it
-       = pc_->particle_pairs_begin();
-       it != pc_->particle_pairs_end(); ++it) {
-    Particles s;
-    s.push_back(it->first);
-    s.push_back(it->second);
-    ret.push_back(s);
-  }
-  return ret;
-}
-
-void PairsRestraint::show(std::ostream& out) const
-{
-  out << "ContainerRestraint with score function ";
-  ss_->show(out);
-  out << " and container ";
-  pc_->show(out);
-  out << std::endl;
-}
-
-IMPMODULENAME_END_NAMESPACE
Index: examples/implementation/README
===================================================================
--- examples/implementation/README	(revision 1186)
+++ examples/implementation/README	(working copy)
@@ -1,2 +0,0 @@
-These C++ examples show how to implement instances of Restraints, ScoreStates, Decorators
-and other basic types that should not be implemented in python.
\ No newline at end of file
Index: examples/implementation/decorator.readme
===================================================================
--- examples/implementation/decorator.readme	(revision 1186)
+++ examples/implementation/decorator.readme	(working copy)
@@ -1 +0,0 @@
-This decorator allows you to add and control a name in a Particle.
\ No newline at end of file
Index: examples/SConscript
===================================================================
--- examples/SConscript	(revision 1186)
+++ examples/SConscript	(working copy)
@@ -7,24 +7,28 @@
 example_py = [x for x in Glob("*.py") + Glob("*/*.py") \
               if 'fragments' not in x.path]
 
+example_cpp = [x for x in Glob("*.cpp") + Glob("*/*.cpp") \
+              if 'fragments' not in x.path]
+
+
 e = env.Clone()
 
 # Custom builder to run unit tests:
 def builder_unit_test(target, source, env):
     bin = source[0].abspath
     for src in source[1:]:
-        (dir, script) = os.path.split(src.abspath)
-        app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
-        if env.Execute(app) != 0:
-            print "examples FAILED"
-            return 1
-    file(str(target[0]), 'w').write('PASSED\n')
+            (dir, script) = os.path.split(src.abspath)
+            app = "cd %s && %s %s %s > /dev/null" % (dir, bin, e['PYTHON'], script)
+            if env.Execute(app) != 0:
+                print "examples FAILED"
+                return 1
+            file(str(target[0]), 'w').write('PASSED\n')
 
 e.Append(BUILDERS = {'Test': Builder(action=builder_unit_test,
                                      source_scanner=pyscanner.PythonScanner)})
 
 # Test all scripts:
-test = e.Test("examples.passed", bin + example_py)
+test = e.Test("examples.passed", bin + example_py+example_cpp)
 e.Alias("test", test)
 e.AlwaysBuild("examples.passed")
 
Index: examples/README
===================================================================
--- examples/README	(revision 1186)
+++ examples/README	(working copy)
@@ -2,4 +2,4 @@
 - \ref simple_examples "Simple examples", which demonstrate a single class or decorator
 - \ref using_experimental_data "Experimental examples" which demonstrate a variety of classes working together to go from experimental data to a structure
 - \ref fragments "Fragments" which are little bits of code that illustrate using a particular piece of \imp but can't be run on their own.
-- \ref implementation "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp.
\ No newline at end of file
+- "Implementation Examples" which illustrate how to add new Restraints, Decorators etc. to \imp. These can be found in the IMP::examples module.
\ No newline at end of file

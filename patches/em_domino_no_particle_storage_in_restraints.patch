Index: modules/domino/test/run-all-tests.py
===================================================================
--- modules/domino/test/run-all-tests.py	(revision 1285)
+++ modules/domino/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/domino/include/SimpleDiscreteRestraint.h
===================================================================
--- modules/domino/include/SimpleDiscreteRestraint.h	(revision 1285)
+++ modules/domino/include/SimpleDiscreteRestraint.h	(working copy)
@@ -35,6 +35,11 @@
 
   virtual ~SimpleDiscreteRestraint() {};
   IMP_RESTRAINT(internal::domino_version_info)
+  ParticlesList get_interacting_particles() const
+  {
+    return ParticlesList(1, Particles(particles_begin(), particles_end()));
+  }
+  IMP_LIST(private, Particle, particle, Particle*)
 protected:
   void load_restraints(std::string restraint_filename);
   Model *model;
Index: modules/domino/src/SimpleDiscreteRestraint.cpp
===================================================================
--- modules/domino/src/SimpleDiscreteRestraint.cpp	(revision 1285)
+++ modules/domino/src/SimpleDiscreteRestraint.cpp	(working copy)
@@ -60,6 +60,16 @@
   model = &model_;
 }
 
+IMP_LIST_IMPL(SimpleDiscreteRestraint, Particle, particle,Particle*,  {
+              IMP_assert(get_number_of_particles()==0
+                         || obj->get_model() == (*particles_begin())->get_model(),
+                         "All particles in Restraint must belong to the "
+                         "same Model.");
+              },);
+
+
+
+
 Float SimpleDiscreteRestraint::evaluate(DerivativeAccumulator *accum)
 {
   //build state key
Index: modules/em/test/run-all-tests.py
===================================================================
--- modules/em/test/run-all-tests.py	(revision 1285)
+++ modules/em/test/run-all-tests.py	(working copy)
@@ -1 +1,26 @@
-link ../../../tools/run-all-tests.py
\ No newline at end of file
+import unittest, sys, os, re
+
+def regressionTest():
+    """Run all tests in files called test_*.py in current directory and
+       subdirectories"""
+    path = os.path.dirname(sys.argv[0])
+    if path == '':
+        path = '.'
+    # Tell test cases where to find any input files needed
+    os.environ['TEST_DIRECTORY'] = path
+    modobjs = []
+    for subdir in [''] + [x for x in os.listdir(path) \
+                          if os.path.isdir(os.path.join(path, x))]:
+        files = os.listdir(os.path.join(path, subdir))
+        test = re.compile("^test_.*\.py$", re.IGNORECASE)
+        files = filter(test.search, files)
+        modnames = [os.path.splitext(f)[0] for f in files]
+        sys.path.insert(0, os.path.join(path, subdir))
+        modobjs.extend([__import__(m) for m in modnames])
+        sys.path.pop(0)
+
+    tests = [unittest.defaultTestLoader.loadTestsFromModule(o) for o in modobjs]
+    return unittest.TestSuite(tests)
+
+if __name__ == "__main__":
+    unittest.main(defaultTest="regressionTest")
Index: modules/em/include/EMFitRestraint.h
===================================================================
--- modules/em/include/EMFitRestraint.h	(revision 1285)
+++ modules/em/include/EMFitRestraint.h	(working copy)
@@ -52,8 +52,13 @@
 
   IMP_RESTRAINT(internal::em_version_info)
 
+  ParticlesList get_interacting_particles() const
+  {
+    return ParticlesList(1, Particles(particles_begin(), particles_end()));
+  }  
+  
+  IMP_LIST(private, Particle, particle, Particle*)
 private:
-
   DensityMap *target_dens_map_;
   SampledDensityMap *model_dens_map_;
   // reference to the IMP environment
Index: modules/em/src/EMFitRestraint.cpp
===================================================================
--- modules/em/src/EMFitRestraint.cpp	(revision 1285)
+++ modules/em/src/EMFitRestraint.cpp	(working copy)
@@ -59,6 +59,13 @@
 {
 }
 
+IMP_LIST_IMPL(EMFitRestraint, Particle, particle,Particle*,  {
+              IMP_assert(get_number_of_particles()==0
+                         || obj->get_model() == (*particles_begin())->get_model(),
+                         "All particles in EMFitRestraint must belong to the "
+                         "same Model.");
+              },);
+
 //! Calculate the em coarse restraint score.
 /** \param[in] calc_deriv If true, partial first derivatives should be
                           calculated.

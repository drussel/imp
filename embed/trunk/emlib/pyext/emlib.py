# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _emlib
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _emlib.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _emlib.PySwigIterator_value(*args)
    def incr(*args): return _emlib.PySwigIterator_incr(*args)
    def decr(*args): return _emlib.PySwigIterator_decr(*args)
    def distance(*args): return _emlib.PySwigIterator_distance(*args)
    def equal(*args): return _emlib.PySwigIterator_equal(*args)
    def copy(*args): return _emlib.PySwigIterator_copy(*args)
    def next(*args): return _emlib.PySwigIterator_next(*args)
    def previous(*args): return _emlib.PySwigIterator_previous(*args)
    def advance(*args): return _emlib.PySwigIterator_advance(*args)
    def __eq__(*args): return _emlib.PySwigIterator___eq__(*args)
    def __ne__(*args): return _emlib.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _emlib.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _emlib.PySwigIterator___isub__(*args)
    def __add__(*args): return _emlib.PySwigIterator___add__(*args)
    def __sub__(*args): return _emlib.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _emlib.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _emlib.ios_base_erase_event
    imbue_event = _emlib.ios_base_imbue_event
    copyfmt_event = _emlib.ios_base_copyfmt_event
    def register_callback(*args): return _emlib.ios_base_register_callback(*args)
    def flags(*args): return _emlib.ios_base_flags(*args)
    def setf(*args): return _emlib.ios_base_setf(*args)
    def unsetf(*args): return _emlib.ios_base_unsetf(*args)
    def precision(*args): return _emlib.ios_base_precision(*args)
    def width(*args): return _emlib.ios_base_width(*args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _emlib.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_emlib.ios_base_sync_with_stdio)
    def imbue(*args): return _emlib.ios_base_imbue(*args)
    def getloc(*args): return _emlib.ios_base_getloc(*args)
    __swig_getmethods__["xalloc"] = lambda x: _emlib.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_emlib.ios_base_xalloc)
    def iword(*args): return _emlib.ios_base_iword(*args)
    def pword(*args): return _emlib.ios_base_pword(*args)
    __swig_destroy__ = _emlib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _emlib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _emlib.cvar
ios_base.boolalpha = _emlib.cvar.ios_base_boolalpha
ios_base.dec = _emlib.cvar.ios_base_dec
ios_base.fixed = _emlib.cvar.ios_base_fixed
ios_base.hex = _emlib.cvar.ios_base_hex
ios_base.internal = _emlib.cvar.ios_base_internal
ios_base.left = _emlib.cvar.ios_base_left
ios_base.oct = _emlib.cvar.ios_base_oct
ios_base.right = _emlib.cvar.ios_base_right
ios_base.scientific = _emlib.cvar.ios_base_scientific
ios_base.showbase = _emlib.cvar.ios_base_showbase
ios_base.showpoint = _emlib.cvar.ios_base_showpoint
ios_base.showpos = _emlib.cvar.ios_base_showpos
ios_base.skipws = _emlib.cvar.ios_base_skipws
ios_base.unitbuf = _emlib.cvar.ios_base_unitbuf
ios_base.uppercase = _emlib.cvar.ios_base_uppercase
ios_base.adjustfield = _emlib.cvar.ios_base_adjustfield
ios_base.basefield = _emlib.cvar.ios_base_basefield
ios_base.floatfield = _emlib.cvar.ios_base_floatfield
ios_base.badbit = _emlib.cvar.ios_base_badbit
ios_base.eofbit = _emlib.cvar.ios_base_eofbit
ios_base.failbit = _emlib.cvar.ios_base_failbit
ios_base.goodbit = _emlib.cvar.ios_base_goodbit
ios_base.app = _emlib.cvar.ios_base_app
ios_base.ate = _emlib.cvar.ios_base_ate
ios_base.binary = _emlib.cvar.ios_base_binary
ios_base.ios_base_in = _emlib.cvar.ios_base_ios_base_in
ios_base.out = _emlib.cvar.ios_base_out
ios_base.trunc = _emlib.cvar.ios_base_trunc
ios_base.beg = _emlib.cvar.ios_base_beg
ios_base.cur = _emlib.cvar.ios_base_cur
ios_base.end = _emlib.cvar.ios_base_end
ios_base_sync_with_stdio = _emlib.ios_base_sync_with_stdio
ios_base_xalloc = _emlib.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args): return _emlib.ios_rdstate(*args)
    def clear(*args): return _emlib.ios_clear(*args)
    def setstate(*args): return _emlib.ios_setstate(*args)
    def good(*args): return _emlib.ios_good(*args)
    def eof(*args): return _emlib.ios_eof(*args)
    def fail(*args): return _emlib.ios_fail(*args)
    def bad(*args): return _emlib.ios_bad(*args)
    def exceptions(*args): return _emlib.ios_exceptions(*args)
    def __init__(self, *args): 
        this = _emlib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_ios
    __del__ = lambda self : None;
    def tie(*args): return _emlib.ios_tie(*args)
    def rdbuf(*args): return _emlib.ios_rdbuf(*args)
    def copyfmt(*args): return _emlib.ios_copyfmt(*args)
    def fill(*args): return _emlib.ios_fill(*args)
    def imbue(*args): return _emlib.ios_imbue(*args)
    def narrow(*args): return _emlib.ios_narrow(*args)
    def widen(*args): return _emlib.ios_widen(*args)
ios_swigregister = _emlib.ios_swigregister
ios_swigregister(ios)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def length(*args): return _emlib.string_length(*args)
    def max_size(*args): return _emlib.string_max_size(*args)
    def capacity(*args): return _emlib.string_capacity(*args)
    def reserve(*args): return _emlib.string_reserve(*args)
    def copy(*args): return _emlib.string_copy(*args)
    def c_str(*args): return _emlib.string_c_str(*args)
    def find(*args): return _emlib.string_find(*args)
    def rfind(*args): return _emlib.string_rfind(*args)
    def find_first_of(*args): return _emlib.string_find_first_of(*args)
    def find_last_of(*args): return _emlib.string_find_last_of(*args)
    def find_first_not_of(*args): return _emlib.string_find_first_not_of(*args)
    def find_last_not_of(*args): return _emlib.string_find_last_not_of(*args)
    def substr(*args): return _emlib.string_substr(*args)
    def empty(*args): return _emlib.string_empty(*args)
    def size(*args): return _emlib.string_size(*args)
    def swap(*args): return _emlib.string_swap(*args)
    def get_allocator(*args): return _emlib.string_get_allocator(*args)
    def begin(*args): return _emlib.string_begin(*args)
    def end(*args): return _emlib.string_end(*args)
    def rbegin(*args): return _emlib.string_rbegin(*args)
    def rend(*args): return _emlib.string_rend(*args)
    def erase(*args): return _emlib.string_erase(*args)
    def __init__(self, *args): 
        this = _emlib.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args): return _emlib.string_assign(*args)
    def resize(*args): return _emlib.string_resize(*args)
    def iterator(*args): return _emlib.string_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _emlib.string___nonzero__(*args)
    def __len__(*args): return _emlib.string___len__(*args)
    def __getslice__(*args): return _emlib.string___getslice__(*args)
    def __setslice__(*args): return _emlib.string___setslice__(*args)
    def __delslice__(*args): return _emlib.string___delslice__(*args)
    def __delitem__(*args): return _emlib.string___delitem__(*args)
    def __getitem__(*args): return _emlib.string___getitem__(*args)
    def __setitem__(*args): return _emlib.string___setitem__(*args)
    def insert(*args): return _emlib.string_insert(*args)
    def replace(*args): return _emlib.string_replace(*args)
    def __iadd__(*args): return _emlib.string___iadd__(*args)
    def __add__(*args): return _emlib.string___add__(*args)
    def __radd__(*args): return _emlib.string___radd__(*args)
    def __str__(*args): return _emlib.string___str__(*args)
    def __rlshift__(*args): return _emlib.string___rlshift__(*args)
    def __eq__(*args): return _emlib.string___eq__(*args)
    def __ne__(*args): return _emlib.string___ne__(*args)
    def __gt__(*args): return _emlib.string___gt__(*args)
    def __lt__(*args): return _emlib.string___lt__(*args)
    def __ge__(*args): return _emlib.string___ge__(*args)
    def __le__(*args): return _emlib.string___le__(*args)
    __swig_destroy__ = _emlib.delete_string
    __del__ = lambda self : None;
string_swigregister = _emlib.string_swigregister
string_swigregister(string)
string.npos = _emlib.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args): return _emlib.ostream___lshift__(*args)
    def put(*args): return _emlib.ostream_put(*args)
    def write(*args): return _emlib.ostream_write(*args)
    def flush(*args): return _emlib.ostream_flush(*args)
    def tellp(*args): return _emlib.ostream_tellp(*args)
    def seekp(*args): return _emlib.ostream_seekp(*args)
ostream_swigregister = _emlib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args): return _emlib.istream___rshift__(*args)
    def gcount(*args): return _emlib.istream_gcount(*args)
    def get(*args): return _emlib.istream_get(*args)
    def getline(*args): return _emlib.istream_getline(*args)
    def ignore(*args): return _emlib.istream_ignore(*args)
    def peek(*args): return _emlib.istream_peek(*args)
    def read(*args): return _emlib.istream_read(*args)
    def readsome(*args): return _emlib.istream_readsome(*args)
    def putback(*args): return _emlib.istream_putback(*args)
    def unget(*args): return _emlib.istream_unget(*args)
    def sync(*args): return _emlib.istream_sync(*args)
    def tellg(*args): return _emlib.istream_tellg(*args)
    def seekg(*args): return _emlib.istream_seekg(*args)
istream_swigregister = _emlib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _emlib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _emlib.endl_cb_ptr
endl = _emlib.endl
ends_cb_ptr = _emlib.ends_cb_ptr
ends = _emlib.ends
flush_cb_ptr = _emlib.flush_cb_ptr
flush = _emlib.flush
class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(*args): return _emlib.vectori_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _emlib.vectori___nonzero__(*args)
    def __len__(*args): return _emlib.vectori___len__(*args)
    def pop(*args): return _emlib.vectori_pop(*args)
    def __getslice__(*args): return _emlib.vectori___getslice__(*args)
    def __setslice__(*args): return _emlib.vectori___setslice__(*args)
    def __delslice__(*args): return _emlib.vectori___delslice__(*args)
    def __delitem__(*args): return _emlib.vectori___delitem__(*args)
    def __getitem__(*args): return _emlib.vectori___getitem__(*args)
    def __setitem__(*args): return _emlib.vectori___setitem__(*args)
    def append(*args): return _emlib.vectori_append(*args)
    def empty(*args): return _emlib.vectori_empty(*args)
    def size(*args): return _emlib.vectori_size(*args)
    def clear(*args): return _emlib.vectori_clear(*args)
    def swap(*args): return _emlib.vectori_swap(*args)
    def get_allocator(*args): return _emlib.vectori_get_allocator(*args)
    def begin(*args): return _emlib.vectori_begin(*args)
    def end(*args): return _emlib.vectori_end(*args)
    def rbegin(*args): return _emlib.vectori_rbegin(*args)
    def rend(*args): return _emlib.vectori_rend(*args)
    def pop_back(*args): return _emlib.vectori_pop_back(*args)
    def erase(*args): return _emlib.vectori_erase(*args)
    def __init__(self, *args): 
        this = _emlib.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _emlib.vectori_push_back(*args)
    def front(*args): return _emlib.vectori_front(*args)
    def back(*args): return _emlib.vectori_back(*args)
    def assign(*args): return _emlib.vectori_assign(*args)
    def resize(*args): return _emlib.vectori_resize(*args)
    def insert(*args): return _emlib.vectori_insert(*args)
    def reserve(*args): return _emlib.vectori_reserve(*args)
    def capacity(*args): return _emlib.vectori_capacity(*args)
    __swig_destroy__ = _emlib.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _emlib.vectori_swigregister
vectori_swigregister(vectori)

class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr
    def iterator(*args): return _emlib.vectorf_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _emlib.vectorf___nonzero__(*args)
    def __len__(*args): return _emlib.vectorf___len__(*args)
    def pop(*args): return _emlib.vectorf_pop(*args)
    def __getslice__(*args): return _emlib.vectorf___getslice__(*args)
    def __setslice__(*args): return _emlib.vectorf___setslice__(*args)
    def __delslice__(*args): return _emlib.vectorf___delslice__(*args)
    def __delitem__(*args): return _emlib.vectorf___delitem__(*args)
    def __getitem__(*args): return _emlib.vectorf___getitem__(*args)
    def __setitem__(*args): return _emlib.vectorf___setitem__(*args)
    def append(*args): return _emlib.vectorf_append(*args)
    def empty(*args): return _emlib.vectorf_empty(*args)
    def size(*args): return _emlib.vectorf_size(*args)
    def clear(*args): return _emlib.vectorf_clear(*args)
    def swap(*args): return _emlib.vectorf_swap(*args)
    def get_allocator(*args): return _emlib.vectorf_get_allocator(*args)
    def begin(*args): return _emlib.vectorf_begin(*args)
    def end(*args): return _emlib.vectorf_end(*args)
    def rbegin(*args): return _emlib.vectorf_rbegin(*args)
    def rend(*args): return _emlib.vectorf_rend(*args)
    def pop_back(*args): return _emlib.vectorf_pop_back(*args)
    def erase(*args): return _emlib.vectorf_erase(*args)
    def __init__(self, *args): 
        this = _emlib.new_vectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _emlib.vectorf_push_back(*args)
    def front(*args): return _emlib.vectorf_front(*args)
    def back(*args): return _emlib.vectorf_back(*args)
    def assign(*args): return _emlib.vectorf_assign(*args)
    def resize(*args): return _emlib.vectorf_resize(*args)
    def insert(*args): return _emlib.vectorf_insert(*args)
    def reserve(*args): return _emlib.vectorf_reserve(*args)
    def capacity(*args): return _emlib.vectorf_capacity(*args)
    __swig_destroy__ = _emlib.delete_vectorf
    __del__ = lambda self : None;
vectorf_swigregister = _emlib.vectorf_swigregister
vectorf_swigregister(vectorf)

class MapReaderWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapReaderWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapReaderWriter, name)
    __repr__ = _swig_repr
    def Read(*args): return _emlib.MapReaderWriter_Read(*args)
    def Write(*args): return _emlib.MapReaderWriter_Write(*args)
    __swig_destroy__ = _emlib.delete_MapReaderWriter
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == MapReaderWriter:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _emlib.new_MapReaderWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _emlib.disown_MapReaderWriter(self)
        return weakref_proxy(self)
MapReaderWriter_swigregister = _emlib.MapReaderWriter_swigregister
MapReaderWriter_swigregister(MapReaderWriter)
PI = cvar.PI
EPS = cvar.EPS

class DensityHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DensityHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_DensityHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    MAP_FIELD_SIZE = _emlib.DensityHeader_MAP_FIELD_SIZE
    USER_FIELD_SIZE = _emlib.DensityHeader_USER_FIELD_SIZE
    COMMENT_FIELD_NUM_OF = _emlib.DensityHeader_COMMENT_FIELD_NUM_OF
    COMMENT_FIELD_SINGLE_SIZE = _emlib.DensityHeader_COMMENT_FIELD_SINGLE_SIZE
    __swig_setmethods__["nx"] = _emlib.DensityHeader_nx_set
    __swig_getmethods__["nx"] = _emlib.DensityHeader_nx_get
    if _newclass:nx = _swig_property(_emlib.DensityHeader_nx_get, _emlib.DensityHeader_nx_set)
    __swig_setmethods__["ny"] = _emlib.DensityHeader_ny_set
    __swig_getmethods__["ny"] = _emlib.DensityHeader_ny_get
    if _newclass:ny = _swig_property(_emlib.DensityHeader_ny_get, _emlib.DensityHeader_ny_set)
    __swig_setmethods__["nz"] = _emlib.DensityHeader_nz_set
    __swig_getmethods__["nz"] = _emlib.DensityHeader_nz_get
    if _newclass:nz = _swig_property(_emlib.DensityHeader_nz_get, _emlib.DensityHeader_nz_set)
    __swig_setmethods__["data_type"] = _emlib.DensityHeader_data_type_set
    __swig_getmethods__["data_type"] = _emlib.DensityHeader_data_type_get
    if _newclass:data_type = _swig_property(_emlib.DensityHeader_data_type_get, _emlib.DensityHeader_data_type_set)
    __swig_setmethods__["nxstart"] = _emlib.DensityHeader_nxstart_set
    __swig_getmethods__["nxstart"] = _emlib.DensityHeader_nxstart_get
    if _newclass:nxstart = _swig_property(_emlib.DensityHeader_nxstart_get, _emlib.DensityHeader_nxstart_set)
    __swig_setmethods__["nystart"] = _emlib.DensityHeader_nystart_set
    __swig_getmethods__["nystart"] = _emlib.DensityHeader_nystart_get
    if _newclass:nystart = _swig_property(_emlib.DensityHeader_nystart_get, _emlib.DensityHeader_nystart_set)
    __swig_setmethods__["nzstart"] = _emlib.DensityHeader_nzstart_set
    __swig_getmethods__["nzstart"] = _emlib.DensityHeader_nzstart_get
    if _newclass:nzstart = _swig_property(_emlib.DensityHeader_nzstart_get, _emlib.DensityHeader_nzstart_set)
    __swig_setmethods__["mx"] = _emlib.DensityHeader_mx_set
    __swig_getmethods__["mx"] = _emlib.DensityHeader_mx_get
    if _newclass:mx = _swig_property(_emlib.DensityHeader_mx_get, _emlib.DensityHeader_mx_set)
    __swig_setmethods__["my"] = _emlib.DensityHeader_my_set
    __swig_getmethods__["my"] = _emlib.DensityHeader_my_get
    if _newclass:my = _swig_property(_emlib.DensityHeader_my_get, _emlib.DensityHeader_my_set)
    __swig_setmethods__["mz"] = _emlib.DensityHeader_mz_set
    __swig_getmethods__["mz"] = _emlib.DensityHeader_mz_get
    if _newclass:mz = _swig_property(_emlib.DensityHeader_mz_get, _emlib.DensityHeader_mz_set)
    __swig_setmethods__["xlen"] = _emlib.DensityHeader_xlen_set
    __swig_getmethods__["xlen"] = _emlib.DensityHeader_xlen_get
    if _newclass:xlen = _swig_property(_emlib.DensityHeader_xlen_get, _emlib.DensityHeader_xlen_set)
    __swig_setmethods__["ylen"] = _emlib.DensityHeader_ylen_set
    __swig_getmethods__["ylen"] = _emlib.DensityHeader_ylen_get
    if _newclass:ylen = _swig_property(_emlib.DensityHeader_ylen_get, _emlib.DensityHeader_ylen_set)
    __swig_setmethods__["zlen"] = _emlib.DensityHeader_zlen_set
    __swig_getmethods__["zlen"] = _emlib.DensityHeader_zlen_get
    if _newclass:zlen = _swig_property(_emlib.DensityHeader_zlen_get, _emlib.DensityHeader_zlen_set)
    __swig_setmethods__["alpha"] = _emlib.DensityHeader_alpha_set
    __swig_getmethods__["alpha"] = _emlib.DensityHeader_alpha_get
    if _newclass:alpha = _swig_property(_emlib.DensityHeader_alpha_get, _emlib.DensityHeader_alpha_set)
    __swig_setmethods__["beta"] = _emlib.DensityHeader_beta_set
    __swig_getmethods__["beta"] = _emlib.DensityHeader_beta_get
    if _newclass:beta = _swig_property(_emlib.DensityHeader_beta_get, _emlib.DensityHeader_beta_set)
    __swig_setmethods__["gamma"] = _emlib.DensityHeader_gamma_set
    __swig_getmethods__["gamma"] = _emlib.DensityHeader_gamma_get
    if _newclass:gamma = _swig_property(_emlib.DensityHeader_gamma_get, _emlib.DensityHeader_gamma_set)
    __swig_setmethods__["mapc"] = _emlib.DensityHeader_mapc_set
    __swig_getmethods__["mapc"] = _emlib.DensityHeader_mapc_get
    if _newclass:mapc = _swig_property(_emlib.DensityHeader_mapc_get, _emlib.DensityHeader_mapc_set)
    __swig_setmethods__["mapr"] = _emlib.DensityHeader_mapr_set
    __swig_getmethods__["mapr"] = _emlib.DensityHeader_mapr_get
    if _newclass:mapr = _swig_property(_emlib.DensityHeader_mapr_get, _emlib.DensityHeader_mapr_set)
    __swig_setmethods__["maps"] = _emlib.DensityHeader_maps_set
    __swig_getmethods__["maps"] = _emlib.DensityHeader_maps_get
    if _newclass:maps = _swig_property(_emlib.DensityHeader_maps_get, _emlib.DensityHeader_maps_set)
    __swig_setmethods__["dmin"] = _emlib.DensityHeader_dmin_set
    __swig_getmethods__["dmin"] = _emlib.DensityHeader_dmin_get
    if _newclass:dmin = _swig_property(_emlib.DensityHeader_dmin_get, _emlib.DensityHeader_dmin_set)
    __swig_setmethods__["dmax"] = _emlib.DensityHeader_dmax_set
    __swig_getmethods__["dmax"] = _emlib.DensityHeader_dmax_get
    if _newclass:dmax = _swig_property(_emlib.DensityHeader_dmax_get, _emlib.DensityHeader_dmax_set)
    __swig_setmethods__["dmean"] = _emlib.DensityHeader_dmean_set
    __swig_getmethods__["dmean"] = _emlib.DensityHeader_dmean_get
    if _newclass:dmean = _swig_property(_emlib.DensityHeader_dmean_get, _emlib.DensityHeader_dmean_set)
    __swig_setmethods__["ispg"] = _emlib.DensityHeader_ispg_set
    __swig_getmethods__["ispg"] = _emlib.DensityHeader_ispg_get
    if _newclass:ispg = _swig_property(_emlib.DensityHeader_ispg_get, _emlib.DensityHeader_ispg_set)
    __swig_setmethods__["nsymbt"] = _emlib.DensityHeader_nsymbt_set
    __swig_getmethods__["nsymbt"] = _emlib.DensityHeader_nsymbt_get
    if _newclass:nsymbt = _swig_property(_emlib.DensityHeader_nsymbt_get, _emlib.DensityHeader_nsymbt_set)
    __swig_setmethods__["user"] = _emlib.DensityHeader_user_set
    __swig_getmethods__["user"] = _emlib.DensityHeader_user_get
    if _newclass:user = _swig_property(_emlib.DensityHeader_user_get, _emlib.DensityHeader_user_set)
    __swig_setmethods__["xorigin"] = _emlib.DensityHeader_xorigin_set
    __swig_getmethods__["xorigin"] = _emlib.DensityHeader_xorigin_get
    if _newclass:xorigin = _swig_property(_emlib.DensityHeader_xorigin_get, _emlib.DensityHeader_xorigin_set)
    __swig_setmethods__["yorigin"] = _emlib.DensityHeader_yorigin_set
    __swig_getmethods__["yorigin"] = _emlib.DensityHeader_yorigin_get
    if _newclass:yorigin = _swig_property(_emlib.DensityHeader_yorigin_get, _emlib.DensityHeader_yorigin_set)
    __swig_setmethods__["zorigin"] = _emlib.DensityHeader_zorigin_set
    __swig_getmethods__["zorigin"] = _emlib.DensityHeader_zorigin_get
    if _newclass:zorigin = _swig_property(_emlib.DensityHeader_zorigin_get, _emlib.DensityHeader_zorigin_set)
    __swig_setmethods__["map"] = _emlib.DensityHeader_map_set
    __swig_getmethods__["map"] = _emlib.DensityHeader_map_get
    if _newclass:map = _swig_property(_emlib.DensityHeader_map_get, _emlib.DensityHeader_map_set)
    __swig_setmethods__["machinestamp"] = _emlib.DensityHeader_machinestamp_set
    __swig_getmethods__["machinestamp"] = _emlib.DensityHeader_machinestamp_get
    if _newclass:machinestamp = _swig_property(_emlib.DensityHeader_machinestamp_get, _emlib.DensityHeader_machinestamp_set)
    __swig_setmethods__["rms"] = _emlib.DensityHeader_rms_set
    __swig_getmethods__["rms"] = _emlib.DensityHeader_rms_get
    if _newclass:rms = _swig_property(_emlib.DensityHeader_rms_get, _emlib.DensityHeader_rms_set)
    __swig_setmethods__["nlabl"] = _emlib.DensityHeader_nlabl_set
    __swig_getmethods__["nlabl"] = _emlib.DensityHeader_nlabl_get
    if _newclass:nlabl = _swig_property(_emlib.DensityHeader_nlabl_get, _emlib.DensityHeader_nlabl_set)
    __swig_setmethods__["comments"] = _emlib.DensityHeader_comments_set
    __swig_getmethods__["comments"] = _emlib.DensityHeader_comments_get
    if _newclass:comments = _swig_property(_emlib.DensityHeader_comments_get, _emlib.DensityHeader_comments_set)
    __swig_setmethods__["magic"] = _emlib.DensityHeader_magic_set
    __swig_getmethods__["magic"] = _emlib.DensityHeader_magic_get
    if _newclass:magic = _swig_property(_emlib.DensityHeader_magic_get, _emlib.DensityHeader_magic_set)
    __swig_setmethods__["voltage"] = _emlib.DensityHeader_voltage_set
    __swig_getmethods__["voltage"] = _emlib.DensityHeader_voltage_get
    if _newclass:voltage = _swig_property(_emlib.DensityHeader_voltage_get, _emlib.DensityHeader_voltage_set)
    __swig_setmethods__["Cs"] = _emlib.DensityHeader_Cs_set
    __swig_getmethods__["Cs"] = _emlib.DensityHeader_Cs_get
    if _newclass:Cs = _swig_property(_emlib.DensityHeader_Cs_get, _emlib.DensityHeader_Cs_set)
    __swig_setmethods__["Aperture"] = _emlib.DensityHeader_Aperture_set
    __swig_getmethods__["Aperture"] = _emlib.DensityHeader_Aperture_get
    if _newclass:Aperture = _swig_property(_emlib.DensityHeader_Aperture_get, _emlib.DensityHeader_Aperture_set)
    __swig_setmethods__["Magnification"] = _emlib.DensityHeader_Magnification_set
    __swig_getmethods__["Magnification"] = _emlib.DensityHeader_Magnification_get
    if _newclass:Magnification = _swig_property(_emlib.DensityHeader_Magnification_get, _emlib.DensityHeader_Magnification_set)
    __swig_setmethods__["Postmagnification"] = _emlib.DensityHeader_Postmagnification_set
    __swig_getmethods__["Postmagnification"] = _emlib.DensityHeader_Postmagnification_get
    if _newclass:Postmagnification = _swig_property(_emlib.DensityHeader_Postmagnification_get, _emlib.DensityHeader_Postmagnification_set)
    __swig_setmethods__["Exposuretime"] = _emlib.DensityHeader_Exposuretime_set
    __swig_getmethods__["Exposuretime"] = _emlib.DensityHeader_Exposuretime_get
    if _newclass:Exposuretime = _swig_property(_emlib.DensityHeader_Exposuretime_get, _emlib.DensityHeader_Exposuretime_set)
    __swig_setmethods__["Objectpixelsize"] = _emlib.DensityHeader_Objectpixelsize_set
    __swig_getmethods__["Objectpixelsize"] = _emlib.DensityHeader_Objectpixelsize_get
    if _newclass:Objectpixelsize = _swig_property(_emlib.DensityHeader_Objectpixelsize_get, _emlib.DensityHeader_Objectpixelsize_set)
    __swig_setmethods__["Microscope"] = _emlib.DensityHeader_Microscope_set
    __swig_getmethods__["Microscope"] = _emlib.DensityHeader_Microscope_get
    if _newclass:Microscope = _swig_property(_emlib.DensityHeader_Microscope_get, _emlib.DensityHeader_Microscope_set)
    __swig_setmethods__["Pixelsize"] = _emlib.DensityHeader_Pixelsize_set
    __swig_getmethods__["Pixelsize"] = _emlib.DensityHeader_Pixelsize_get
    if _newclass:Pixelsize = _swig_property(_emlib.DensityHeader_Pixelsize_get, _emlib.DensityHeader_Pixelsize_set)
    __swig_setmethods__["CCDArea"] = _emlib.DensityHeader_CCDArea_set
    __swig_getmethods__["CCDArea"] = _emlib.DensityHeader_CCDArea_get
    if _newclass:CCDArea = _swig_property(_emlib.DensityHeader_CCDArea_get, _emlib.DensityHeader_CCDArea_set)
    __swig_setmethods__["Defocus"] = _emlib.DensityHeader_Defocus_set
    __swig_getmethods__["Defocus"] = _emlib.DensityHeader_Defocus_get
    if _newclass:Defocus = _swig_property(_emlib.DensityHeader_Defocus_get, _emlib.DensityHeader_Defocus_set)
    __swig_setmethods__["Astigmatism"] = _emlib.DensityHeader_Astigmatism_set
    __swig_getmethods__["Astigmatism"] = _emlib.DensityHeader_Astigmatism_get
    if _newclass:Astigmatism = _swig_property(_emlib.DensityHeader_Astigmatism_get, _emlib.DensityHeader_Astigmatism_set)
    __swig_setmethods__["AstigmatismAngle"] = _emlib.DensityHeader_AstigmatismAngle_set
    __swig_getmethods__["AstigmatismAngle"] = _emlib.DensityHeader_AstigmatismAngle_get
    if _newclass:AstigmatismAngle = _swig_property(_emlib.DensityHeader_AstigmatismAngle_get, _emlib.DensityHeader_AstigmatismAngle_set)
    __swig_setmethods__["FocusIncrement"] = _emlib.DensityHeader_FocusIncrement_set
    __swig_getmethods__["FocusIncrement"] = _emlib.DensityHeader_FocusIncrement_get
    if _newclass:FocusIncrement = _swig_property(_emlib.DensityHeader_FocusIncrement_get, _emlib.DensityHeader_FocusIncrement_set)
    __swig_setmethods__["CountsPerElectron"] = _emlib.DensityHeader_CountsPerElectron_set
    __swig_getmethods__["CountsPerElectron"] = _emlib.DensityHeader_CountsPerElectron_get
    if _newclass:CountsPerElectron = _swig_property(_emlib.DensityHeader_CountsPerElectron_get, _emlib.DensityHeader_CountsPerElectron_set)
    __swig_setmethods__["Intensity"] = _emlib.DensityHeader_Intensity_set
    __swig_getmethods__["Intensity"] = _emlib.DensityHeader_Intensity_get
    if _newclass:Intensity = _swig_property(_emlib.DensityHeader_Intensity_get, _emlib.DensityHeader_Intensity_set)
    __swig_setmethods__["EnergySlitwidth"] = _emlib.DensityHeader_EnergySlitwidth_set
    __swig_getmethods__["EnergySlitwidth"] = _emlib.DensityHeader_EnergySlitwidth_get
    if _newclass:EnergySlitwidth = _swig_property(_emlib.DensityHeader_EnergySlitwidth_get, _emlib.DensityHeader_EnergySlitwidth_set)
    __swig_setmethods__["EnergyOffset"] = _emlib.DensityHeader_EnergyOffset_set
    __swig_getmethods__["EnergyOffset"] = _emlib.DensityHeader_EnergyOffset_get
    if _newclass:EnergyOffset = _swig_property(_emlib.DensityHeader_EnergyOffset_get, _emlib.DensityHeader_EnergyOffset_set)
    __swig_setmethods__["Tiltangle"] = _emlib.DensityHeader_Tiltangle_set
    __swig_getmethods__["Tiltangle"] = _emlib.DensityHeader_Tiltangle_get
    if _newclass:Tiltangle = _swig_property(_emlib.DensityHeader_Tiltangle_get, _emlib.DensityHeader_Tiltangle_set)
    __swig_setmethods__["Tiltaxis"] = _emlib.DensityHeader_Tiltaxis_set
    __swig_getmethods__["Tiltaxis"] = _emlib.DensityHeader_Tiltaxis_get
    if _newclass:Tiltaxis = _swig_property(_emlib.DensityHeader_Tiltaxis_get, _emlib.DensityHeader_Tiltaxis_set)
    __swig_setmethods__["MarkerX"] = _emlib.DensityHeader_MarkerX_set
    __swig_getmethods__["MarkerX"] = _emlib.DensityHeader_MarkerX_get
    if _newclass:MarkerX = _swig_property(_emlib.DensityHeader_MarkerX_get, _emlib.DensityHeader_MarkerX_set)
    __swig_setmethods__["MarkerY"] = _emlib.DensityHeader_MarkerY_set
    __swig_getmethods__["MarkerY"] = _emlib.DensityHeader_MarkerY_get
    if _newclass:MarkerY = _swig_property(_emlib.DensityHeader_MarkerY_get, _emlib.DensityHeader_MarkerY_set)
    __swig_setmethods__["lswap"] = _emlib.DensityHeader_lswap_set
    __swig_getmethods__["lswap"] = _emlib.DensityHeader_lswap_get
    if _newclass:lswap = _swig_property(_emlib.DensityHeader_lswap_get, _emlib.DensityHeader_lswap_set)
    __swig_setmethods__["resolution"] = _emlib.DensityHeader_resolution_set
    __swig_getmethods__["resolution"] = _emlib.DensityHeader_resolution_get
    if _newclass:resolution = _swig_property(_emlib.DensityHeader_resolution_get, _emlib.DensityHeader_resolution_set)
    __swig_destroy__ = _emlib.delete_DensityHeader
    __del__ = lambda self : None;
DensityHeader_swigregister = _emlib.DensityHeader_swigregister
DensityHeader_swigregister(DensityHeader)

class floatMap3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatMap3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatMap3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_floatMap3D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_floatMap3D
    __del__ = lambda self : None;
    def threeD2oneD_index(*args): return _emlib.floatMap3D_threeD2oneD_index(*args)
    def get_voxeldata(*args): return _emlib.floatMap3D_get_voxeldata(*args)
    def setData(*args): return _emlib.floatMap3D_setData(*args)
    def data(*args): return _emlib.floatMap3D_data(*args)
floatMap3D_swigregister = _emlib.floatMap3D_swigregister
floatMap3D_swigregister(floatMap3D)

class DensityMap(floatMap3D):
    __swig_setmethods__ = {}
    for _s in [floatMap3D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityMap, name, value)
    __swig_getmethods__ = {}
    for _s in [floatMap3D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_DensityMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def Read(*args): return _emlib.DensityMap_Read(*args)
    def Write(*args): return _emlib.DensityMap_Write(*args)
    def setResolution(*args): return _emlib.DensityMap_setResolution(*args)
    def ResetData(*args): return _emlib.DensityMap_ResetData(*args)
    def calcRMS(*args): return _emlib.DensityMap_calcRMS(*args)
    def stdNormalize(*args): return _emlib.DensityMap_stdNormalize(*args)
    def voxel2loc(*args): return _emlib.DensityMap_voxel2loc(*args)
    def header(*args): return _emlib.DensityMap_header(*args)
    def x_loc(*args): return _emlib.DensityMap_x_loc(*args)
    def y_loc(*args): return _emlib.DensityMap_y_loc(*args)
    def z_loc(*args): return _emlib.DensityMap_z_loc(*args)
    __swig_destroy__ = _emlib.delete_DensityMap
    __del__ = lambda self : None;
DensityMap_swigregister = _emlib.DensityMap_swigregister
DensityMap_swigregister(DensityMap)

class EMHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_EMHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def GenerateCommonHeader(*args): return _emlib.EMHeader_GenerateCommonHeader(*args)
    __swig_setmethods__["magic"] = _emlib.EMHeader_magic_set
    __swig_getmethods__["magic"] = _emlib.EMHeader_magic_get
    if _newclass:magic = _swig_property(_emlib.EMHeader_magic_get, _emlib.EMHeader_magic_set)
    __swig_setmethods__["type"] = _emlib.EMHeader_type_set
    __swig_getmethods__["type"] = _emlib.EMHeader_type_get
    if _newclass:type = _swig_property(_emlib.EMHeader_type_get, _emlib.EMHeader_type_set)
    __swig_setmethods__["nx"] = _emlib.EMHeader_nx_set
    __swig_getmethods__["nx"] = _emlib.EMHeader_nx_get
    if _newclass:nx = _swig_property(_emlib.EMHeader_nx_get, _emlib.EMHeader_nx_set)
    __swig_setmethods__["ny"] = _emlib.EMHeader_ny_set
    __swig_getmethods__["ny"] = _emlib.EMHeader_ny_get
    if _newclass:ny = _swig_property(_emlib.EMHeader_ny_get, _emlib.EMHeader_ny_set)
    __swig_setmethods__["nz"] = _emlib.EMHeader_nz_set
    __swig_getmethods__["nz"] = _emlib.EMHeader_nz_get
    if _newclass:nz = _swig_property(_emlib.EMHeader_nz_get, _emlib.EMHeader_nz_set)
    __swig_setmethods__["comment"] = _emlib.EMHeader_comment_set
    __swig_getmethods__["comment"] = _emlib.EMHeader_comment_get
    if _newclass:comment = _swig_property(_emlib.EMHeader_comment_get, _emlib.EMHeader_comment_set)
    __swig_setmethods__["voltage"] = _emlib.EMHeader_voltage_set
    __swig_getmethods__["voltage"] = _emlib.EMHeader_voltage_get
    if _newclass:voltage = _swig_property(_emlib.EMHeader_voltage_get, _emlib.EMHeader_voltage_set)
    __swig_setmethods__["Cs"] = _emlib.EMHeader_Cs_set
    __swig_getmethods__["Cs"] = _emlib.EMHeader_Cs_get
    if _newclass:Cs = _swig_property(_emlib.EMHeader_Cs_get, _emlib.EMHeader_Cs_set)
    __swig_setmethods__["Aperture"] = _emlib.EMHeader_Aperture_set
    __swig_getmethods__["Aperture"] = _emlib.EMHeader_Aperture_get
    if _newclass:Aperture = _swig_property(_emlib.EMHeader_Aperture_get, _emlib.EMHeader_Aperture_set)
    __swig_setmethods__["Magnification"] = _emlib.EMHeader_Magnification_set
    __swig_getmethods__["Magnification"] = _emlib.EMHeader_Magnification_get
    if _newclass:Magnification = _swig_property(_emlib.EMHeader_Magnification_get, _emlib.EMHeader_Magnification_set)
    __swig_setmethods__["Postmagnification"] = _emlib.EMHeader_Postmagnification_set
    __swig_getmethods__["Postmagnification"] = _emlib.EMHeader_Postmagnification_get
    if _newclass:Postmagnification = _swig_property(_emlib.EMHeader_Postmagnification_get, _emlib.EMHeader_Postmagnification_set)
    __swig_setmethods__["Exposuretime"] = _emlib.EMHeader_Exposuretime_set
    __swig_getmethods__["Exposuretime"] = _emlib.EMHeader_Exposuretime_get
    if _newclass:Exposuretime = _swig_property(_emlib.EMHeader_Exposuretime_get, _emlib.EMHeader_Exposuretime_set)
    __swig_setmethods__["Objectpixelsize"] = _emlib.EMHeader_Objectpixelsize_set
    __swig_getmethods__["Objectpixelsize"] = _emlib.EMHeader_Objectpixelsize_get
    if _newclass:Objectpixelsize = _swig_property(_emlib.EMHeader_Objectpixelsize_get, _emlib.EMHeader_Objectpixelsize_set)
    __swig_setmethods__["Microscope"] = _emlib.EMHeader_Microscope_set
    __swig_getmethods__["Microscope"] = _emlib.EMHeader_Microscope_get
    if _newclass:Microscope = _swig_property(_emlib.EMHeader_Microscope_get, _emlib.EMHeader_Microscope_set)
    __swig_setmethods__["Pixelsize"] = _emlib.EMHeader_Pixelsize_set
    __swig_getmethods__["Pixelsize"] = _emlib.EMHeader_Pixelsize_get
    if _newclass:Pixelsize = _swig_property(_emlib.EMHeader_Pixelsize_get, _emlib.EMHeader_Pixelsize_set)
    __swig_setmethods__["CCDArea"] = _emlib.EMHeader_CCDArea_set
    __swig_getmethods__["CCDArea"] = _emlib.EMHeader_CCDArea_get
    if _newclass:CCDArea = _swig_property(_emlib.EMHeader_CCDArea_get, _emlib.EMHeader_CCDArea_set)
    __swig_setmethods__["Defocus"] = _emlib.EMHeader_Defocus_set
    __swig_getmethods__["Defocus"] = _emlib.EMHeader_Defocus_get
    if _newclass:Defocus = _swig_property(_emlib.EMHeader_Defocus_get, _emlib.EMHeader_Defocus_set)
    __swig_setmethods__["Astigmatism"] = _emlib.EMHeader_Astigmatism_set
    __swig_getmethods__["Astigmatism"] = _emlib.EMHeader_Astigmatism_get
    if _newclass:Astigmatism = _swig_property(_emlib.EMHeader_Astigmatism_get, _emlib.EMHeader_Astigmatism_set)
    __swig_setmethods__["AstigmatismAngle"] = _emlib.EMHeader_AstigmatismAngle_set
    __swig_getmethods__["AstigmatismAngle"] = _emlib.EMHeader_AstigmatismAngle_get
    if _newclass:AstigmatismAngle = _swig_property(_emlib.EMHeader_AstigmatismAngle_get, _emlib.EMHeader_AstigmatismAngle_set)
    __swig_setmethods__["FocusIncrement"] = _emlib.EMHeader_FocusIncrement_set
    __swig_getmethods__["FocusIncrement"] = _emlib.EMHeader_FocusIncrement_get
    if _newclass:FocusIncrement = _swig_property(_emlib.EMHeader_FocusIncrement_get, _emlib.EMHeader_FocusIncrement_set)
    __swig_setmethods__["CountsPerElectron"] = _emlib.EMHeader_CountsPerElectron_set
    __swig_getmethods__["CountsPerElectron"] = _emlib.EMHeader_CountsPerElectron_get
    if _newclass:CountsPerElectron = _swig_property(_emlib.EMHeader_CountsPerElectron_get, _emlib.EMHeader_CountsPerElectron_set)
    __swig_setmethods__["Intensity"] = _emlib.EMHeader_Intensity_set
    __swig_getmethods__["Intensity"] = _emlib.EMHeader_Intensity_get
    if _newclass:Intensity = _swig_property(_emlib.EMHeader_Intensity_get, _emlib.EMHeader_Intensity_set)
    __swig_setmethods__["EnergySlitwidth"] = _emlib.EMHeader_EnergySlitwidth_set
    __swig_getmethods__["EnergySlitwidth"] = _emlib.EMHeader_EnergySlitwidth_get
    if _newclass:EnergySlitwidth = _swig_property(_emlib.EMHeader_EnergySlitwidth_get, _emlib.EMHeader_EnergySlitwidth_set)
    __swig_setmethods__["EnergyOffset"] = _emlib.EMHeader_EnergyOffset_set
    __swig_getmethods__["EnergyOffset"] = _emlib.EMHeader_EnergyOffset_get
    if _newclass:EnergyOffset = _swig_property(_emlib.EMHeader_EnergyOffset_get, _emlib.EMHeader_EnergyOffset_set)
    __swig_setmethods__["Tiltangle"] = _emlib.EMHeader_Tiltangle_set
    __swig_getmethods__["Tiltangle"] = _emlib.EMHeader_Tiltangle_get
    if _newclass:Tiltangle = _swig_property(_emlib.EMHeader_Tiltangle_get, _emlib.EMHeader_Tiltangle_set)
    __swig_setmethods__["Tiltaxis"] = _emlib.EMHeader_Tiltaxis_set
    __swig_getmethods__["Tiltaxis"] = _emlib.EMHeader_Tiltaxis_get
    if _newclass:Tiltaxis = _swig_property(_emlib.EMHeader_Tiltaxis_get, _emlib.EMHeader_Tiltaxis_set)
    __swig_setmethods__["MarkerX"] = _emlib.EMHeader_MarkerX_set
    __swig_getmethods__["MarkerX"] = _emlib.EMHeader_MarkerX_get
    if _newclass:MarkerX = _swig_property(_emlib.EMHeader_MarkerX_get, _emlib.EMHeader_MarkerX_set)
    __swig_setmethods__["MarkerY"] = _emlib.EMHeader_MarkerY_set
    __swig_getmethods__["MarkerY"] = _emlib.EMHeader_MarkerY_get
    if _newclass:MarkerY = _swig_property(_emlib.EMHeader_MarkerY_get, _emlib.EMHeader_MarkerY_set)
    __swig_setmethods__["lswap"] = _emlib.EMHeader_lswap_set
    __swig_getmethods__["lswap"] = _emlib.EMHeader_lswap_get
    if _newclass:lswap = _swig_property(_emlib.EMHeader_lswap_get, _emlib.EMHeader_lswap_set)
    __swig_destroy__ = _emlib.delete_EMHeader
    __del__ = lambda self : None;
EMHeader_swigregister = _emlib.EMHeader_swigregister
EMHeader_swigregister(EMHeader)

class EMReaderWriter(MapReaderWriter):
    __swig_setmethods__ = {}
    for _s in [MapReaderWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMReaderWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [MapReaderWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EMReaderWriter, name)
    __repr__ = _swig_repr
    def Read(*args): return _emlib.EMReaderWriter_Read(*args)
    def Write(*args): return _emlib.EMReaderWriter_Write(*args)
    def __init__(self, *args): 
        if self.__class__ == EMReaderWriter:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _emlib.new_EMReaderWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_EMReaderWriter
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _emlib.disown_EMReaderWriter(self)
        return weakref_proxy(self)
EMReaderWriter_swigregister = _emlib.EMReaderWriter_swigregister
EMReaderWriter_swigregister(EMReaderWriter)

class XplorHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XplorHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XplorHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_XplorHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def GenerateCommonHeader(*args): return _emlib.XplorHeader_GenerateCommonHeader(*args)
    __swig_setmethods__["grid"] = _emlib.XplorHeader_grid_set
    __swig_getmethods__["grid"] = _emlib.XplorHeader_grid_get
    if _newclass:grid = _swig_property(_emlib.XplorHeader_grid_get, _emlib.XplorHeader_grid_set)
    __swig_setmethods__["orig"] = _emlib.XplorHeader_orig_set
    __swig_getmethods__["orig"] = _emlib.XplorHeader_orig_get
    if _newclass:orig = _swig_property(_emlib.XplorHeader_orig_get, _emlib.XplorHeader_orig_set)
    __swig_setmethods__["top"] = _emlib.XplorHeader_top_set
    __swig_getmethods__["top"] = _emlib.XplorHeader_top_get
    if _newclass:top = _swig_property(_emlib.XplorHeader_top_get, _emlib.XplorHeader_top_set)
    __swig_setmethods__["extent"] = _emlib.XplorHeader_extent_set
    __swig_getmethods__["extent"] = _emlib.XplorHeader_extent_get
    if _newclass:extent = _swig_property(_emlib.XplorHeader_extent_get, _emlib.XplorHeader_extent_set)
    __swig_setmethods__["cellsize"] = _emlib.XplorHeader_cellsize_set
    __swig_getmethods__["cellsize"] = _emlib.XplorHeader_cellsize_get
    if _newclass:cellsize = _swig_property(_emlib.XplorHeader_cellsize_get, _emlib.XplorHeader_cellsize_set)
    __swig_setmethods__["cellangle"] = _emlib.XplorHeader_cellangle_set
    __swig_getmethods__["cellangle"] = _emlib.XplorHeader_cellangle_get
    if _newclass:cellangle = _swig_property(_emlib.XplorHeader_cellangle_get, _emlib.XplorHeader_cellangle_set)
    __swig_setmethods__["voxelsize"] = _emlib.XplorHeader_voxelsize_set
    __swig_getmethods__["voxelsize"] = _emlib.XplorHeader_voxelsize_get
    if _newclass:voxelsize = _swig_property(_emlib.XplorHeader_voxelsize_get, _emlib.XplorHeader_voxelsize_set)
    __swig_setmethods__["translateGrid"] = _emlib.XplorHeader_translateGrid_set
    __swig_getmethods__["translateGrid"] = _emlib.XplorHeader_translateGrid_get
    if _newclass:translateGrid = _swig_property(_emlib.XplorHeader_translateGrid_get, _emlib.XplorHeader_translateGrid_set)
    __swig_destroy__ = _emlib.delete_XplorHeader
    __del__ = lambda self : None;
XplorHeader_swigregister = _emlib.XplorHeader_swigregister
XplorHeader_swigregister(XplorHeader)

class XplorReaderWriter(MapReaderWriter):
    __swig_setmethods__ = {}
    for _s in [MapReaderWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XplorReaderWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [MapReaderWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XplorReaderWriter, name)
    __repr__ = _swig_repr
    def Read(*args): return _emlib.XplorReaderWriter_Read(*args)
    def Write(*args): return _emlib.XplorReaderWriter_Write(*args)
    def __init__(self, *args): 
        if self.__class__ == XplorReaderWriter:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _emlib.new_XplorReaderWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_XplorReaderWriter
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _emlib.disown_XplorReaderWriter(self)
        return weakref_proxy(self)
XplorReaderWriter_swigregister = _emlib.XplorReaderWriter_swigregister
XplorReaderWriter_swigregister(XplorReaderWriter)

MRC_LABEL_SIZE = _emlib.MRC_LABEL_SIZE
MRC_USER = _emlib.MRC_USER
MRC_NUM_LABELS = _emlib.MRC_NUM_LABELS
class MRCHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MRCHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MRCHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nz"] = _emlib.MRCHeader_nz_set
    __swig_getmethods__["nz"] = _emlib.MRCHeader_nz_get
    if _newclass:nz = _swig_property(_emlib.MRCHeader_nz_get, _emlib.MRCHeader_nz_set)
    __swig_setmethods__["ny"] = _emlib.MRCHeader_ny_set
    __swig_getmethods__["ny"] = _emlib.MRCHeader_ny_get
    if _newclass:ny = _swig_property(_emlib.MRCHeader_ny_get, _emlib.MRCHeader_ny_set)
    __swig_setmethods__["nx"] = _emlib.MRCHeader_nx_set
    __swig_getmethods__["nx"] = _emlib.MRCHeader_nx_get
    if _newclass:nx = _swig_property(_emlib.MRCHeader_nx_get, _emlib.MRCHeader_nx_set)
    __swig_setmethods__["mode"] = _emlib.MRCHeader_mode_set
    __swig_getmethods__["mode"] = _emlib.MRCHeader_mode_get
    if _newclass:mode = _swig_property(_emlib.MRCHeader_mode_get, _emlib.MRCHeader_mode_set)
    __swig_setmethods__["nxstart"] = _emlib.MRCHeader_nxstart_set
    __swig_getmethods__["nxstart"] = _emlib.MRCHeader_nxstart_get
    if _newclass:nxstart = _swig_property(_emlib.MRCHeader_nxstart_get, _emlib.MRCHeader_nxstart_set)
    __swig_setmethods__["nystart"] = _emlib.MRCHeader_nystart_set
    __swig_getmethods__["nystart"] = _emlib.MRCHeader_nystart_get
    if _newclass:nystart = _swig_property(_emlib.MRCHeader_nystart_get, _emlib.MRCHeader_nystart_set)
    __swig_setmethods__["nzstart"] = _emlib.MRCHeader_nzstart_set
    __swig_getmethods__["nzstart"] = _emlib.MRCHeader_nzstart_get
    if _newclass:nzstart = _swig_property(_emlib.MRCHeader_nzstart_get, _emlib.MRCHeader_nzstart_set)
    __swig_setmethods__["mx"] = _emlib.MRCHeader_mx_set
    __swig_getmethods__["mx"] = _emlib.MRCHeader_mx_get
    if _newclass:mx = _swig_property(_emlib.MRCHeader_mx_get, _emlib.MRCHeader_mx_set)
    __swig_setmethods__["my"] = _emlib.MRCHeader_my_set
    __swig_getmethods__["my"] = _emlib.MRCHeader_my_get
    if _newclass:my = _swig_property(_emlib.MRCHeader_my_get, _emlib.MRCHeader_my_set)
    __swig_setmethods__["mz"] = _emlib.MRCHeader_mz_set
    __swig_getmethods__["mz"] = _emlib.MRCHeader_mz_get
    if _newclass:mz = _swig_property(_emlib.MRCHeader_mz_get, _emlib.MRCHeader_mz_set)
    __swig_setmethods__["xlen"] = _emlib.MRCHeader_xlen_set
    __swig_getmethods__["xlen"] = _emlib.MRCHeader_xlen_get
    if _newclass:xlen = _swig_property(_emlib.MRCHeader_xlen_get, _emlib.MRCHeader_xlen_set)
    __swig_setmethods__["ylen"] = _emlib.MRCHeader_ylen_set
    __swig_getmethods__["ylen"] = _emlib.MRCHeader_ylen_get
    if _newclass:ylen = _swig_property(_emlib.MRCHeader_ylen_get, _emlib.MRCHeader_ylen_set)
    __swig_setmethods__["zlen"] = _emlib.MRCHeader_zlen_set
    __swig_getmethods__["zlen"] = _emlib.MRCHeader_zlen_get
    if _newclass:zlen = _swig_property(_emlib.MRCHeader_zlen_get, _emlib.MRCHeader_zlen_set)
    __swig_setmethods__["alpha"] = _emlib.MRCHeader_alpha_set
    __swig_getmethods__["alpha"] = _emlib.MRCHeader_alpha_get
    if _newclass:alpha = _swig_property(_emlib.MRCHeader_alpha_get, _emlib.MRCHeader_alpha_set)
    __swig_setmethods__["beta"] = _emlib.MRCHeader_beta_set
    __swig_getmethods__["beta"] = _emlib.MRCHeader_beta_get
    if _newclass:beta = _swig_property(_emlib.MRCHeader_beta_get, _emlib.MRCHeader_beta_set)
    __swig_setmethods__["gamma"] = _emlib.MRCHeader_gamma_set
    __swig_getmethods__["gamma"] = _emlib.MRCHeader_gamma_get
    if _newclass:gamma = _swig_property(_emlib.MRCHeader_gamma_get, _emlib.MRCHeader_gamma_set)
    __swig_setmethods__["mapc"] = _emlib.MRCHeader_mapc_set
    __swig_getmethods__["mapc"] = _emlib.MRCHeader_mapc_get
    if _newclass:mapc = _swig_property(_emlib.MRCHeader_mapc_get, _emlib.MRCHeader_mapc_set)
    __swig_setmethods__["mapr"] = _emlib.MRCHeader_mapr_set
    __swig_getmethods__["mapr"] = _emlib.MRCHeader_mapr_get
    if _newclass:mapr = _swig_property(_emlib.MRCHeader_mapr_get, _emlib.MRCHeader_mapr_set)
    __swig_setmethods__["maps"] = _emlib.MRCHeader_maps_set
    __swig_getmethods__["maps"] = _emlib.MRCHeader_maps_get
    if _newclass:maps = _swig_property(_emlib.MRCHeader_maps_get, _emlib.MRCHeader_maps_set)
    __swig_setmethods__["dmin"] = _emlib.MRCHeader_dmin_set
    __swig_getmethods__["dmin"] = _emlib.MRCHeader_dmin_get
    if _newclass:dmin = _swig_property(_emlib.MRCHeader_dmin_get, _emlib.MRCHeader_dmin_set)
    __swig_setmethods__["dmax"] = _emlib.MRCHeader_dmax_set
    __swig_getmethods__["dmax"] = _emlib.MRCHeader_dmax_get
    if _newclass:dmax = _swig_property(_emlib.MRCHeader_dmax_get, _emlib.MRCHeader_dmax_set)
    __swig_setmethods__["dmean"] = _emlib.MRCHeader_dmean_set
    __swig_getmethods__["dmean"] = _emlib.MRCHeader_dmean_get
    if _newclass:dmean = _swig_property(_emlib.MRCHeader_dmean_get, _emlib.MRCHeader_dmean_set)
    __swig_setmethods__["ispg"] = _emlib.MRCHeader_ispg_set
    __swig_getmethods__["ispg"] = _emlib.MRCHeader_ispg_get
    if _newclass:ispg = _swig_property(_emlib.MRCHeader_ispg_get, _emlib.MRCHeader_ispg_set)
    __swig_setmethods__["nsymbt"] = _emlib.MRCHeader_nsymbt_set
    __swig_getmethods__["nsymbt"] = _emlib.MRCHeader_nsymbt_get
    if _newclass:nsymbt = _swig_property(_emlib.MRCHeader_nsymbt_get, _emlib.MRCHeader_nsymbt_set)
    __swig_setmethods__["user"] = _emlib.MRCHeader_user_set
    __swig_getmethods__["user"] = _emlib.MRCHeader_user_get
    if _newclass:user = _swig_property(_emlib.MRCHeader_user_get, _emlib.MRCHeader_user_set)
    __swig_setmethods__["xorigin"] = _emlib.MRCHeader_xorigin_set
    __swig_getmethods__["xorigin"] = _emlib.MRCHeader_xorigin_get
    if _newclass:xorigin = _swig_property(_emlib.MRCHeader_xorigin_get, _emlib.MRCHeader_xorigin_set)
    __swig_setmethods__["yorigin"] = _emlib.MRCHeader_yorigin_set
    __swig_getmethods__["yorigin"] = _emlib.MRCHeader_yorigin_get
    if _newclass:yorigin = _swig_property(_emlib.MRCHeader_yorigin_get, _emlib.MRCHeader_yorigin_set)
    __swig_setmethods__["zorigin"] = _emlib.MRCHeader_zorigin_set
    __swig_getmethods__["zorigin"] = _emlib.MRCHeader_zorigin_get
    if _newclass:zorigin = _swig_property(_emlib.MRCHeader_zorigin_get, _emlib.MRCHeader_zorigin_set)
    __swig_setmethods__["map"] = _emlib.MRCHeader_map_set
    __swig_getmethods__["map"] = _emlib.MRCHeader_map_get
    if _newclass:map = _swig_property(_emlib.MRCHeader_map_get, _emlib.MRCHeader_map_set)
    __swig_setmethods__["machinestamp"] = _emlib.MRCHeader_machinestamp_set
    __swig_getmethods__["machinestamp"] = _emlib.MRCHeader_machinestamp_get
    if _newclass:machinestamp = _swig_property(_emlib.MRCHeader_machinestamp_get, _emlib.MRCHeader_machinestamp_set)
    __swig_setmethods__["rms"] = _emlib.MRCHeader_rms_set
    __swig_getmethods__["rms"] = _emlib.MRCHeader_rms_get
    if _newclass:rms = _swig_property(_emlib.MRCHeader_rms_get, _emlib.MRCHeader_rms_set)
    __swig_setmethods__["nlabl"] = _emlib.MRCHeader_nlabl_set
    __swig_getmethods__["nlabl"] = _emlib.MRCHeader_nlabl_get
    if _newclass:nlabl = _swig_property(_emlib.MRCHeader_nlabl_get, _emlib.MRCHeader_nlabl_set)
    __swig_setmethods__["labels"] = _emlib.MRCHeader_labels_set
    __swig_getmethods__["labels"] = _emlib.MRCHeader_labels_get
    if _newclass:labels = _swig_property(_emlib.MRCHeader_labels_get, _emlib.MRCHeader_labels_set)
    def FromDensityHeader(*args): return _emlib.MRCHeader_FromDensityHeader(*args)
    def ToDensityHeader(*args): return _emlib.MRCHeader_ToDensityHeader(*args)
    def __init__(self, *args): 
        this = _emlib.new_MRCHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_MRCHeader
    __del__ = lambda self : None;
MRCHeader_swigregister = _emlib.MRCHeader_swigregister
MRCHeader_swigregister(MRCHeader)

class MRCReaderWriter(MapReaderWriter):
    __swig_setmethods__ = {}
    for _s in [MapReaderWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MRCReaderWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [MapReaderWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MRCReaderWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == MRCReaderWriter:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _emlib.new_MRCReaderWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def Read(*args): return _emlib.MRCReaderWriter_Read(*args)
    def Write(*args): return _emlib.MRCReaderWriter_Write(*args)
    __swig_destroy__ = _emlib.delete_MRCReaderWriter
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _emlib.disown_MRCReaderWriter(self)
        return weakref_proxy(self)
MRCReaderWriter_swigregister = _emlib.MRCReaderWriter_swigregister
MRCReaderWriter_swigregister(MRCReaderWriter)

get_machine_stamp = _emlib.get_machine_stamp
is_bigendian = _emlib.is_bigendian
byte_swap = _emlib.byte_swap
class SampledDensityMap(DensityMap):
    __swig_setmethods__ = {}
    for _s in [DensityMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampledDensityMap, name, value)
    __swig_getmethods__ = {}
    for _s in [DensityMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampledDensityMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _emlib.new_SampledDensityMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def ReSample(*args): return _emlib.SampledDensityMap_ReSample(*args)
    def rsig(*args): return _emlib.SampledDensityMap_rsig(*args)
    def rsigsq(*args): return _emlib.SampledDensityMap_rsigsq(*args)
    def inv_rsigsq(*args): return _emlib.SampledDensityMap_inv_rsigsq(*args)
    def rnormfac(*args): return _emlib.SampledDensityMap_rnormfac(*args)
    def rkdist(*args): return _emlib.SampledDensityMap_rkdist(*args)
    def lim(*args): return _emlib.SampledDensityMap_lim(*args)
    def timessig(*args): return _emlib.SampledDensityMap_timessig(*args)
    def KernelSetup(*args): return _emlib.SampledDensityMap_KernelSetup(*args)
    def CalcBoundingBox(*args): return _emlib.SampledDensityMap_CalcBoundingBox(*args)
    __swig_destroy__ = _emlib.delete_SampledDensityMap
    __del__ = lambda self : None;
SampledDensityMap_swigregister = _emlib.SampledDensityMap_swigregister
SampledDensityMap_swigregister(SampledDensityMap)

class CoarseCC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoarseCC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoarseCC, name)
    __repr__ = _swig_repr
    __swig_getmethods__["evaluate"] = lambda x: _emlib.CoarseCC_evaluate
    if _newclass:evaluate = staticmethod(_emlib.CoarseCC_evaluate)
    __swig_getmethods__["calcDerivatives"] = lambda x: _emlib.CoarseCC_calcDerivatives
    if _newclass:calcDerivatives = staticmethod(_emlib.CoarseCC_calcDerivatives)
    def __init__(self, *args): 
        this = _emlib.new_CoarseCC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _emlib.delete_CoarseCC
    __del__ = lambda self : None;
CoarseCC_swigregister = _emlib.CoarseCC_swigregister
CoarseCC_swigregister(CoarseCC)
CoarseCC_evaluate = _emlib.CoarseCC_evaluate
CoarseCC_calcDerivatives = _emlib.CoarseCC_calcDerivatives

class CoarseCCatIntervals(CoarseCC):
    __swig_setmethods__ = {}
    for _s in [CoarseCC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoarseCCatIntervals, name, value)
    __swig_getmethods__ = {}
    for _s in [CoarseCC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoarseCCatIntervals, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def evaluate(*args): return _emlib.CoarseCCatIntervals_evaluate(*args)
    __swig_destroy__ = _emlib.delete_CoarseCCatIntervals
    __del__ = lambda self : None;
CoarseCCatIntervals_swigregister = _emlib.CoarseCCatIntervals_swigregister
CoarseCCatIntervals_swigregister(CoarseCCatIntervals)




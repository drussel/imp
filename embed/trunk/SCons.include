"""Utility functions used by all emlib modules"""

import os.path
import re
import sys

import SCons
_SWIGScanner = SCons.Scanner.ClassicCPP(
    "SWIGScan",
    ".i",
    "CPPPATH",
    '^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")'
)

class WineEnvironment(Environment):
    """Environment to build Windows binaries under Linux, by running the
       MSVC compiler (cl) and linker (link) through wine, using the w32cc
       and w32link shell scripts"""
    def __init__(self, platform='win32', CC='w32cc', LINK='w32link', **kw):
        if sys.platform != 'linux2':
            print "ERROR: Wine is supported only on Linux systems"
            Exit(1)
        Environment.__init__(self, platform=platform, CC=CC, LINK=LINK, **kw)
        posix_env = Environment(platform='posix')
        self['SHLIBPREFIX'] = self['LIBLINKPREFIX'] = 'lib'
        self['WINDOWSEXPPREFIX'] = 'lib'
        self['LIBSUFFIX'] = '.lib'
        self['PSPAWN'] = posix_env['PSPAWN']
        self['SPAWN'] = posix_env['SPAWN']
        self['SHELL'] = posix_env['SHELL']
        self['ENV'] = posix_env['ENV']
        self['PYTHON'] = 'w32python'
        self['PATHSEP'] = ';'
        # Use / rather than \ path separator:
        self['LINKCOM'] = self['LINKCOM'].replace('.windows', '')
        # Make sure we get the same Windows C/C++ library as Modeller, and
        # enable C++ exception handling
        self.Append(CFLAGS="/MD")
        self.Append(CXXFLAGS="/MD /GR /GX")

def _get_python_include(env):
    """Get the directory containing Python.h"""
    if env['wine']:
        return '/usr/lib/w32comp/w32python/2.5/include/'
    else:
        import distutils.sysconfig
        return distutils.sysconfig.get_python_inc()

def checkEndian(context):
    context.Message("Checking endianess... ")
    text = """
#include <stdio.h>
int main(int argc, char ** argv) {
  union {
    char array[4];
    int integer;
  } TestUnion;
  TestUnion.array[0] = 'a';
  TestUnion.array[1] = 'b';
  TestUnion.array[2] = 'c';
  TestUnion.array[3] = 'd';
  if (TestUnion.integer == 0x64636261) {
    printf("little");
  } else if (TestUnion.integer == 0x61626364) {
    printf("big");
  } else {
    printf("unknown");
  }
  return 0;
}
"""
    ret = context.TryRun(text, ".c")
    if ret[0] == 0:
        context.env.Exit("Could not run endian check program")
    # Workaround for dumb systems (e.g. wine) which insert stuff into stdout:
    result = ret[1].split()[-1]
    # Make sure we got a sensible result:
    if result == 'little' or result == 'big' or result == 'unknown':
        context.Result(result)
        return result
    else:
        context.env.Exit("Got nonsensical endian: %s" % result)

def CheckGNUHash(context):
    """Disable GNU_HASH-style linking (if found) for backwards compatibility"""
    context.Message('Checking whether GNU_HASH linking should be disabled...')
    lastLINKFLAGS = context.env['LINKFLAGS']
    context.env.Append(LINKFLAGS="-Wl,--hash-style=sysv")
    text = """
int main(void)
{ return 0; }
"""
    res = context.TryLink(text, '.c')
    if not res:
        context.Result("no")
        context.env.Replace(LINKFLAGS=lastLINKFLAGS)
    else:
        context.Result("yes")
    return res

def CheckGCCVisibility(context):
    """Check if the compiler supports setting visibility of symbols"""
    context.Message('Checking whether compiler supports -fvisibility...')
    lastCCFLAGS = context.env['CCFLAGS']
    context.env.Append(CCFLAGS="-fvisibility=hidden")
    text = """
__attribute__ ((visibility("default")))
int main(void)
{ return 0; }
"""
    res = context.TryLink(text, '.c')
    context.env.Replace(CCFLAGS=lastCCFLAGS)
    if not res:
        context.Result("no")
    else:
        context.env.Append(VIS_CPPDEFINES=['GCC_VISIBILITY'],
                           VIS_CCFLAGS="-fvisibility=hidden")
        context.Result("yes")
    return res





def MyEnvironment(options=None, *args, **kw):
    """Create an environment suitable for building emlib modules"""
    import platform
    env = Environment(tools=[], options=options)
    if env['wine']:
        env = WineEnvironment(options=options, *args, **kw)
    else:
        env = Environment(options=options, *args, **kw)
        env['PYTHON'] = 'python'
        env['PATHSEP'] = os.path.pathsep
    try:
        env['SHLINKFLAGS'].remove('-no_archive')
    except ValueError:
        pass
    env.Prepend(SCANNERS = _SWIGScanner)
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS="-Wall -Werror -g -O3")
#        env.Append(CCFLAGS="-Wall  -g -O3")
	print "-Wall -Werror -g -O3"

    sys = platform.system()
    if sys == 'SunOS':
        # Find locally-installed libraries in /usr/local (e.g. for SWIG)
        env['ENV']['LD_LIBRARY_PATH'] = '/usr/local/lib'
    # Note: would like to check for 'help' here too, but that requires a
    # post 0.97 scons snapshot
    if not env.GetOption('clean'):
        custom_tests = {'CheckGNUHash': CheckGNUHash,
                        'CheckGCCVisibility': CheckGCCVisibility,
                        'checkEndian': checkEndian,
                        }
        conf = env.Configure(custom_tests = custom_tests)
        if sys == 'Linux':
            conf.CheckGNUHash()
        conf.CheckGCCVisibility()
        if conf.checkEndian() == "little":
            env.Append(CPPDEFINES="EM_LITTLE_ENDIAN")
        conf.Finish()
    return env

def _fix_aix_cpp_link(env, cplusplus, linkflags):
    """On AIX things get confused if AIX C but not AIX C++ is installed - AIX C
       options get passed to g++ - so hard code GNU link flags"""
    if cplusplus and 'aixcc' in env['TOOLS'] and 'aixc++' not in env['TOOLS'] \
       and 'g++' in env['TOOLS']:
        slflags = str(env[linkflags])
        env[linkflags] = slflags.replace('-qmkshrobj -qsuppress=1501-218',
                                         '-shared')

def get_sharedlib_environment(env, cppdefine, cplusplus=False):
    """Get a modified environment suitable for building shared libraries
       (i.e. using gcc ELF visibility macros or MSVC dllexport/dllimport macros
       to mark dynamic symbols as exported or private). `cppdefine` should be
       the name of a cpp symbol to define to tell MSVC that we are building the
       library (by convention something of the form FOO_EXPORTS).
       If `cplusplus` is True, additional configuration suitable for a C++
       shared library is done."""
    e = env.Copy()
    e.Append(CPPDEFINES=[cppdefine, '${VIS_CPPDEFINES}'],
             CCFLAGS='${VIS_CCFLAGS}')

    _fix_aix_cpp_link(e, cplusplus, 'SHLINKFLAGS')
    return e

# Workaround for SWIG bug #1863647: Ensure that the PySwigIterator class is
# renamed with a module-specific prefix, to avoid collisions when using
# multiple modules
class _swig_postprocess(object):
    def __init__(self, modprefix):
        self.modprefix = modprefix
    def builder(self, source, target, env):
        wrap_c = target[0].path
        lines = file(wrap_c, 'r').readlines()
        repl = '"swig::%s_PySwigIterator *"' % self.modprefix
        fh = file(wrap_c, 'w')
        for line in lines:
            fh.write(line.replace('"swig::PySwigIterator *"', repl))
        fh.close()
        return 0

def get_pyext_environment(env, mod_prefix, cplusplus=False):
    """Get a modified environment for building a Python extension.
       `mod_prefix` should be a unique prefix for this module.
       If `cplusplus` is True, additional configuration suitable for a C++
       extension is done."""
    from platform import system
    e = env.Copy()
    if 'swig' not in e['TOOLS']:
        print "ERROR: SWIG could not be found. SWIG is needed to build."
        Exit(1)

    # See _swig_postprocess class comments:
    repl = '$SWIG -DPySwigIterator=%s_PySwigIterator ' % mod_prefix
    e['SWIGCOM'] = e['SWIGCOM'].replace('$SWIG ', repl)
    e['SWIGCOM'] = [e['SWIGCOM'], _swig_postprocess(mod_prefix).builder]

    e['LDMODULEPREFIX'] = ''
    # We're not going to link against the extension, so don't need a Windows
    # import library (.lib file):
    e['no_import_lib'] = 1
    platform = e['PLATFORM']
    if e['wine']:
        # Have to set SHLIBSUFFIX and PREFIX on Windows otherwise the
        # mslink tool complains
        e['SHLIBPREFIX'] = ''
        e['LDMODULESUFFIX'] = e['SHLIBSUFFIX'] = '.pyd'
        # Directory containing python25.lib:
        e.Append(LIBPATH=['/usr/lib/w32comp/w32python/2.5/lib/'])
    else:
        if platform == 'aix':
            # Make sure compilers are in the PATH, so that Python's script for
            # building AIX extension modules can find them:
            e['ENV']['PATH'] += ':/usr/vac/bin'
        from distutils.sysconfig import get_config_vars
        vars = get_config_vars('CC', 'CXX', 'OPT', 'BASECFLAGS', 'LDSHARED',
                               'SO')
        (cc, cxx, opt, basecflags, ldshared, so) = vars
        # distutils on AIX can get confused if AIX C but GNU C++ is installed:
        if platform == 'aix' and cxx == '':
            cxx = 'g++'
        # Don't require stack protector stuff on Linux, as this adds a
        # requirement for glibc-2.4:
        opt = opt.replace("-fstack-protector", "")
        # Remove options that don't work with C++ code:
        if cplusplus:
            opt = opt.replace("-Wstrict-prototypes", "")
        e.Replace(CC=cc, CXX=cxx, LDMODULESUFFIX=so)
        e.Replace(CPPFLAGS=basecflags.split() + opt.split())
        # Some gcc versions don't like the code that SWIG generates - but let
        # that go, because we have no control over it:
        try:
            e['CCFLAGS'].remove('-Werror')
        except ValueError:
            pass
        # AIX tries to use the C compiler rather than g++, so hardcode it here:
        if platform == 'aix' and cplusplus:
            ldshared = ldshared.replace(' cc_r', ' g++')
        # Default link flags on OS X don't work for us:
        if platform == 'darwin':
            e.Replace(LDMODULEFLAGS= \
                      '$LINKFLAGS -bundle -flat_namespace -undefined suppress')
        # Don't set link flags on Linux, as that would negate our GNU_HASH check
        elif system() != "Linux":
            e['LDMODULEFLAGS'] = []
            e['SHLINK'] = e['LDMODULE'] = ldshared
    e.Append(CPPPATH=[_get_python_include(e)])
    _fix_aix_cpp_link(e, cplusplus, 'SHLINKFLAGS')
    return e

def add_common_options(opts, package):
    """Add common options to an SCons Options object."""
    opts.Add(PathOption('prefix', 'Top-level installation directory', '/usr',
                        PathOption.PathAccept))
    opts.Add(PathOption('datadir', 'Data file installation directory',
                        '${prefix}/share/%s' % package, PathOption.PathAccept))
    opts.Add(PathOption('libdir', 'Shared library installation directory',
                        '${prefix}/lib', PathOption.PathAccept))
    opts.Add(PathOption('pythondir', 'Python module installation directory',
                        '${prefix}/lib/python%d.%d/site-packages' \
                        % sys.version_info[0:2], PathOption.PathAccept))
    opts.Add(PathOption('pyextdir',
                        'Python extension module installation directory',
                        '${pythondir}', PathOption.PathAccept))
    opts.Add(PathOption('docdir', 'Documentation installation directory',
                        '${prefix}/share/doc/%s' % package,
                        PathOption.PathAccept))
    opts.Add(BoolOption('wine',
                        'Build using MS Windows tools via Wine emulation',
                        False))

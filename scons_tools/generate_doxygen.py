"""Generate regular Doxygen .dox files from .dox.in files, which contain our
   own Doxygen extensions (e.g. IMP_PYTHON() to insert a colorized
   Python example)."""

from SCons.Script import Dir, File, Builder, Action
import SCons.Node.FS
import re
import colorize_python

_example_path = Dir('#/examples')

exre = re.compile('IMP_PYTHON\((.*)\)')

def _action_generate_dox(target, source, env):
    fin = file(source[0].path, 'r')
    fout = file(target[0].path, 'w')
    print >> fout, "/* Do NOT edit this file directly - it is auto-generated!"
    print >> fout, "   Edit %s instead */" % source[0].path
    print >> fout
    for line in fin:
        m = exre.search(line)
        if m:
            name = m.group(1)
            fullpath = _example_path.File(name + '.py')
            source = file(fullpath.path).read()
            colorize_python.Parser(source, fout).format(None, None)
            print >> fout
        else:
            fout.write(line)
    return 0

def _emit_generate_dox(target, source, env):
    deps = exre.findall(source[0].get_contents())
    source.extend([_example_path.File(name + '.py') for name in deps])
    return (target, source)

def _print_generate_dox(target, source, env):
    return "Generate '%s' from '%s'" % (target[0], source[0])

GenerateDoxFromIn = Builder(action=Action(_action_generate_dox,
                                          _print_generate_dox),
                            suffix=".dox",
                            prefix=".generated/",
                            src_suffix=".dox.in",
                            emitter=_emit_generate_dox)

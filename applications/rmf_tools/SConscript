Import('env')
import scons_tools.dependency.boost
scons_tools.dependency.boost.add_boost_library(env, "ProgramOptions", "program_options", 'boost/program_options.hpp',
                                               extra_boost_libs=["system"])


env= env.IMPApplication(name="rmf_tools", version='nightly-21/5/2012',
                        authors=["Daniel Russel"],
                        brief="Various tools for handling rmf files",
                        overview="""
   Several helper programs are provided. They all take the name of the RMF file as
   the first argument and an argument "-f" which is the frame to act on. Negative
   values for the frame are treated as every nth frame. That is, "-f -2" means take
   every other frame.

   - \c rmf_display outputs an arbitrary
   hdf5 file to pymol or chimera as appropriate (based on the file name of the
   second argument). It supports hierarchies, restraints and geometry.

   - \c rmf_show prints out the hierarchy written to the file.

   - \c rmf_pdb converts an rmf file to or from a PDB file, assuming all hierarchies
   in the rmf file are atomic resolution.

   - \c rmf_dot converts an rmf file to a graphviz graph, which can be displayed nicely
   and rendered to pdf.

   - \c rmf_xml converts an rmf file to an XML files that can be opened in an XML viewer
   (eg Google Chrome or Firefox). These viewers support collapsing of subtrees, which
   makes it much easier to get around large hierarchies.

   - \c rmf_info displays information about the attributes found in the RMF and how
   much they are used.

   - \c rmf_slice creates a new rmf from frames selected from an existing one.

   - \c rmf_cat creates a new rmf concatenating several with the same structure.

   - \c rmf_color adds color information to an RMF
   """,
                        license=env.IMPStandardLicense(),
                        publications=[],
                        required_modules=['rmf'],
                        required_dependencies=['Boost.ProgramOptions'],
                        python=False)

if env:
    env.IMPCPPExecutable(target="rmf_pdb", source=["rmf_pdb.cpp"])
    env.IMPCPPExecutable(target="rmf_display", source=["rmf_display.cpp"])
    env.IMPCPPExecutable(target="rmf_show", source=["rmf_show.cpp"])
    env.IMPCPPExecutable(target="rmf_xml", source=["rmf_xml.cpp"])
    env.IMPCPPExecutable(target="rmf_info", source=["rmf_info.cpp"])
    env.IMPCPPExecutable(target="rmf_color", source=["rmf_color.cpp"])
    env.IMPCPPExecutable(target="rmf_slice", source=["rmf_slice.cpp"])
    env.IMPCPPExecutable(target="rmf_cat", source=["rmf_cat.cpp"])

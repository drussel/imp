#!/usr/bin/python

import IMP
import IMP.saxs
import os
import subprocess

def parse_args():
    parser = IMP.OptionParser(usage="%prog [options] <receptor_pdb> "
                                    "<ligand_pdb>",
                              description="Integrative pairwise docking using "
                                          "SAXS, EM2D, EM3D, CXMS and/or RTC "
                                          "data.",
                              imp_module=IMP.saxs)
    parser.add_option('--saxs', metavar='FILE', dest='saxs_file',
                      help="File name of the complex SAXS profile")
    parser.add_option('--em3d', metavar='FILE', dest='map_file',
                      help="File name of the complex density map in mrc format")
    parser.add_option('--em2d', metavar='FILE', action='append', default=[],
                      dest='class_averages',
                      help="File name of a complex 2D class average in PGM "
                           "format. This option can be repeated to use "
                           "multiple class averages (up to 5 in total)")
    parser.add_option('--cxms', metavar='FILE', dest='cross_links_file',
                      help="File name of the cross links file")
    parser.add_option('--receptor_rtc', metavar='FILE',
                      help="File name of the receptor NMR residue type content")
    parser.add_option('--ligand_rtc', metavar='FILE',
                      help="File name of the ligand NMR residue type content")
    choices=['EI', 'AA', 'other']
    parser.add_option('--complex_type', metavar='TYPE', type='choice',
                      dest="type", choices=choices,
                      help='/'.join(choices) + '; use this order for '
                           'receptor-ligand: '
                           'antibody-antigen, enzyme-inhibitor')
    parser.add_option('--pixel_size', type='float', default=0.,
                      help='Pixel size for EM2D images')
    parser.add_option('--saxs_receptor_pdb', metavar='FILE',
                      help='Additional receptor structure for SAXS scoring '
                           'with modeled missing atoms/residues. '
                           'This structure should be aligned to the '
                           'input receptor!')
    parser.add_option('--saxs_ligand_pdb', metavar='FILE',
                      help='Additional ligand structure for SAXS scoring '
                           'with modeled missing atoms/residues. '
                           'This structure should be aligned to the '
                           'input ligand!')
    parser.add_option('--patch_dock', metavar='DIR',
                      default=os.environ.get('PATCH_DOCK_HOME', None),
                      help='Directory where PatchDock tools are installed. '
                           'If not specified, the value of the PATCH_DOCK_HOME '
                           'environment variable is used if set, otherwise the '
                           'tools are assumed to be in the default path.')
    parser.add_option('--prefix', default='',
                      help='Add prefix string (separated by an underscore) '
                           'to filenames generated by the current run')
    parser.add_option('--precision', type='choice', choices=['1', '2', '3'],
                      default='1',
                      help='Sampling precision for rigid docking: 1-normal, '
                           '2-medium, 3-high. The higher the precision, the '
                           'higher are the run times')

    opts, args = parser.parse_args()
    if len(args) != 2:
        parser.error("incorrect number of arguments")
    opts.precision = int(opts.precision)
    if len(opts.class_averages) > 0 and opts.pixel_size <= 0.:
        parser.error("please specify pixel size for 2D images with "
                     "--pixel_size option")
    if opts.prefix:
        opts.prefix += '_'
    if not opts.saxs_file and not opts.map_file and not opts.class_averages \
       and not opts.cross_links_file and not opts.receptor_rtc \
       and not opts.ligand_rtc:
        parser.error("please provide one or more types of experimental data: "
                     "SAXS, EM3D, EM2D, CXMS or NMR residue type content")
    return opts, args

class IDock(object):
    """Handle all stages of the integrative docking protocol"""

    def __init__(self, opts, receptor, ligand):
        self.opts = opts
        self.receptor = receptor
        self.ligand = ligand

    def run_patch_dock_binary(self, binary, args):
        """Run a binary that is part of the PatchDock distribution"""
        self._run_binary(self.opts.patch_dock, binary, args)

    def _run_binary(self, path, binary, args):
        if path:
            binary = os.path.join(path, binary)
        print ' '.join([binary] + args)
        p = subprocess.Popen([binary] + args)
        ret = p.wait()
        if ret != 0:
            raise OSError("subprocess failed with exit code %d" % ret)

    def make_patch_dock_surfaces(self):
        """Make molecular surfaces for PatchDock"""
        self.run_patch_dock_binary('buildMS.pl', [self.receptor, self.ligand])

    def make_patch_dock_parameters(self):
        """Make parameter file for PatchDock"""
        if self.opts.precision == 1:
            rmsd = '4.0'
        else:
            rmsd = '2.0'
        if self.opts.precision == 3:
            script = 'buildParamsFine.pl'
        else:
            script = 'buildParams.pl'
        self.run_patch_dock_binary(script, [self.receptor, self.ligand, rmsd,
                                            self.opts.type])

    def get_filename(self, fn):
        """Get a filename, with user-defined prefix if given"""
        return self.opts.prefix + fn

    def do_patch_dock_docking(self):
        """Do PatchDock docking, using previously generated surfaces
           and parameter files"""
        out_file = self.get_filename('docking.res')
        # Skip if PatchDock output file exists and contains transformations
        # (not just the header containing parameter information)
        if os.path.exists(out_file) and len(open(out_file).readlines()) > 36:
            print "Skipping PatchDock for %s" % self.receptor
        else:
            self.run_patch_dock_binary('patch_dock.Linux',
                                       ['params.txt', out_file])

    def run_patch_dock(self):
        """Run PatchDock on the ligand and receptor"""
        self.make_patch_dock_surfaces()
        self.make_patch_dock_parameters()
        self.do_patch_dock_docking()


def main():
    opts, args = parse_args()
    dock = IDock(opts, args[0], args[1])
    dock.run_patch_dock()

if __name__ == "__main__":
    main()

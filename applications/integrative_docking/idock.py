#!/usr/bin/python

import IMP
import IMP.saxs

def parse_args():
    parser = IMP.OptionParser(usage="%prog [options] <receptor_pdb> "
                                    "<ligand_pdb>",
                              description="Integrative pairwise docking using "
                                          "SAXS, EM2D, EM3D, CXMS and/or RTC "
                                          "data.",
                              imp_module=IMP.saxs)
    parser.add_option('--saxs', metavar='FILE', dest='saxs_file',
                      help="File name of the complex SAXS profile")
    parser.add_option('--em3d', metavar='FILE', dest='map_file',
                      help="File name of the complex density map in mrc format")
    parser.add_option('--em2d', metavar='FILE', action='append', default=[],
                      dest='class_averages',
                      help="File name of a complex 2D class average in PGM "
                           "format. This option can be repeated to use "
                           "multiple class averages (up to 5 in total)")
    parser.add_option('--cxms', metavar='FILE', dest='cross_links_file',
                      help="File name of the cross links file")
    parser.add_option('--receptor_rtc', metavar='FILE',
                      help="File name of the receptor NMR residue type content")
    parser.add_option('--ligand_rtc', metavar='FILE',
                      help="File name of the ligand NMR residue type content")
    choices=['EI', 'AA', 'other']
    parser.add_option('--complex_type', metavar='TYPE', type='choice',
                      dest="type", choices=choices,
                      help='/'.join(choices) + '; use this order for '
                           'receptor-ligand: '
                           'antibody-antigen, enzyme-inhibitor')
    parser.add_option('--pixel_size', type='float', default=0.,
                      help='Pixel size for EM2D images')
    parser.add_option('--saxs_receptor_pdb', metavar='FILE',
                      help='Additional receptor structure for SAXS scoring '
                           'with modeled missing atoms/residues. '
                           'This structure should be aligned to the '
                           'input receptor!')
    parser.add_option('--saxs_ligand_pdb', metavar='FILE',
                      help='Additional ligand structure for SAXS scoring '
                           'with modeled missing atoms/residues. '
                           'This structure should be aligned to the '
                           'input ligand!')
    parser.add_option('--prefix',
                      help='Add prefix string (separated by an underscore) '
                           'to filenames generated by the current run')
    parser.add_option('--precision', type='choice', choices=['1', '2', '3'],
                      default='1',
                      help='Sampling precision for rigid docking: 1-normal, '
                           '2-medium, 3-high. The higher the precision, the '
                           'higher are the run times')

    opts, args = parser.parse_args()
    if len(args) != 2:
        parser.error("incorrect number of arguments")
    opts.precision = int(opts.precision)
    if len(opts.class_averages) > 0 and opts.pixel_size <= 0.:
        parser.error("please specify pixel size for 2D images with "
                     "--pixel_size option")
    if opts.prefix:
        opts.prefix += '_'
    if not opts.saxs_file and not opts.map_file and not opts.class_averages \
       and not opts.cross_links_file and not opts.receptor_rtc \
       and not opts.ligand_rtc:
        parser.error("please provide one or more types of experimental data: "
                     "SAXS, EM3D, EM2D, CXMS or NMR residue type content")
    return opts, args

def main():
    opts, args = parse_args()

if __name__ == "__main__":
    main()
